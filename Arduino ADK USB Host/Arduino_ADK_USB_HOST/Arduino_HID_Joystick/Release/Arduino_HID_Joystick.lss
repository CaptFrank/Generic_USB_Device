
Arduino_HID_Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800200  000025a6  0000263a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003e4  0080024e  0080024e  00002688  2**0
                  ALLOC
  3 .debug_aranges 000008b8  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000178d  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000da68  00000000  00000000  000046cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002706  00000000  00000000  00012135  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006c8f  00000000  00000000  0001483b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f00  00000000  00000000  0001b4cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002dbe  00000000  00000000  0001c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004928  00000000  00000000  0001f18a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000800  00000000  00000000  00023ab2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	_packet_size = 0;
	_joystick_report = joystick_report;

	this->_command_interpreter = command_interpreter;
	this->_packet_parser = packet_parser;
}
       0:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__dtors_end>
USB_STATE_MACHINE::USB_STATE_MACHINE(){

	reset_device = 0;
	current_state = LOCAL_DEVICE_SETUP;
	next_state = current_state ++;
}
       4:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__vector_1>
		USB_STATE_MACHINE* usb_state_machine){
	this->command_buffer = 0;
	this->nvram_object = nvram_object;
	this->packet_decoder = packet_decoder;
	this->usb_state_machine = usb_state_machine;
}
       8:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__vector_2>
                _loadx(2, sizeof(nv), &nv);
        }
}

//! Save the args
void NVRAM::save(void){
       c:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__vector_3>
}

/**
 * The check watchdog method.
 */
void WATCHDOG::check_watchdog(void){
      10:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__vector_4>
	this->_packet_id 		= 0;
	this->_packet_ver 		= 0;
	this->_sum_A			= 0;
	this->_sum_B 			= 0;
	this->_guard_bool		= false;
}
      14:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__vector_5>
	//! Process String
	((PACKET_PARSER*) arg)->_parse(packet_id, packet_ver, buf);
}

//! Check if a specific packet was read.
bool PACKET_PARSER::_check_read_packet(byte packet_type){
      18:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__vector_6>
	_packet_size = 0;
	_button = 0;

	_joy = joystick_report;

}
      1c:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__vector_7>
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
      20:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__vector_8>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      24:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
#endif
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
      28:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}
      2c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      30:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
      34:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      38:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      3c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      40:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      44:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      48:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      4c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      50:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      54:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      58:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      5c:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__vector_23>
      60:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      64:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_25>
      68:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_26>
      6c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      70:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      74:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      78:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      7c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      80:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      84:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      88:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      8c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      90:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_36>
      94:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_37>
      98:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      9c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      a0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      a4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      a8:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      ac:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      b0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      b4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      b8:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      bc:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      c0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      c4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      c8:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      cc:	0c 94 be 09 	jmp	0x137c	; 0x137c <__vector_51>
      d0:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__vector_52>
      d4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      d8:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__vector_54>
      dc:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_55>
      e0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      e4:	e3 04       	cpc	r14, r3
      e6:	e8 04       	cpc	r14, r8
      e8:	f2 04       	cpc	r15, r2
      ea:	f7 04       	cpc	r15, r7
      ec:	fc 04       	cpc	r15, r12
      ee:	03 05       	cpc	r16, r3
      f0:	0f 05       	cpc	r16, r15
      f2:	16 05       	cpc	r17, r6
      f4:	22 05       	cpc	r18, r2
      f6:	72 05       	cpc	r23, r2
      f8:	30 05       	cpc	r19, r0
      fa:	29 05       	cpc	r18, r9
      fc:	30 05       	cpc	r19, r0
      fe:	72 05       	cpc	r23, r2
     100:	37 05       	cpc	r19, r7
     102:	40 05       	cpc	r20, r0
     104:	47 05       	cpc	r20, r7
     106:	54 05       	cpc	r21, r4
     108:	5b 05       	cpc	r21, r11
     10a:	62 05       	cpc	r22, r2

0000010c <_ZL13nvram_default>:
     10c:	80 25 80 25 80 25 0a 01 02 00 03 00 03 01 04 01     .%.%.%..........
     11c:	05 01 06 01 70 69 6e 67 3a 30 70 69 6e 67 3a 20     ....ping:0ping: 
     12c:	72 75 6e 63 6f 6e 66 69 67 72 63 6f 6e 66 69 67     runconfigrconfig
     13c:	20 65 6e 61 62 6c 65 64 63 68 61 6e 6e 65 6c 73      enabledchannels
     14c:	3a 20 73 74 61 74 75 73 70 61 75 73 65 3a 20 70     : statuspause: p
     15c:	61 75 73 65 3a 30 70 77 72 31 3a 30 70 77 72 31     ause:0pwr1:0pwr1
     16c:	3a 20 70 77 72 30 3a 30 70 77 72 30 3a 20 77 61     : pwr0:0pwr0: wa
     17c:	6b 65 3a 30 77 61 6b 65 3a 20 73 65 6e 73 6e 75     ke:0wake: sensnu
     18c:	6d 73 65 6e 63 68 6e 20                             msenchn 

00000194 <port_to_mode_PGM>:
     194:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     1a4:	01 01 00 00 04 01 07 01 0a 01                       ..........

000001ae <port_to_output_PGM>:
     1ae:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1be:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001c8 <port_to_input_PGM>:
     1c8:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1d8:	00 01 00 00 03 01 06 01 09 01                       ..........

000001e2 <digital_pin_to_port_PGM>:
     1e2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1f2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     202:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     212:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     222:	0b 0b 0b 0b 0b 0b                                   ......

00000228 <digital_pin_to_bit_mask_PGM>:
     228:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     238:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     248:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     258:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     268:	04 08 10 20 40 80                                   ... @.

0000026e <digital_pin_to_timer_PGM>:
     26e:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     29a:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000002b4 <__ctors_start>:
     2b4:	8a 08       	sbc	r8, r10
     2b6:	90 0c       	add	r9, r0

000002b8 <__ctors_end>:
     2b8:	83 08       	sbc	r8, r3

000002ba <__dtors_end>:
     2ba:	11 24       	eor	r1, r1
     2bc:	1f be       	out	0x3f, r1	; 63
     2be:	cf ef       	ldi	r28, 0xFF	; 255
     2c0:	d1 e2       	ldi	r29, 0x21	; 33
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	cd bf       	out	0x3d, r28	; 61
     2c6:	00 e0       	ldi	r16, 0x00	; 0
     2c8:	0c bf       	out	0x3c, r16	; 60

000002ca <__do_copy_data>:
     2ca:	12 e0       	ldi	r17, 0x02	; 2
     2cc:	a0 e0       	ldi	r26, 0x00	; 0
     2ce:	b2 e0       	ldi	r27, 0x02	; 2
     2d0:	e6 ea       	ldi	r30, 0xA6	; 166
     2d2:	f5 e2       	ldi	r31, 0x25	; 37
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	0b bf       	out	0x3b, r16	; 59
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <__do_copy_data+0x14>
     2da:	07 90       	elpm	r0, Z+
     2dc:	0d 92       	st	X+, r0
     2de:	ae 34       	cpi	r26, 0x4E	; 78
     2e0:	b1 07       	cpc	r27, r17
     2e2:	d9 f7       	brne	.-10     	; 0x2da <__do_copy_data+0x10>
     2e4:	1b be       	out	0x3b, r1	; 59

000002e6 <__do_clear_bss>:
     2e6:	16 e0       	ldi	r17, 0x06	; 6
     2e8:	ae e4       	ldi	r26, 0x4E	; 78
     2ea:	b2 e0       	ldi	r27, 0x02	; 2
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <.do_clear_bss_start>

000002ee <.do_clear_bss_loop>:
     2ee:	1d 92       	st	X+, r1

000002f0 <.do_clear_bss_start>:
     2f0:	a2 33       	cpi	r26, 0x32	; 50
     2f2:	b1 07       	cpc	r27, r17
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <.do_clear_bss_loop>

000002f6 <__do_global_ctors>:
     2f6:	12 e0       	ldi	r17, 0x02	; 2
     2f8:	c8 eb       	ldi	r28, 0xB8	; 184
     2fa:	d2 e0       	ldi	r29, 0x02	; 2
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <.do_global_ctors_start>

000002fe <.do_global_ctors_loop>:
     2fe:	22 97       	sbiw	r28, 0x02	; 2
     300:	fe 01       	movw	r30, r28
     302:	0e 94 8b 12 	call	0x2516	; 0x2516 <__tablejump__>

00000306 <.do_global_ctors_start>:
     306:	c4 3b       	cpi	r28, 0xB4	; 180
     308:	d1 07       	cpc	r29, r17
     30a:	c9 f7       	brne	.-14     	; 0x2fe <.do_global_ctors_loop>
     30c:	0e 94 47 09 	call	0x128e	; 0x128e <main>
     310:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__do_global_dtors>

00000314 <__bad_interrupt>:
     314:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000318 <malloc>:
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	bc 01       	movw	r22, r24
     31e:	82 30       	cpi	r24, 0x02	; 2
     320:	91 05       	cpc	r25, r1
     322:	10 f4       	brcc	.+4      	; 0x328 <malloc+0x10>
     324:	62 e0       	ldi	r22, 0x02	; 2
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	a0 91 30 06 	lds	r26, 0x0630
     32c:	b0 91 31 06 	lds	r27, 0x0631
     330:	ed 01       	movw	r28, r26
     332:	e0 e0       	ldi	r30, 0x00	; 0
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	21 c0       	rjmp	.+66     	; 0x37e <malloc+0x66>
     33c:	88 81       	ld	r24, Y
     33e:	99 81       	ldd	r25, Y+1	; 0x01
     340:	86 17       	cp	r24, r22
     342:	97 07       	cpc	r25, r23
     344:	69 f4       	brne	.+26     	; 0x360 <malloc+0x48>
     346:	8a 81       	ldd	r24, Y+2	; 0x02
     348:	9b 81       	ldd	r25, Y+3	; 0x03
     34a:	30 97       	sbiw	r30, 0x00	; 0
     34c:	19 f0       	breq	.+6      	; 0x354 <malloc+0x3c>
     34e:	93 83       	std	Z+3, r25	; 0x03
     350:	82 83       	std	Z+2, r24	; 0x02
     352:	04 c0       	rjmp	.+8      	; 0x35c <malloc+0x44>
     354:	90 93 31 06 	sts	0x0631, r25
     358:	80 93 30 06 	sts	0x0630, r24
     35c:	fe 01       	movw	r30, r28
     35e:	34 c0       	rjmp	.+104    	; 0x3c8 <malloc+0xb0>
     360:	68 17       	cp	r22, r24
     362:	79 07       	cpc	r23, r25
     364:	38 f4       	brcc	.+14     	; 0x374 <malloc+0x5c>
     366:	41 15       	cp	r20, r1
     368:	51 05       	cpc	r21, r1
     36a:	19 f0       	breq	.+6      	; 0x372 <malloc+0x5a>
     36c:	84 17       	cp	r24, r20
     36e:	95 07       	cpc	r25, r21
     370:	08 f4       	brcc	.+2      	; 0x374 <malloc+0x5c>
     372:	ac 01       	movw	r20, r24
     374:	fe 01       	movw	r30, r28
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	9b 81       	ldd	r25, Y+3	; 0x03
     37a:	9c 01       	movw	r18, r24
     37c:	e9 01       	movw	r28, r18
     37e:	20 97       	sbiw	r28, 0x00	; 0
     380:	e9 f6       	brne	.-70     	; 0x33c <malloc+0x24>
     382:	41 15       	cp	r20, r1
     384:	51 05       	cpc	r21, r1
     386:	a9 f1       	breq	.+106    	; 0x3f2 <malloc+0xda>
     388:	ca 01       	movw	r24, r20
     38a:	86 1b       	sub	r24, r22
     38c:	97 0b       	sbc	r25, r23
     38e:	04 97       	sbiw	r24, 0x04	; 4
     390:	08 f4       	brcc	.+2      	; 0x394 <malloc+0x7c>
     392:	ba 01       	movw	r22, r20
     394:	e0 e0       	ldi	r30, 0x00	; 0
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	2a c0       	rjmp	.+84     	; 0x3ee <malloc+0xd6>
     39a:	8d 91       	ld	r24, X+
     39c:	9c 91       	ld	r25, X
     39e:	11 97       	sbiw	r26, 0x01	; 1
     3a0:	84 17       	cp	r24, r20
     3a2:	95 07       	cpc	r25, r21
     3a4:	f9 f4       	brne	.+62     	; 0x3e4 <malloc+0xcc>
     3a6:	64 17       	cp	r22, r20
     3a8:	75 07       	cpc	r23, r21
     3aa:	81 f4       	brne	.+32     	; 0x3cc <malloc+0xb4>
     3ac:	12 96       	adiw	r26, 0x02	; 2
     3ae:	8d 91       	ld	r24, X+
     3b0:	9c 91       	ld	r25, X
     3b2:	13 97       	sbiw	r26, 0x03	; 3
     3b4:	30 97       	sbiw	r30, 0x00	; 0
     3b6:	19 f0       	breq	.+6      	; 0x3be <malloc+0xa6>
     3b8:	93 83       	std	Z+3, r25	; 0x03
     3ba:	82 83       	std	Z+2, r24	; 0x02
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <malloc+0xae>
     3be:	90 93 31 06 	sts	0x0631, r25
     3c2:	80 93 30 06 	sts	0x0630, r24
     3c6:	fd 01       	movw	r30, r26
     3c8:	32 96       	adiw	r30, 0x02	; 2
     3ca:	4c c0       	rjmp	.+152    	; 0x464 <malloc+0x14c>
     3cc:	ca 01       	movw	r24, r20
     3ce:	86 1b       	sub	r24, r22
     3d0:	97 0b       	sbc	r25, r23
     3d2:	fd 01       	movw	r30, r26
     3d4:	e8 0f       	add	r30, r24
     3d6:	f9 1f       	adc	r31, r25
     3d8:	61 93       	st	Z+, r22
     3da:	71 93       	st	Z+, r23
     3dc:	02 97       	sbiw	r24, 0x02	; 2
     3de:	8d 93       	st	X+, r24
     3e0:	9c 93       	st	X, r25
     3e2:	40 c0       	rjmp	.+128    	; 0x464 <malloc+0x14c>
     3e4:	fd 01       	movw	r30, r26
     3e6:	82 81       	ldd	r24, Z+2	; 0x02
     3e8:	93 81       	ldd	r25, Z+3	; 0x03
     3ea:	9c 01       	movw	r18, r24
     3ec:	d9 01       	movw	r26, r18
     3ee:	10 97       	sbiw	r26, 0x00	; 0
     3f0:	a1 f6       	brne	.-88     	; 0x39a <malloc+0x82>
     3f2:	80 91 2e 06 	lds	r24, 0x062E
     3f6:	90 91 2f 06 	lds	r25, 0x062F
     3fa:	89 2b       	or	r24, r25
     3fc:	41 f4       	brne	.+16     	; 0x40e <malloc+0xf6>
     3fe:	80 91 03 02 	lds	r24, 0x0203
     402:	90 91 04 02 	lds	r25, 0x0204
     406:	90 93 2f 06 	sts	0x062F, r25
     40a:	80 93 2e 06 	sts	0x062E, r24
     40e:	40 91 05 02 	lds	r20, 0x0205
     412:	50 91 06 02 	lds	r21, 0x0206
     416:	41 15       	cp	r20, r1
     418:	51 05       	cpc	r21, r1
     41a:	41 f4       	brne	.+16     	; 0x42c <malloc+0x114>
     41c:	4d b7       	in	r20, 0x3d	; 61
     41e:	5e b7       	in	r21, 0x3e	; 62
     420:	80 91 01 02 	lds	r24, 0x0201
     424:	90 91 02 02 	lds	r25, 0x0202
     428:	48 1b       	sub	r20, r24
     42a:	59 0b       	sbc	r21, r25
     42c:	20 91 2e 06 	lds	r18, 0x062E
     430:	30 91 2f 06 	lds	r19, 0x062F
     434:	ca 01       	movw	r24, r20
     436:	82 1b       	sub	r24, r18
     438:	93 0b       	sbc	r25, r19
     43a:	86 17       	cp	r24, r22
     43c:	97 07       	cpc	r25, r23
     43e:	80 f0       	brcs	.+32     	; 0x460 <malloc+0x148>
     440:	ab 01       	movw	r20, r22
     442:	4e 5f       	subi	r20, 0xFE	; 254
     444:	5f 4f       	sbci	r21, 0xFF	; 255
     446:	84 17       	cp	r24, r20
     448:	95 07       	cpc	r25, r21
     44a:	50 f0       	brcs	.+20     	; 0x460 <malloc+0x148>
     44c:	42 0f       	add	r20, r18
     44e:	53 1f       	adc	r21, r19
     450:	50 93 2f 06 	sts	0x062F, r21
     454:	40 93 2e 06 	sts	0x062E, r20
     458:	f9 01       	movw	r30, r18
     45a:	61 93       	st	Z+, r22
     45c:	71 93       	st	Z+, r23
     45e:	02 c0       	rjmp	.+4      	; 0x464 <malloc+0x14c>
     460:	e0 e0       	ldi	r30, 0x00	; 0
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	cf 01       	movw	r24, r30
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <free>:
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	09 f4       	brne	.+2      	; 0x476 <free+0xa>
     474:	50 c0       	rjmp	.+160    	; 0x516 <free+0xaa>
     476:	ec 01       	movw	r28, r24
     478:	22 97       	sbiw	r28, 0x02	; 2
     47a:	1b 82       	std	Y+3, r1	; 0x03
     47c:	1a 82       	std	Y+2, r1	; 0x02
     47e:	a0 91 30 06 	lds	r26, 0x0630
     482:	b0 91 31 06 	lds	r27, 0x0631
     486:	10 97       	sbiw	r26, 0x00	; 0
     488:	09 f1       	breq	.+66     	; 0x4cc <free+0x60>
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	ac 17       	cp	r26, r28
     490:	bd 07       	cpc	r27, r29
     492:	08 f1       	brcs	.+66     	; 0x4d6 <free+0x6a>
     494:	bb 83       	std	Y+3, r27	; 0x03
     496:	aa 83       	std	Y+2, r26	; 0x02
     498:	fe 01       	movw	r30, r28
     49a:	21 91       	ld	r18, Z+
     49c:	31 91       	ld	r19, Z+
     49e:	e2 0f       	add	r30, r18
     4a0:	f3 1f       	adc	r31, r19
     4a2:	ae 17       	cp	r26, r30
     4a4:	bf 07       	cpc	r27, r31
     4a6:	79 f4       	brne	.+30     	; 0x4c6 <free+0x5a>
     4a8:	8d 91       	ld	r24, X+
     4aa:	9c 91       	ld	r25, X
     4ac:	11 97       	sbiw	r26, 0x01	; 1
     4ae:	28 0f       	add	r18, r24
     4b0:	39 1f       	adc	r19, r25
     4b2:	2e 5f       	subi	r18, 0xFE	; 254
     4b4:	3f 4f       	sbci	r19, 0xFF	; 255
     4b6:	39 83       	std	Y+1, r19	; 0x01
     4b8:	28 83       	st	Y, r18
     4ba:	12 96       	adiw	r26, 0x02	; 2
     4bc:	8d 91       	ld	r24, X+
     4be:	9c 91       	ld	r25, X
     4c0:	13 97       	sbiw	r26, 0x03	; 3
     4c2:	9b 83       	std	Y+3, r25	; 0x03
     4c4:	8a 83       	std	Y+2, r24	; 0x02
     4c6:	41 15       	cp	r20, r1
     4c8:	51 05       	cpc	r21, r1
     4ca:	71 f4       	brne	.+28     	; 0x4e8 <free+0x7c>
     4cc:	d0 93 31 06 	sts	0x0631, r29
     4d0:	c0 93 30 06 	sts	0x0630, r28
     4d4:	20 c0       	rjmp	.+64     	; 0x516 <free+0xaa>
     4d6:	12 96       	adiw	r26, 0x02	; 2
     4d8:	8d 91       	ld	r24, X+
     4da:	9c 91       	ld	r25, X
     4dc:	13 97       	sbiw	r26, 0x03	; 3
     4de:	ad 01       	movw	r20, r26
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <free+0x7c>
     4e4:	dc 01       	movw	r26, r24
     4e6:	d3 cf       	rjmp	.-90     	; 0x48e <free+0x22>
     4e8:	fa 01       	movw	r30, r20
     4ea:	d3 83       	std	Z+3, r29	; 0x03
     4ec:	c2 83       	std	Z+2, r28	; 0x02
     4ee:	21 91       	ld	r18, Z+
     4f0:	31 91       	ld	r19, Z+
     4f2:	e2 0f       	add	r30, r18
     4f4:	f3 1f       	adc	r31, r19
     4f6:	ce 17       	cp	r28, r30
     4f8:	df 07       	cpc	r29, r31
     4fa:	69 f4       	brne	.+26     	; 0x516 <free+0xaa>
     4fc:	88 81       	ld	r24, Y
     4fe:	99 81       	ldd	r25, Y+1	; 0x01
     500:	28 0f       	add	r18, r24
     502:	39 1f       	adc	r19, r25
     504:	2e 5f       	subi	r18, 0xFE	; 254
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	fa 01       	movw	r30, r20
     50a:	31 83       	std	Z+1, r19	; 0x01
     50c:	20 83       	st	Z, r18
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	9b 81       	ldd	r25, Y+3	; 0x03
     512:	93 83       	std	Z+3, r25	; 0x03
     514:	82 83       	std	Z+2, r24	; 0x02
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <realloc>:
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	e4 e9       	ldi	r30, 0x94	; 148
     522:	f2 e0       	ldi	r31, 0x02	; 2
     524:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__prologue_saves__+0x4>
     528:	6c 01       	movw	r12, r24
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	29 f4       	brne	.+10     	; 0x538 <realloc+0x1c>
     52e:	cb 01       	movw	r24, r22
     530:	0e 94 8c 01 	call	0x318	; 0x318 <malloc>
     534:	6c 01       	movw	r12, r24
     536:	c1 c0       	rjmp	.+386    	; 0x6ba <realloc+0x19e>
     538:	8e ef       	ldi	r24, 0xFE	; 254
     53a:	88 2e       	mov	r8, r24
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	98 2e       	mov	r9, r24
     540:	8c 0c       	add	r8, r12
     542:	9d 1c       	adc	r9, r13
     544:	86 01       	movw	r16, r12
     546:	06 0f       	add	r16, r22
     548:	17 1f       	adc	r17, r23
     54a:	08 15       	cp	r16, r8
     54c:	19 05       	cpc	r17, r9
     54e:	08 f4       	brcc	.+2      	; 0x552 <realloc+0x36>
     550:	b2 c0       	rjmp	.+356    	; 0x6b6 <realloc+0x19a>
     552:	f4 01       	movw	r30, r8
     554:	a0 81       	ld	r26, Z
     556:	b1 81       	ldd	r27, Z+1	; 0x01
     558:	a6 17       	cp	r26, r22
     55a:	b7 07       	cpc	r27, r23
     55c:	b8 f0       	brcs	.+46     	; 0x58c <realloc+0x70>
     55e:	a5 30       	cpi	r26, 0x05	; 5
     560:	b1 05       	cpc	r27, r1
     562:	08 f4       	brcc	.+2      	; 0x566 <realloc+0x4a>
     564:	aa c0       	rjmp	.+340    	; 0x6ba <realloc+0x19e>
     566:	cd 01       	movw	r24, r26
     568:	04 97       	sbiw	r24, 0x04	; 4
     56a:	86 17       	cp	r24, r22
     56c:	97 07       	cpc	r25, r23
     56e:	08 f4       	brcc	.+2      	; 0x572 <realloc+0x56>
     570:	a4 c0       	rjmp	.+328    	; 0x6ba <realloc+0x19e>
     572:	12 97       	sbiw	r26, 0x02	; 2
     574:	a6 1b       	sub	r26, r22
     576:	b7 0b       	sbc	r27, r23
     578:	f8 01       	movw	r30, r16
     57a:	a1 93       	st	Z+, r26
     57c:	b1 93       	st	Z+, r27
     57e:	d4 01       	movw	r26, r8
     580:	6d 93       	st	X+, r22
     582:	7c 93       	st	X, r23
     584:	cf 01       	movw	r24, r30
     586:	0e 94 36 02 	call	0x46c	; 0x46c <free>
     58a:	97 c0       	rjmp	.+302    	; 0x6ba <realloc+0x19e>
     58c:	7b 01       	movw	r14, r22
     58e:	ea 1a       	sub	r14, r26
     590:	fb 0a       	sbc	r15, r27
     592:	ee ef       	ldi	r30, 0xFE	; 254
     594:	ff ef       	ldi	r31, 0xFF	; 255
     596:	ee 0e       	add	r14, r30
     598:	ff 1e       	adc	r15, r31
     59a:	36 01       	movw	r6, r12
     59c:	6a 0e       	add	r6, r26
     59e:	7b 1e       	adc	r7, r27
     5a0:	c0 91 30 06 	lds	r28, 0x0630
     5a4:	d0 91 31 06 	lds	r29, 0x0631
     5a8:	44 24       	eor	r4, r4
     5aa:	55 24       	eor	r5, r5
     5ac:	aa 24       	eor	r10, r10
     5ae:	bb 24       	eor	r11, r11
     5b0:	4a c0       	rjmp	.+148    	; 0x646 <realloc+0x12a>
     5b2:	c6 15       	cp	r28, r6
     5b4:	d7 05       	cpc	r29, r7
     5b6:	e1 f5       	brne	.+120    	; 0x630 <realloc+0x114>
     5b8:	48 81       	ld	r20, Y
     5ba:	59 81       	ldd	r21, Y+1	; 0x01
     5bc:	4e 15       	cp	r20, r14
     5be:	5f 05       	cpc	r21, r15
     5c0:	b8 f1       	brcs	.+110    	; 0x630 <realloc+0x114>
     5c2:	ca 01       	movw	r24, r20
     5c4:	04 97       	sbiw	r24, 0x04	; 4
     5c6:	8e 15       	cp	r24, r14
     5c8:	9f 05       	cpc	r25, r15
     5ca:	b0 f4       	brcc	.+44     	; 0x5f8 <realloc+0xdc>
     5cc:	12 96       	adiw	r26, 0x02	; 2
     5ce:	a4 0f       	add	r26, r20
     5d0:	b5 1f       	adc	r27, r21
     5d2:	f4 01       	movw	r30, r8
     5d4:	b1 83       	std	Z+1, r27	; 0x01
     5d6:	a0 83       	st	Z, r26
     5d8:	2a 81       	ldd	r18, Y+2	; 0x02
     5da:	3b 81       	ldd	r19, Y+3	; 0x03
     5dc:	41 14       	cp	r4, r1
     5de:	51 04       	cpc	r5, r1
     5e0:	31 f0       	breq	.+12     	; 0x5ee <realloc+0xd2>
     5e2:	d2 01       	movw	r26, r4
     5e4:	13 96       	adiw	r26, 0x03	; 3
     5e6:	3c 93       	st	X, r19
     5e8:	2e 93       	st	-X, r18
     5ea:	12 97       	sbiw	r26, 0x02	; 2
     5ec:	66 c0       	rjmp	.+204    	; 0x6ba <realloc+0x19e>
     5ee:	30 93 31 06 	sts	0x0631, r19
     5f2:	20 93 30 06 	sts	0x0630, r18
     5f6:	61 c0       	rjmp	.+194    	; 0x6ba <realloc+0x19e>
     5f8:	8a 81       	ldd	r24, Y+2	; 0x02
     5fa:	9b 81       	ldd	r25, Y+3	; 0x03
     5fc:	f8 01       	movw	r30, r16
     5fe:	93 83       	std	Z+3, r25	; 0x03
     600:	82 83       	std	Z+2, r24	; 0x02
     602:	42 50       	subi	r20, 0x02	; 2
     604:	50 40       	sbci	r21, 0x00	; 0
     606:	4e 19       	sub	r20, r14
     608:	5f 09       	sbc	r21, r15
     60a:	51 83       	std	Z+1, r21	; 0x01
     60c:	40 83       	st	Z, r20
     60e:	41 14       	cp	r4, r1
     610:	51 04       	cpc	r5, r1
     612:	31 f0       	breq	.+12     	; 0x620 <realloc+0x104>
     614:	d2 01       	movw	r26, r4
     616:	13 96       	adiw	r26, 0x03	; 3
     618:	1c 93       	st	X, r17
     61a:	0e 93       	st	-X, r16
     61c:	12 97       	sbiw	r26, 0x02	; 2
     61e:	04 c0       	rjmp	.+8      	; 0x628 <realloc+0x10c>
     620:	10 93 31 06 	sts	0x0631, r17
     624:	00 93 30 06 	sts	0x0630, r16
     628:	f4 01       	movw	r30, r8
     62a:	71 83       	std	Z+1, r23	; 0x01
     62c:	60 83       	st	Z, r22
     62e:	45 c0       	rjmp	.+138    	; 0x6ba <realloc+0x19e>
     630:	88 81       	ld	r24, Y
     632:	99 81       	ldd	r25, Y+1	; 0x01
     634:	a8 16       	cp	r10, r24
     636:	b9 06       	cpc	r11, r25
     638:	08 f4       	brcc	.+2      	; 0x63c <realloc+0x120>
     63a:	5c 01       	movw	r10, r24
     63c:	2e 01       	movw	r4, r28
     63e:	8a 81       	ldd	r24, Y+2	; 0x02
     640:	9b 81       	ldd	r25, Y+3	; 0x03
     642:	9c 01       	movw	r18, r24
     644:	e9 01       	movw	r28, r18
     646:	20 97       	sbiw	r28, 0x00	; 0
     648:	09 f0       	breq	.+2      	; 0x64c <realloc+0x130>
     64a:	b3 cf       	rjmp	.-154    	; 0x5b2 <realloc+0x96>
     64c:	80 91 2e 06 	lds	r24, 0x062E
     650:	90 91 2f 06 	lds	r25, 0x062F
     654:	86 15       	cp	r24, r6
     656:	97 05       	cpc	r25, r7
     658:	e9 f4       	brne	.+58     	; 0x694 <realloc+0x178>
     65a:	a6 16       	cp	r10, r22
     65c:	b7 06       	cpc	r11, r23
     65e:	d0 f4       	brcc	.+52     	; 0x694 <realloc+0x178>
     660:	20 91 05 02 	lds	r18, 0x0205
     664:	30 91 06 02 	lds	r19, 0x0206
     668:	21 15       	cp	r18, r1
     66a:	31 05       	cpc	r19, r1
     66c:	41 f4       	brne	.+16     	; 0x67e <realloc+0x162>
     66e:	2d b7       	in	r18, 0x3d	; 61
     670:	3e b7       	in	r19, 0x3e	; 62
     672:	80 91 01 02 	lds	r24, 0x0201
     676:	90 91 02 02 	lds	r25, 0x0202
     67a:	28 1b       	sub	r18, r24
     67c:	39 0b       	sbc	r19, r25
     67e:	02 17       	cp	r16, r18
     680:	13 07       	cpc	r17, r19
     682:	c8 f4       	brcc	.+50     	; 0x6b6 <realloc+0x19a>
     684:	10 93 2f 06 	sts	0x062F, r17
     688:	00 93 2e 06 	sts	0x062E, r16
     68c:	d4 01       	movw	r26, r8
     68e:	6d 93       	st	X+, r22
     690:	7c 93       	st	X, r23
     692:	13 c0       	rjmp	.+38     	; 0x6ba <realloc+0x19e>
     694:	cb 01       	movw	r24, r22
     696:	0e 94 8c 01 	call	0x318	; 0x318 <malloc>
     69a:	ec 01       	movw	r28, r24
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	59 f0       	breq	.+22     	; 0x6b6 <realloc+0x19a>
     6a0:	f4 01       	movw	r30, r8
     6a2:	40 81       	ld	r20, Z
     6a4:	51 81       	ldd	r21, Z+1	; 0x01
     6a6:	b6 01       	movw	r22, r12
     6a8:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <memcpy>
     6ac:	c6 01       	movw	r24, r12
     6ae:	0e 94 36 02 	call	0x46c	; 0x46c <free>
     6b2:	6e 01       	movw	r12, r28
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <realloc+0x19e>
     6b6:	cc 24       	eor	r12, r12
     6b8:	dd 24       	eor	r13, r13
     6ba:	c6 01       	movw	r24, r12
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	e0 e1       	ldi	r30, 0x10	; 16
     6c2:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__epilogue_restores__+0x4>

000006c6 <memcpy_P>:
     6c6:	fb 01       	movw	r30, r22
     6c8:	dc 01       	movw	r26, r24
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <memcpy_P+0xa>
     6cc:	05 90       	lpm	r0, Z+
     6ce:	0d 92       	st	X+, r0
     6d0:	41 50       	subi	r20, 0x01	; 1
     6d2:	50 40       	sbci	r21, 0x00	; 0
     6d4:	d8 f7       	brcc	.-10     	; 0x6cc <memcpy_P+0x6>
     6d6:	08 95       	ret

000006d8 <memcpy>:
     6d8:	fb 01       	movw	r30, r22
     6da:	dc 01       	movw	r26, r24
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <memcpy+0xa>
     6de:	01 90       	ld	r0, Z+
     6e0:	0d 92       	st	X+, r0
     6e2:	41 50       	subi	r20, 0x01	; 1
     6e4:	50 40       	sbci	r21, 0x00	; 0
     6e6:	d8 f7       	brcc	.-10     	; 0x6de <memcpy+0x6>
     6e8:	08 95       	ret

000006ea <strcpy>:
     6ea:	fb 01       	movw	r30, r22
     6ec:	dc 01       	movw	r26, r24
     6ee:	01 90       	ld	r0, Z+
     6f0:	0d 92       	st	X+, r0
     6f2:	00 20       	and	r0, r0
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <strcpy+0x4>
     6f6:	08 95       	ret

000006f8 <_ZN10USB_DEVICEC1EP14COMMAND_PARSERP13PACKET_PARSERP17joystick_report_t>:
#define X_AXIS			2
#define Y_AXIS			3

//! Default Constructor
USB_DEVICE::USB_DEVICE(COMMAND_PARSER* command_interpreter, PACKET_PARSER* packet_parser,
		joystick_report_t* joystick_report){
     6f8:	fc 01       	movw	r30, r24
	//! Sending mutex
	_sending_mutex = false;
     6fa:	16 82       	std	Z+6, r1	; 0x06

	//! Initializing the enviroment variables
	_packet_buffer = EMPTY;
     6fc:	11 82       	std	Z+1, r1	; 0x01
     6fe:	10 82       	st	Z, r1
	_packet_id = EMPTY;
     700:	13 82       	std	Z+3, r1	; 0x03
     702:	12 82       	std	Z+2, r1	; 0x02
	_packet_in_sending_queue = true;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	85 83       	std	Z+5, r24	; 0x05
	_packet_size = 0;
     708:	14 82       	std	Z+4, r1	; 0x04
	_joystick_report = joystick_report;
     70a:	34 87       	std	Z+12, r19	; 0x0c
     70c:	23 87       	std	Z+11, r18	; 0x0b

	this->_command_interpreter = command_interpreter;
     70e:	70 87       	std	Z+8, r23	; 0x08
     710:	67 83       	std	Z+7, r22	; 0x07
	this->_packet_parser = packet_parser;
     712:	52 87       	std	Z+10, r21	; 0x0a
     714:	41 87       	std	Z+9, r20	; 0x09
}
     716:	08 95       	ret

00000718 <_ZN10USB_DEVICE16_init_rf_networkEv>:

	_packet_in_sending_queue = false;
}

//! Setup rf link
void USB_DEVICE::_init_rf_network(){
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	ec 01       	movw	r28, r24
	 * Start the state machine and push the state to start.
	 *
	 * FROM: 	LOCAL_DEVICE_SETUP
	 * TO: 		NETWORK_SETUP
	 */
	this->_command_interpreter->usb_state_machine->move_state_forward();
     71e:	ef 81       	ldd	r30, Y+7	; 0x07
     720:	f8 85       	ldd	r31, Y+8	; 0x08
     722:	84 81       	ldd	r24, Z+4	; 0x04
     724:	95 81       	ldd	r25, Z+5	; 0x05
     726:	0e 94 83 04 	call	0x906	; 0x906 <_ZN17USB_STATE_MACHINE18move_state_forwardEv>

	/**
	 * Powers on the router.
	 */
	this->_command_interpreter->send_cmd(USB_DEVICE_CMD, (void*)POWERON_ROUTER);
     72a:	8f 81       	ldd	r24, Y+7	; 0x07
     72c:	98 85       	ldd	r25, Y+8	; 0x08
     72e:	61 e3       	ldi	r22, 0x31	; 49
     730:	45 e0       	ldi	r20, 0x05	; 5
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN14COMMAND_PARSER8send_cmdEhPv>
	 * state machine.
	 *
	 * FROM: 	NETWORK_SETUP
	 * TO: 		NETWORK_ID_REQUEST
	 */
	this->_command_interpreter->usb_state_machine->move_state_forward();
     738:	ef 81       	ldd	r30, Y+7	; 0x07
     73a:	f8 85       	ldd	r31, Y+8	; 0x08
     73c:	84 81       	ldd	r24, Z+4	; 0x04
     73e:	95 81       	ldd	r25, Z+5	; 0x05
     740:	0e 94 83 04 	call	0x906	; 0x906 <_ZN17USB_STATE_MACHINE18move_state_forwardEv>
	 *
	 *	-> power_on_router();
	 * 	 1. send_wakeup_router();
	 * 	 	-> receive_router_ack();
 	 */
	this->_command_interpreter->send_cmd(USB_DEVICE_CMD, (void*)WAKEUP_ROUTER);
     744:	8f 81       	ldd	r24, Y+7	; 0x07
     746:	98 85       	ldd	r25, Y+8	; 0x08
     748:	61 e3       	ldi	r22, 0x31	; 49
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN14COMMAND_PARSER8send_cmdEhPv>

	/**
	 * Makes sure that the device is ok and running
	 */
	this->_command_interpreter->send_cmd(USB_DEVICE_CMD, (void*)PING_ROUTER);
     752:	8f 81       	ldd	r24, Y+7	; 0x07
     754:	98 85       	ldd	r25, Y+8	; 0x08
     756:	61 e3       	ldi	r22, 0x31	; 49
     758:	40 e1       	ldi	r20, 0x10	; 16
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN14COMMAND_PARSER8send_cmdEhPv>
	 * Move the state machine to the network status request state.
	 *
	 * FROM:	NETWORK_ID_REQUEST
	 * TO: 		NETWORK_STATUS_REQUEST
	 */
	this->_command_interpreter->usb_state_machine->move_state_forward();
     760:	ef 81       	ldd	r30, Y+7	; 0x07
     762:	f8 85       	ldd	r31, Y+8	; 0x08
     764:	84 81       	ldd	r24, Z+4	; 0x04
     766:	95 81       	ldd	r25, Z+5	; 0x05
     768:	0e 94 83 04 	call	0x906	; 0x906 <_ZN17USB_STATE_MACHINE18move_state_forwardEv>
	 *    to continue with the setup process.
	 *
  	 * 	  2. request_router_status();
  	 * 	  	-> receive_router_status();
	 */
	this->_command_interpreter->send_cmd(USB_DEVICE_CMD, (void*)REQUEST_ROUTER_STATUS);
     76c:	8f 81       	ldd	r24, Y+7	; 0x07
     76e:	98 85       	ldd	r25, Y+8	; 0x08
     770:	61 e3       	ldi	r22, 0x31	; 49
     772:	49 e0       	ldi	r20, 0x09	; 9
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN14COMMAND_PARSER8send_cmdEhPv>

	/**
	 * Gets the router configs. [Radio Bytes Config]
	 * Gets the radio configuration registers in the transceiver.
	 */
	this->_command_interpreter->send_cmd(USB_DEVICE_CMD, (void*)REQUEST_ROUTER_CONFIG);
     77a:	8f 81       	ldd	r24, Y+7	; 0x07
     77c:	98 85       	ldd	r25, Y+8	; 0x08
     77e:	61 e3       	ldi	r22, 0x31	; 49
     780:	42 e1       	ldi	r20, 0x12	; 18
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN14COMMAND_PARSER8send_cmdEhPv>

	/**
	 * Save them to eeprom address 200dec.
	 */
	this->_command_interpreter->nvram_object->savex((byte)200,
			(byte)8, (void*)&this->_packet_parser->_radio_configs);
     788:	ef 81       	ldd	r30, Y+7	; 0x07
     78a:	f8 85       	ldd	r31, Y+8	; 0x08
     78c:	29 85       	ldd	r18, Y+9	; 0x09
     78e:	3a 85       	ldd	r19, Y+10	; 0x0a
     790:	25 5d       	subi	r18, 0xD5	; 213
     792:	3f 4f       	sbci	r19, 0xFF	; 255
     794:	86 81       	ldd	r24, Z+6	; 0x06
     796:	97 81       	ldd	r25, Z+7	; 0x07
     798:	68 ec       	ldi	r22, 0xC8	; 200
     79a:	48 e0       	ldi	r20, 0x08	; 8
     79c:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN5NVRAM5savexEhhPv>
	 * Move the state machine to the network map request.
	 *
	 * FROM:	NETWORK_STATUS_REQUEST
	 * TO: 		NETWORK_MAP_REQUEST
	 */
	this->_command_interpreter->usb_state_machine->move_state_forward();
     7a0:	ef 81       	ldd	r30, Y+7	; 0x07
     7a2:	f8 85       	ldd	r31, Y+8	; 0x08
     7a4:	84 81       	ldd	r24, Z+4	; 0x04
     7a6:	95 81       	ldd	r25, Z+5	; 0x05
     7a8:	0e 94 83 04 	call	0x906	; 0x906 <_ZN17USB_STATE_MACHINE18move_state_forwardEv>
	 *    to continue with the setup process.
	 *
	 *		3. request_net_map();
	 *			-> receive_nmap();
	 */
	this->_command_interpreter->send_cmd(USB_DEVICE_CMD, (void*)REQUEST_NMAP);
     7ac:	8f 81       	ldd	r24, Y+7	; 0x07
     7ae:	98 85       	ldd	r25, Y+8	; 0x08
     7b0:	61 e3       	ldi	r22, 0x31	; 49
     7b2:	4a e0       	ldi	r20, 0x0A	; 10
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN14COMMAND_PARSER8send_cmdEhPv>
	 * Move the state machine to the network sensor configs.
	 *
	 * FROM:	NETWORK_MAP_REQUEST
	 * TO: 		NETWORK_SENSOR_CONFIGS
	 */
	this->_command_interpreter->usb_state_machine->move_state_forward();
     7ba:	ef 81       	ldd	r30, Y+7	; 0x07
     7bc:	f8 85       	ldd	r31, Y+8	; 0x08
     7be:	84 81       	ldd	r24, Z+4	; 0x04
     7c0:	95 81       	ldd	r25, Z+5	; 0x05
     7c2:	0e 94 83 04 	call	0x906	; 0x906 <_ZN17USB_STATE_MACHINE18move_state_forwardEv>
	 * user on the router, by selecting which sensor is enabled.
	 *
	 * 		5. get_user_enable_sensors();
	 * 			-> set_flags(byte sensor flags);
	 */
	this->_command_interpreter->send_cmd(USB_DEVICE_CMD, (void*)REQUEST_SENSOR_ENABLE);
     7c6:	8f 81       	ldd	r24, Y+7	; 0x07
     7c8:	98 85       	ldd	r25, Y+8	; 0x08
     7ca:	61 e3       	ldi	r22, 0x31	; 49
     7cc:	4c e0       	ldi	r20, 0x0C	; 12
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN14COMMAND_PARSER8send_cmdEhPv>
	 * Move the state machine to the network sensor configs.
	 *
	 * FROM:	NETWORK_SENSOR_CONFIGS
	 * TO: 		LOCAL_CONFIGURATION
	 */
	this->_command_interpreter->usb_state_machine->move_state_forward();
     7d4:	ef 81       	ldd	r30, Y+7	; 0x07
     7d6:	f8 85       	ldd	r31, Y+8	; 0x08
     7d8:	84 81       	ldd	r24, Z+4	; 0x04
     7da:	95 81       	ldd	r25, Z+5	; 0x05
     7dc:	0e 94 83 04 	call	0x906	; 0x906 <_ZN17USB_STATE_MACHINE18move_state_forwardEv>
     *			-> create_call_priority_table();
     *
     * *** NOTE: This is handled internally... No control signals are needed.
     * 			 Only checking memory space is valid.
	 */
	if(memory_check() <= MAX_MEMORY){
     7e0:	0e 94 95 05 	call	0xb2a	; 0xb2a <_Z12memory_checkv>
     7e4:	0b 97       	sbiw	r24, 0x0b	; 11
     7e6:	08 f4       	brcc	.+2      	; 0x7ea <_ZN10USB_DEVICE16_init_rf_networkEv+0xd2>
     7e8:	ff cf       	rjmp	.-2      	; 0x7e8 <_ZN10USB_DEVICE16_init_rf_networkEv+0xd0>
	 * Move the state machine to the network sensor configs.
	 *
	 * FROM:	LOCAL_CONFIGURATION
	 * TO: 		NETWORK_REQUEST_ROUTER_STATE_RUN
	 */
	this->_command_interpreter->usb_state_machine->move_state_forward();
     7ea:	ef 81       	ldd	r30, Y+7	; 0x07
     7ec:	f8 85       	ldd	r31, Y+8	; 0x08
     7ee:	84 81       	ldd	r24, Z+4	; 0x04
     7f0:	95 81       	ldd	r25, Z+5	; 0x05
     7f2:	0e 94 83 04 	call	0x906	; 0x906 <_ZN17USB_STATE_MACHINE18move_state_forwardEv>

	/**
	 * After this step is complete, we go into the loop that does all the
	 * usb work and processing.
	 */
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <_ZN10USB_DEVICE22_send_usb_report_frameEv>:
	_packet_buffer = (uint8_t* )_joystick_report;
#endif
}

//! Sends a USB report frame
void USB_DEVICE::_send_usb_report_frame(){
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	8c 01       	movw	r16, r24
#endif

#ifdef JOYSTICK_REPORT

	//! Send the structure.
	RF_SERIAL.write(_packet_buffer, sizeof(_joystick_report));
     802:	fc 01       	movw	r30, r24
     804:	60 81       	ld	r22, Z
     806:	71 81       	ldd	r23, Z+1	; 0x01
     808:	87 ed       	ldi	r24, 0xD7	; 215
     80a:	95 e0       	ldi	r25, 0x05	; 5
     80c:	42 e0       	ldi	r20, 0x02	; 2
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN5Print5writeEPKhj>
#endif

	_packet_in_sending_queue = false;
     814:	f8 01       	movw	r30, r16
     816:	15 82       	std	Z+5, r1	; 0x05
}
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <_ZN10USB_DEVICE7run_usbEv>:

	this->_command_interpreter = command_interpreter;
	this->_packet_parser = packet_parser;
}

void USB_DEVICE::run_usb(){
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	ec 01       	movw	r28, r24

	//! Sets up the rf network
	_init_rf_network();
     826:	0e 94 8c 03 	call	0x718	; 0x718 <_ZN10USB_DEVICE16_init_rf_networkEv>
		//! the idle rate.
		if ((TCNT1 > ((4 * (F_CPU / 1024000)) * idle_rate)
				|| TCNT1 > 0x7FFF) && idle_rate != 0) {

			//! Needs to send
			_sending_mutex = true;
     82a:	11 e0       	ldi	r17, 0x01	; 1

	for(;;){

		//! Check to see if a report needs to be sent, using
		//! the idle rate.
		if ((TCNT1 > ((4 * (F_CPU / 1024000)) * idle_rate)
     82c:	80 91 84 00 	lds	r24, 0x0084
     830:	90 91 85 00 	lds	r25, 0x0085
     834:	8d 54       	subi	r24, 0x4D	; 77
     836:	9d 41       	sbci	r25, 0x1D	; 29
     838:	30 f4       	brcc	.+12     	; 0x846 <_ZN10USB_DEVICE7run_usbEv+0x28>
     83a:	80 91 84 00 	lds	r24, 0x0084
     83e:	90 91 85 00 	lds	r25, 0x0085
     842:	97 ff       	sbrs	r25, 7
     844:	02 c0       	rjmp	.+4      	; 0x84a <_ZN10USB_DEVICE7run_usbEv+0x2c>
				|| TCNT1 > 0x7FFF) && idle_rate != 0) {

			//! Needs to send
			_sending_mutex = true;
     846:	1e 83       	std	Y+6, r17	; 0x06
     848:	49 c0       	rjmp	.+146    	; 0x8dc <_ZN10USB_DEVICE7run_usbEv+0xbe>
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
#endif

#ifdef JOYSTICK_REPORT

	for(register byte i = 0; i < NUM_AXES; i ++){
		_joystick_report->axis[i] = this->_packet_parser->_data.axis[i];
     84e:	6b 85       	ldd	r22, Y+11	; 0x0b
     850:	7c 85       	ldd	r23, Y+12	; 0x0c
     852:	f9 01       	movw	r30, r18
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	e6 0f       	add	r30, r22
     85a:	f7 1f       	adc	r31, r23
     85c:	49 85       	ldd	r20, Y+9	; 0x09
     85e:	5a 85       	ldd	r21, Y+10	; 0x0a
     860:	2f 5d       	subi	r18, 0xDF	; 223
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	d9 01       	movw	r26, r18
     866:	aa 0f       	add	r26, r26
     868:	bb 1f       	adc	r27, r27
     86a:	a4 0f       	add	r26, r20
     86c:	b5 1f       	adc	r27, r21
     86e:	8d 91       	ld	r24, X+
     870:	9c 91       	ld	r25, X
     872:	91 83       	std	Z+1, r25	; 0x01
     874:	80 83       	st	Z, r24
     876:	20 52       	subi	r18, 0x20	; 32
     878:	30 40       	sbci	r19, 0x00	; 0
	_packet_buffer = (uint8_t* )&mouse_report;
#endif

#ifdef JOYSTICK_REPORT

	for(register byte i = 0; i < NUM_AXES; i ++){
     87a:	28 30       	cpi	r18, 0x08	; 8
     87c:	31 05       	cpc	r19, r1
     87e:	39 f7       	brne	.-50     	; 0x84e <_ZN10USB_DEVICE7run_usbEv+0x30>
		_joystick_report->axis[i] = this->_packet_parser->_data.axis[i];
	}
	for(register byte i = 0; i < NUM_BUTTONS/8; i ++){
		_joystick_report->button[i] = this->_packet_parser->_data.button[i];
     880:	4e 5a       	subi	r20, 0xAE	; 174
     882:	5f 4f       	sbci	r21, 0xFF	; 255
     884:	fa 01       	movw	r30, r20
     886:	80 81       	ld	r24, Z
     888:	fb 01       	movw	r30, r22
     88a:	80 8b       	std	Z+16, r24	; 0x10
     88c:	ab 85       	ldd	r26, Y+11	; 0x0b
     88e:	bc 85       	ldd	r27, Y+12	; 0x0c
     890:	e9 85       	ldd	r30, Y+9	; 0x09
     892:	fa 85       	ldd	r31, Y+10	; 0x0a
     894:	ed 5a       	subi	r30, 0xAD	; 173
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	80 81       	ld	r24, Z
     89a:	51 96       	adiw	r26, 0x11	; 17
     89c:	8c 93       	st	X, r24
     89e:	ab 85       	ldd	r26, Y+11	; 0x0b
     8a0:	bc 85       	ldd	r27, Y+12	; 0x0c
     8a2:	e9 85       	ldd	r30, Y+9	; 0x09
     8a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     8a6:	ec 5a       	subi	r30, 0xAC	; 172
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	80 81       	ld	r24, Z
     8ac:	52 96       	adiw	r26, 0x12	; 18
     8ae:	8c 93       	st	X, r24
     8b0:	ab 85       	ldd	r26, Y+11	; 0x0b
     8b2:	bc 85       	ldd	r27, Y+12	; 0x0c
     8b4:	e9 85       	ldd	r30, Y+9	; 0x09
     8b6:	fa 85       	ldd	r31, Y+10	; 0x0a
     8b8:	eb 5a       	subi	r30, 0xAB	; 171
     8ba:	ff 4f       	sbci	r31, 0xFF	; 255
     8bc:	80 81       	ld	r24, Z
     8be:	53 96       	adiw	r26, 0x13	; 19
     8c0:	8c 93       	st	X, r24
     8c2:	ab 85       	ldd	r26, Y+11	; 0x0b
     8c4:	bc 85       	ldd	r27, Y+12	; 0x0c
     8c6:	e9 85       	ldd	r30, Y+9	; 0x09
     8c8:	fa 85       	ldd	r31, Y+10	; 0x0a
     8ca:	ea 5a       	subi	r30, 0xAA	; 170
     8cc:	ff 4f       	sbci	r31, 0xFF	; 255
     8ce:	80 81       	ld	r24, Z
     8d0:	54 96       	adiw	r26, 0x14	; 20
     8d2:	8c 93       	st	X, r24
	}

	//! Reassign the structure to send.
	_packet_buffer = (uint8_t* )_joystick_report;
     8d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d8:	99 83       	std	Y+1, r25	; 0x01
     8da:	88 83       	st	Y, r24
			//! Create a valid random USB Frame
			_create_usb_report_frame();
		}

		//! If we need to send.
		if(_sending_mutex){
     8dc:	8e 81       	ldd	r24, Y+6	; 0x06
     8de:	88 23       	and	r24, r24
     8e0:	39 f0       	breq	.+14     	; 0x8f0 <_ZN10USB_DEVICE7run_usbEv+0xd2>

			//! Send the report.
			//! and reset the timer.
			_send_usb_report_frame();
     8e2:	ce 01       	movw	r24, r28
     8e4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_ZN10USB_DEVICE22_send_usb_report_frameEv>
			TCNT1 = 0;
     8e8:	10 92 85 00 	sts	0x0085, r1
     8ec:	10 92 84 00 	sts	0x0084, r1
		}

		//! No need to send anymore.
		_sending_mutex = false;
     8f0:	1e 82       	std	Y+6, r1	; 0x06
     8f2:	9c cf       	rjmp	.-200    	; 0x82c <_ZN10USB_DEVICE7run_usbEv+0xe>

000008f4 <_ZN17USB_STATE_MACHINEC1Ev>:
 */

#include "USB_State_Machine.h"

//! Setup the state machine
USB_STATE_MACHINE::USB_STATE_MACHINE(){
     8f4:	fc 01       	movw	r30, r24

	reset_device = 0;
     8f6:	10 92 4f 02 	sts	0x024F, r1
     8fa:	10 92 4e 02 	sts	0x024E, r1
	current_state = LOCAL_DEVICE_SETUP;
	next_state = current_state ++;
     8fe:	11 82       	std	Z+1, r1	; 0x01
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 83       	st	Z, r24
}
     904:	08 95       	ret

00000906 <_ZN17USB_STATE_MACHINE18move_state_forwardEv>:
	next_state = current_state;
	current_state --;
}

//! Move forawards
void USB_STATE_MACHINE::move_state_forward(){
     906:	fc 01       	movw	r30, r24

	current_state = next_state;
     908:	81 81       	ldd	r24, Z+1	; 0x01
     90a:	80 83       	st	Z, r24
	next_state ++;
     90c:	8f 5f       	subi	r24, 0xFF	; 255
     90e:	81 83       	std	Z+1, r24	; 0x01
	if(next_state == 7){
     910:	87 30       	cpi	r24, 0x07	; 7
     912:	11 f4       	brne	.+4      	; 0x918 <_ZN17USB_STATE_MACHINE18move_state_forwardEv+0x12>
		next_state = LOCAL_RESET;
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	81 83       	std	Z+1, r24	; 0x01
     918:	08 95       	ret

0000091a <_ZN17USB_STATE_MACHINE27move_state_to_network_errorEh>:
	current_state = LOCAL_RESET;
	next_state = NULL;
}

//! Move to network error
void USB_STATE_MACHINE::move_state_to_network_error(byte previous_state){
     91a:	fc 01       	movw	r30, r24

	current_state = NETWORK_ERROR_MODE(previous_state);
     91c:	68 5d       	subi	r22, 0xD8	; 216
     91e:	60 83       	st	Z, r22
	next_state = NETWORK_RESET;
     920:	8e ef       	ldi	r24, 0xFE	; 254
     922:	81 83       	std	Z+1, r24	; 0x01
     924:	ff cf       	rjmp	.-2      	; 0x924 <_ZN17USB_STATE_MACHINE27move_state_to_network_errorEh+0xa>

00000926 <_ZN14COMMAND_PARSERC1EP5NVRAMP14PACKET_HANDLERP17USB_STATE_MACHINE>:

#include "Command_Interpreter.h"

//! Sets up our non volatile nvram object, our command db.
COMMAND_PARSER::COMMAND_PARSER(NVRAM* nvram_object, PACKET_HANDLER* packet_decoder,
		USB_STATE_MACHINE* usb_state_machine){
     926:	fc 01       	movw	r30, r24
	this->command_buffer = 0;
     928:	11 82       	std	Z+1, r1	; 0x01
     92a:	10 82       	st	Z, r1
	this->nvram_object = nvram_object;
     92c:	77 83       	std	Z+7, r23	; 0x07
     92e:	66 83       	std	Z+6, r22	; 0x06
	this->packet_decoder = packet_decoder;
     930:	53 83       	std	Z+3, r21	; 0x03
     932:	42 83       	std	Z+2, r20	; 0x02
	this->usb_state_machine = usb_state_machine;
     934:	35 83       	std	Z+5, r19	; 0x05
     936:	24 83       	std	Z+4, r18	; 0x04
}
     938:	08 95       	ret

0000093a <_ZN14COMMAND_PARSER11_send_checkEhPhi>:
	//! Process String
	_send_cmd(packet_id, buf);
}

//! Sends and checks a received message.
void COMMAND_PARSER::_send_check(byte receive_packet_id, byte* command, int len){
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ec 01       	movw	r28, r24
     942:	16 2f       	mov	r17, r22

	RF_SERIAL.write(command, sizeof(command));
     944:	87 ed       	ldi	r24, 0xD7	; 215
     946:	95 e0       	ldi	r25, 0x05	; 5
     948:	ba 01       	movw	r22, r20
     94a:	42 e0       	ldi	r20, 0x02	; 2
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN5Print5writeEPKhj>

	while(true){
		//! Gets a packet to the handler and parser.
		this->packet_decoder->poll();
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	9b 81       	ldd	r25, Y+3	; 0x03
     956:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN14PACKET_HANDLER4pollEv>

		//! Check to see the packet id
		if(packet_decoder->_packet_id == receive_packet_id)
     95a:	ea 81       	ldd	r30, Y+2	; 0x02
     95c:	fb 81       	ldd	r31, Y+3	; 0x03
     95e:	85 89       	ldd	r24, Z+21	; 0x15
     960:	81 17       	cp	r24, r17
     962:	c1 f0       	breq	.+48     	; 0x994 <_ZN14COMMAND_PARSER11_send_checkEhPhi+0x5a>
			return;

		//! If the packet is timed out.
		else if ((millis() - packet_decoder->_last_received) > PACKET_TIMEOUT)
     964:	0e 94 ad 10 	call	0x215a	; 0x215a <millis>
     968:	ea 81       	ldd	r30, Y+2	; 0x02
     96a:	fb 81       	ldd	r31, Y+3	; 0x03
     96c:	27 89       	ldd	r18, Z+23	; 0x17
     96e:	30 8d       	ldd	r19, Z+24	; 0x18
     970:	41 8d       	ldd	r20, Z+25	; 0x19
     972:	52 8d       	ldd	r21, Z+26	; 0x1a
     974:	62 1b       	sub	r22, r18
     976:	73 0b       	sbc	r23, r19
     978:	84 0b       	sbc	r24, r20
     97a:	95 0b       	sbc	r25, r21
     97c:	69 5e       	subi	r22, 0xE9	; 233
     97e:	73 40       	sbci	r23, 0x03	; 3
     980:	80 40       	sbci	r24, 0x00	; 0
     982:	90 40       	sbci	r25, 0x00	; 0
     984:	30 f0       	brcs	.+12     	; 0x992 <_ZN14COMMAND_PARSER11_send_checkEhPhi+0x58>
		#ifdef DEBUG_LEDs
			debug_api.set_leds(FATAL_ERROR);
		#endif
			usb_state_machine->move_state_to_network_error(usb_state_machine->current_state);
     986:	ec 81       	ldd	r30, Y+4	; 0x04
     988:	fd 81       	ldd	r31, Y+5	; 0x05
     98a:	cf 01       	movw	r24, r30
     98c:	60 81       	ld	r22, Z
     98e:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN17USB_STATE_MACHINE27move_state_to_network_errorEh>
     992:	ff cf       	rjmp	.-2      	; 0x992 <_ZN14COMMAND_PARSER11_send_checkEhPhi+0x58>
			error((void*)__LINE__, (void*)__func__);
	}
}
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	08 95       	ret

0000099c <_ZN14COMMAND_PARSER13_send_commandEPh>:
		_send_command((byte*)buffer[0]);
	}
}

//! Execute a command from a sensor or router
void COMMAND_PARSER::_send_command(byte* command){
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	ec 01       	movw	r28, r24
     9a2:	9b 01       	movw	r18, r22

	byte* command_send;
	switch(command[0]){
     9a4:	db 01       	movw	r26, r22
     9a6:	8c 91       	ld	r24, X
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	fc 01       	movw	r30, r24
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	e4 31       	cpi	r30, 0x14	; 20
     9b0:	f1 05       	cpc	r31, r1
     9b2:	08 f0       	brcs	.+2      	; 0x9b6 <_ZN14COMMAND_PARSER13_send_commandEPh+0x1a>
     9b4:	97 c0       	rjmp	.+302    	; 0xae4 <_ZN14COMMAND_PARSER13_send_commandEPh+0x148>
     9b6:	ee 58       	subi	r30, 0x8E	; 142
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ba:	ee 0f       	add	r30, r30
     9bc:	ff 1f       	adc	r31, r31
     9be:	05 90       	lpm	r0, Z+
     9c0:	f4 91       	lpm	r31, Z+
     9c2:	e0 2d       	mov	r30, r0
     9c4:	19 94       	eijmp

 // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case WAKEUP_ROUTER: 	// Wake up the router
			_send_check(ROUTER_ACK, (byte*)this->nvram_object->nv._wakeup_router,
					sizeof(this->nvram_object->nv._wakeup_router));
     9c6:	4e 81       	ldd	r20, Y+6	; 0x06
     9c8:	5f 81       	ldd	r21, Y+7	; 0x07
     9ca:	42 59       	subi	r20, 0x92	; 146
     9cc:	5f 4f       	sbci	r21, 0xFF	; 255
     9ce:	5c c0       	rjmp	.+184    	; 0xa88 <_ZN14COMMAND_PARSER13_send_commandEPh+0xec>
			break;

		case WAKEUP_SENSOR: 	// Wake up a sensor
			command_send = (byte*)this->nvram_object->nv._wakeup_sensor;
     9d0:	ee 81       	ldd	r30, Y+6	; 0x06
     9d2:	ff 81       	ldd	r31, Y+7	; 0x07
			command_send[5] = command[1];
     9d4:	e7 58       	subi	r30, 0x87	; 135
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	db 01       	movw	r26, r22
     9da:	11 96       	adiw	r26, 0x01	; 1
     9dc:	8c 91       	ld	r24, X
     9de:	80 83       	st	Z, r24
			_send_check(ROUTER_ACK, command_send, sizeof(this->nvram_object->nv._wakeup_sensor));
     9e0:	35 97       	sbiw	r30, 0x05	; 5
     9e2:	5c c0       	rjmp	.+184    	; 0xa9c <_ZN14COMMAND_PARSER13_send_commandEPh+0x100>

 // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case POWEROFF_ROUTER: 	// Power off router
			_send_check(ROUTER_HEARTBEAT, (byte*)this->nvram_object->nv._poweroff_router,
					sizeof(this->nvram_object->nv._poweroff_router));
     9e4:	4e 81       	ldd	r20, Y+6	; 0x06
     9e6:	5f 81       	ldd	r21, Y+7	; 0x07
     9e8:	4e 59       	subi	r20, 0x9E	; 158
     9ea:	5f 4f       	sbci	r21, 0xFF	; 255
     9ec:	09 c0       	rjmp	.+18     	; 0xa00 <_ZN14COMMAND_PARSER13_send_commandEPh+0x64>
			break;

		case POWEROFF_SENSOR: 	// Power off sensor
			command_send = (byte*)this->nvram_object->nv._poweroff_sensor;
     9ee:	ee 81       	ldd	r30, Y+6	; 0x06
     9f0:	ff 81       	ldd	r31, Y+7	; 0x07
			command_send[5] = command[1];
     9f2:	e3 59       	subi	r30, 0x93	; 147
     9f4:	ff 4f       	sbci	r31, 0xFF	; 255
     9f6:	0b c0       	rjmp	.+22     	; 0xa0e <_ZN14COMMAND_PARSER13_send_commandEPh+0x72>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case POWERON_ROUTER: 	// Power on router
			_send_check(ROUTER_HEARTBEAT, (byte*)this->nvram_object->nv._power_on_router,
					sizeof(this->nvram_object->nv._power_on_router));
     9f8:	4e 81       	ldd	r20, Y+6	; 0x06
     9fa:	5f 81       	ldd	r21, Y+7	; 0x07
     9fc:	4a 5a       	subi	r20, 0xAA	; 170
     9fe:	5f 4f       	sbci	r21, 0xFF	; 255
     a00:	ce 01       	movw	r24, r28
     a02:	62 e0       	ldi	r22, 0x02	; 2
     a04:	4e c0       	rjmp	.+156    	; 0xaa2 <_ZN14COMMAND_PARSER13_send_commandEPh+0x106>
			break;

		case POWERON_SENSOR: 	// Power on sensor
			command_send = (byte*)this->nvram_object->nv._power_on_sensor;
     a06:	ee 81       	ldd	r30, Y+6	; 0x06
     a08:	ff 81       	ldd	r31, Y+7	; 0x07
			command_send[5] = command[1];
     a0a:	ef 59       	subi	r30, 0x9F	; 159
     a0c:	ff 4f       	sbci	r31, 0xFF	; 255
     a0e:	d9 01       	movw	r26, r18
     a10:	11 96       	adiw	r26, 0x01	; 1
     a12:	8c 91       	ld	r24, X
     a14:	80 83       	st	Z, r24
			_send_check(ROUTER_HEARTBEAT, command_send, sizeof(this->nvram_object->nv._power_on_sensor));
     a16:	35 97       	sbiw	r30, 0x05	; 5
     a18:	ce 01       	movw	r24, r28
     a1a:	62 e0       	ldi	r22, 0x02	; 2
     a1c:	41 c0       	rjmp	.+130    	; 0xaa0 <_ZN14COMMAND_PARSER13_send_commandEPh+0x104>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case PAUSE_ROUTER: 	// Pause router
			_send_check(ROUTER_ACK, (byte*)this->nvram_object->nv._pause_router,
					sizeof(this->nvram_object->nv._pause_router));
     a1e:	4e 81       	ldd	r20, Y+6	; 0x06
     a20:	5f 81       	ldd	r21, Y+7	; 0x07
     a22:	41 5b       	subi	r20, 0xB1	; 177
     a24:	5f 4f       	sbci	r21, 0xFF	; 255
     a26:	ce 01       	movw	r24, r28
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	58 c0       	rjmp	.+176    	; 0xadc <_ZN14COMMAND_PARSER13_send_commandEPh+0x140>
			break;

		case PAUSE_SENSOR: 	// Pause sensor
			command_send = (byte*)this->nvram_object->nv._pause_sensor;
     a2c:	ee 81       	ldd	r30, Y+6	; 0x06
     a2e:	ff 81       	ldd	r31, Y+7	; 0x07
			command_send[6] = command[1];
     a30:	e2 5b       	subi	r30, 0xB2	; 178
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	db 01       	movw	r26, r22
     a36:	11 96       	adiw	r26, 0x01	; 1
     a38:	8c 91       	ld	r24, X
     a3a:	80 83       	st	Z, r24
			_send_check(ROUTER_ACK, command_send, sizeof(this->nvram_object->nv._pause_sensor));
     a3c:	36 97       	sbiw	r30, 0x06	; 6
     a3e:	ce 01       	movw	r24, r28
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	4b c0       	rjmp	.+150    	; 0xada <_ZN14COMMAND_PARSER13_send_commandEPh+0x13e>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case REQUEST_ROUTER_STATUS: 	// Router status
			_send_check(ROUTER_STATUS, (byte*)this->nvram_object->nv._request_router_status,
					sizeof(this->nvram_object->nv._request_router_status));
     a44:	4e 81       	ldd	r20, Y+6	; 0x06
     a46:	5f 81       	ldd	r21, Y+7	; 0x07
     a48:	4e 5b       	subi	r20, 0xBE	; 190
     a4a:	5f 4f       	sbci	r21, 0xFF	; 255
     a4c:	ce 01       	movw	r24, r28
     a4e:	63 e0       	ldi	r22, 0x03	; 3
     a50:	28 c0       	rjmp	.+80     	; 0xaa2 <_ZN14COMMAND_PARSER13_send_commandEPh+0x106>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case REQUEST_SENSOR_ENABLE: 	// Request sensor enable
			_send_check(SENSOR_ENABLE, (byte*)this->nvram_object->nv._request_sensor_enable,
					sizeof(this->nvram_object->nv._request_sensor_enable));
     a52:	4e 81       	ldd	r20, Y+6	; 0x06
     a54:	5f 81       	ldd	r21, Y+7	; 0x07
     a56:	4f 5c       	subi	r20, 0xCF	; 207
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	ce 01       	movw	r24, r28
     a5c:	66 e0       	ldi	r22, 0x06	; 6
     a5e:	3e c0       	rjmp	.+124    	; 0xadc <_ZN14COMMAND_PARSER13_send_commandEPh+0x140>
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case REQUEST_SENSOR_CHANNEL:	// Request sensor channel info
		case REQUEST_SENSOR_CONFIG:	// Request sensor config
			_send_check(SENSOR_CONFIGS, (byte*)this->nvram_object->nv._request_sensor_config,
					sizeof(this->nvram_object->nv._request_sensor_config));
     a60:	4e 81       	ldd	r20, Y+6	; 0x06
     a62:	5f 81       	ldd	r21, Y+7	; 0x07
     a64:	46 5d       	subi	r20, 0xD6	; 214
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	ce 01       	movw	r24, r28
     a6a:	67 e0       	ldi	r22, 0x07	; 7
     a6c:	37 c0       	rjmp	.+110    	; 0xadc <_ZN14COMMAND_PARSER13_send_commandEPh+0x140>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case REQUEST_ROUTER_RUN: 	// Request router run
			_send_check(ROUTER_ACK, (byte*)this->nvram_object->nv._request_router_run,
					sizeof(this->nvram_object->nv._request_router_run));
     a6e:	4e 81       	ldd	r20, Y+6	; 0x06
     a70:	5f 81       	ldd	r21, Y+7	; 0x07
     a72:	40 5e       	subi	r20, 0xE0	; 224
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	ce 01       	movw	r24, r28
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	23 e0       	ldi	r18, 0x03	; 3
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	30 c0       	rjmp	.+96     	; 0xae0 <_ZN14COMMAND_PARSER13_send_commandEPh+0x144>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case PING_ROUTER: 	// Ping Router
			_send_check(ROUTER_ACK, (byte*)this->nvram_object->nv._ping_router,
					sizeof(this->nvram_object->nv._ping_router));
     a80:	4e 81       	ldd	r20, Y+6	; 0x06
     a82:	5f 81       	ldd	r21, Y+7	; 0x07
     a84:	4c 5e       	subi	r20, 0xEC	; 236
     a86:	5f 4f       	sbci	r21, 0xFF	; 255
     a88:	ce 01       	movw	r24, r28
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	0a c0       	rjmp	.+20     	; 0xaa2 <_ZN14COMMAND_PARSER13_send_commandEPh+0x106>
			return;

		case PING_SENSOR: 	// Ping sensor
			command_send = (byte*)this->nvram_object->nv._ping_sensor;
     a8e:	ee 81       	ldd	r30, Y+6	; 0x06
     a90:	ff 81       	ldd	r31, Y+7	; 0x07
     a92:	7a 96       	adiw	r30, 0x1a	; 26
			command_send[6] = command[1];
     a94:	db 01       	movw	r26, r22
     a96:	11 96       	adiw	r26, 0x01	; 1
     a98:	8c 91       	ld	r24, X
     a9a:	86 83       	std	Z+6, r24	; 0x06
			_send_check(ROUTER_ACK, command_send, sizeof(this->nvram_object->nv._ping_sensor));
     a9c:	ce 01       	movw	r24, r28
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	af 01       	movw	r20, r30
     aa2:	26 e0       	ldi	r18, 0x06	; 6
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	1c c0       	rjmp	.+56     	; 0xae0 <_ZN14COMMAND_PARSER13_send_commandEPh+0x144>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case REQUEST_ROUTER_CONFIG:
			_send_check(ROUTER_CONFIG, (byte*)this->nvram_object->nv._request_router_config,
					sizeof(this->nvram_object->nv._request_router_config));
     aa8:	4e 81       	ldd	r20, Y+6	; 0x06
     aaa:	5f 81       	ldd	r21, Y+7	; 0x07
     aac:	4d 5d       	subi	r20, 0xDD	; 221
     aae:	5f 4f       	sbci	r21, 0xFF	; 255
     ab0:	ce 01       	movw	r24, r28
     ab2:	65 e0       	ldi	r22, 0x05	; 5
     ab4:	13 c0       	rjmp	.+38     	; 0xadc <_ZN14COMMAND_PARSER13_send_commandEPh+0x140>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case REQUEST_NUMBER_SENSORS:
			_send_check(SENSOR_NUMBER, (byte*)this->nvram_object->nv._request_sensor_number,
					sizeof(this->nvram_object->nv._request_sensor_number));
     ab6:	4e 81       	ldd	r20, Y+6	; 0x06
     ab8:	5f 81       	ldd	r21, Y+7	; 0x07
     aba:	46 58       	subi	r20, 0x86	; 134
     abc:	5f 4f       	sbci	r21, 0xFF	; 255
     abe:	ce 01       	movw	r24, r28
     ac0:	69 e0       	ldi	r22, 0x09	; 9
     ac2:	0c c0       	rjmp	.+24     	; 0xadc <_ZN14COMMAND_PARSER13_send_commandEPh+0x140>
			break;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		case REQUEST_NUMBER_CHANNELS:
			command_send = (byte*)this->nvram_object->nv._request_sensor_channels;
     ac4:	ee 81       	ldd	r30, Y+6	; 0x06
     ac6:	ff 81       	ldd	r31, Y+7	; 0x07
			command_send[6] = command[1];
     ac8:	e9 57       	subi	r30, 0x79	; 121
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	db 01       	movw	r26, r22
     ace:	11 96       	adiw	r26, 0x01	; 1
     ad0:	8c 91       	ld	r24, X
     ad2:	80 83       	st	Z, r24
			_send_check(SENSOR_CHANNELS, command_send, sizeof(this->nvram_object->nv._request_sensor_channels));
     ad4:	36 97       	sbiw	r30, 0x06	; 6
     ad6:	ce 01       	movw	r24, r28
     ad8:	6a e0       	ldi	r22, 0x0A	; 10
     ada:	af 01       	movw	r20, r30
     adc:	27 e0       	ldi	r18, 0x07	; 7
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	0e 94 9d 04 	call	0x93a	; 0x93a <_ZN14COMMAND_PARSER11_send_checkEhPhi>

		default:	// Other commands don't exist
			command_send = 0;
			break;
	}
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <_ZN14COMMAND_PARSER9_send_cmdEhPv>:

/**
 * buf. definition: [Target Address][Command Predicate][Arg 1][Arg 2]
 */
//! Sends a command
void COMMAND_PARSER::_send_cmd(byte packet_id, void *buf){
     aea:	fa 01       	movw	r30, r20

	char* buffer = (char*) buf;

	if(packet_id == USB_DEVICE_CMD){
     aec:	61 33       	cpi	r22, 0x31	; 49
     aee:	31 f4       	brne	.+12     	; 0xafc <_ZN14COMMAND_PARSER9_send_cmdEhPv+0x12>

		//! Construct a command
		_send_command((byte*)buffer[0]);
     af0:	60 81       	ld	r22, Z
     af2:	77 27       	eor	r23, r23
     af4:	67 fd       	sbrc	r22, 7
     af6:	70 95       	com	r23
     af8:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN14COMMAND_PARSER13_send_commandEPh>
     afc:	08 95       	ret

00000afe <_ZN14COMMAND_PARSER8send_cmdEhPv>:

//! The public send command method
void COMMAND_PARSER::send_cmd(byte packet_id, void *buf){

	//! Process String
	_send_cmd(packet_id, buf);
     afe:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN14COMMAND_PARSER9_send_cmdEhPv>
}
     b02:	08 95       	ret

00000b04 <_ZN11EEPROMClass4readEi>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b04:	f9 99       	sbic	0x1f, 1	; 31
     b06:	fe cf       	rjmp	.-4      	; 0xb04 <_ZN11EEPROMClass4readEi>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b08:	72 bd       	out	0x22, r23	; 34
     b0a:	61 bd       	out	0x21, r22	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b0c:	f8 9a       	sbi	0x1f, 0	; 31
     b0e:	80 b5       	in	r24, 0x20	; 32
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}
     b10:	08 95       	ret

00000b12 <_ZN11EEPROMClass5writeEih>:
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     b12:	f9 99       	sbic	0x1f, 1	; 31
     b14:	fe cf       	rjmp	.-4      	; 0xb12 <_ZN11EEPROMClass5writeEih>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     b16:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     b18:	72 bd       	out	0x22, r23	; 34
     b1a:	61 bd       	out	0x21, r22	; 33
#endif
    EEDR = __value;
     b1c:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	fa 9a       	sbi	0x1f, 2	; 31
     b24:	f9 9a       	sbi	0x1f, 1	; 31
     b26:	0f be       	out	0x3f, r0	; 63

void EEPROMClass::write(int address, uint8_t value)
{
	eeprom_write_byte((unsigned char *) address, value);
}
     b28:	08 95       	ret

00000b2a <_Z12memory_checkv>:

	/**
	 * This does a memory check of the whole system, and checks
	 * to see how much free mem there is.
	 */
	word memory_check(){
     b2a:	df 93       	push	r29
     b2c:	cf 93       	push	r28
     b2e:	0f 92       	push	r0
     b30:	0f 92       	push	r0
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	9e 01       	movw	r18, r28
     b38:	21 53       	subi	r18, 0x31	; 49
     b3a:	36 40       	sbci	r19, 0x06	; 6
		word freemem;
		freemem = ((word)&freemem) - ((word)&__bss_end);
		return freemem;
	}
     b3c:	c9 01       	movw	r24, r18
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <_ZN5NVRAM6_savexEhhPv>:
        while (size--)
                *rp++ = EEPROM.read(address++);
}

//! Save bytes
void NVRAM::_savex(uint8_t address, uint8_t size, void *value){
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	06 2f       	mov	r16, r22
     b52:	14 2f       	mov	r17, r20
        uint8_t         *rp;

        rp = (uint8_t *)value;
     b54:	e9 01       	movw	r28, r18
     b56:	09 c0       	rjmp	.+18     	; 0xb6a <_ZN5NVRAM6_savexEhhPv+0x22>
        while (size--)
        	EEPROM.write(address++, *rp++);
     b58:	60 2f       	mov	r22, r16
     b5a:	0f 5f       	subi	r16, 0xFF	; 255
     b5c:	49 91       	ld	r20, Y+
     b5e:	80 e5       	ldi	r24, 0x50	; 80
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	0e 94 89 05 	call	0xb12	; 0xb12 <_ZN11EEPROMClass5writeEih>
     b68:	11 50       	subi	r17, 0x01	; 1
//! Save bytes
void NVRAM::_savex(uint8_t address, uint8_t size, void *value){
        uint8_t         *rp;

        rp = (uint8_t *)value;
        while (size--)
     b6a:	11 23       	and	r17, r17
     b6c:	a9 f7       	brne	.-22     	; 0xb58 <_ZN5NVRAM6_savexEhhPv+0x10>
        	EEPROM.write(address++, *rp++);
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	08 95       	ret

00000b78 <_ZN5NVRAM5savexEhhPv>:

// Saves @ the specific address
void NVRAM::savex(byte address, byte size, void* value){
	_savex(address, size, value);
     b78:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN5NVRAM6_savexEhhPv>
}
     b7c:	08 95       	ret

00000b7e <_ZN5NVRAM6_loadxEhhPv>:
        EEPROM.write(0, 'f');
        EEPROM.write(1, 's');
}

//! Load bytes
void NVRAM::_loadx(uint8_t address, uint8_t size, void *value){
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	06 2f       	mov	r16, r22
     b88:	14 2f       	mov	r17, r20
        uint8_t         *rp;

        rp = (uint8_t *)value;
     b8a:	e9 01       	movw	r28, r18
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <_ZN5NVRAM6_loadxEhhPv+0x22>
        while (size--)
                *rp++ = EEPROM.read(address++);
     b8e:	60 2f       	mov	r22, r16
     b90:	0f 5f       	subi	r16, 0xFF	; 255
     b92:	80 e5       	ldi	r24, 0x50	; 80
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN11EEPROMClass4readEi>
     b9c:	89 93       	st	Y+, r24
     b9e:	11 50       	subi	r17, 0x01	; 1
//! Load bytes
void NVRAM::_loadx(uint8_t address, uint8_t size, void *value){
        uint8_t         *rp;

        rp = (uint8_t *)value;
        while (size--)
     ba0:	11 23       	and	r17, r17
     ba2:	a9 f7       	brne	.-22     	; 0xb8e <_ZN5NVRAM6_loadxEhhPv+0x10>
                *rp++ = EEPROM.read(address++);
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	08 95       	ret

00000bae <_ZN5NVRAM4loadEv>:
        {'s', 'e', 'n', 's', 'n', 'u', 'm'},
        {'s', 'e', 'n', 'c', 'h', 'n', SPACE}
};

//! Load the saved args.
void NVRAM::load(void){
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	ec 01       	movw	r28, r24
        // check for signature
        if (('f' != EEPROM.read(0)) ||
     bb4:	80 e5       	ldi	r24, 0x50	; 80
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN11EEPROMClass4readEi>
     bc0:	86 36       	cpi	r24, 0x66	; 102
     bc2:	41 f4       	brne	.+16     	; 0xbd4 <_ZN5NVRAM4loadEv+0x26>
     bc4:	80 e5       	ldi	r24, 0x50	; 80
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN11EEPROMClass4readEi>
     bd0:	83 37       	cpi	r24, 0x73	; 115
     bd2:	41 f0       	breq	.+16     	; 0xbe4 <_ZN5NVRAM4loadEv+0x36>
            ('s' != EEPROM.read(1))) {
                // load defaults
                memcpy_P(&nv, (void*)&nvram_default, sizeof(nv));
     bd4:	ce 01       	movw	r24, r28
     bd6:	6c e0       	ldi	r22, 0x0C	; 12
     bd8:	71 e0       	ldi	r23, 0x01	; 1
     bda:	48 e8       	ldi	r20, 0x88	; 136
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	0e 94 63 03 	call	0x6c6	; 0x6c6 <memcpy_P>
     be2:	06 c0       	rjmp	.+12     	; 0xbf0 <_ZN5NVRAM4loadEv+0x42>
        } else {
                // load from NVRAM
                _loadx(2, sizeof(nv), &nv);
     be4:	ce 01       	movw	r24, r28
     be6:	62 e0       	ldi	r22, 0x02	; 2
     be8:	48 e8       	ldi	r20, 0x88	; 136
     bea:	9e 01       	movw	r18, r28
     bec:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN5NVRAM6_loadxEhhPv>
        }
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <_ZN8WATCHDOG6_resetEv>:
                }
        }
}

//! Reset the watchog timer.
void WATCHDOG::_reset(void){
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	ec 01       	movw	r28, r24
        //! Kill the alarm if it's going and swap the bug character back
        if (0 != _last_alarm) {
     bfc:	8c 81       	ldd	r24, Y+4	; 0x04
     bfe:	9d 81       	ldd	r25, Y+5	; 0x05
     c00:	ae 81       	ldd	r26, Y+6	; 0x06
     c02:	bf 81       	ldd	r27, Y+7	; 0x07
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	a1 05       	cpc	r26, r1
     c08:	b1 05       	cpc	r27, r1
     c0a:	21 f0       	breq	.+8      	; 0xc14 <_ZN8WATCHDOG6_resetEv+0x1e>
                _last_alarm = 0;
     c0c:	1c 82       	std	Y+4, r1	; 0x04
     c0e:	1d 82       	std	Y+5, r1	; 0x05
     c10:	1e 82       	std	Y+6, r1	; 0x06
     c12:	1f 82       	std	Y+7, r1	; 0x07
        }

        //! Remember when we saw this packet
        _last_time_stamp = millis();
     c14:	0e 94 ad 10 	call	0x215a	; 0x215a <millis>
     c18:	68 83       	st	Y, r22
     c1a:	79 83       	std	Y+1, r23	; 0x01
     c1c:	8a 83       	std	Y+2, r24	; 0x02
     c1e:	9b 83       	std	Y+3, r25	; 0x03
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <_ZN8WATCHDOG5resetEPvhhS0_>:

#include "Packet_Watchdog.h"

//! Reset the timer, accessible publicly.
void WATCHDOG::reset(void *arg, uint8_t packet_id, uint8_t pakcet_ver, void *packet_data) {
        ((WATCHDOG *)arg)->_reset();
     c26:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_ZN8WATCHDOG6_resetEv>
}
     c2a:	08 95       	ret

00000c2c <_ZN14PACKET_HANDLERC1EPv>:
/**
 * This is the packet decoder, over written with a past handler_table
 * structure.
 * @param handler_table - packet_handler_t
 */
PACKET_HANDLER::PACKET_HANDLER(void* handler_table){
     c2c:	fc 01       	movw	r30, r24

	//! Assign the default variables.
	this->_phase 			= PACKET_WAIT_PHASE_1;
     c2e:	10 82       	st	Z, r1
	this->_handler_table 	= (packet_handler_t*) handler_table;
     c30:	77 83       	std	Z+7, r23	; 0x07
     c32:	66 83       	std	Z+6, r22	; 0x06

	//! Set to 0
	this->_data_expected 	= 0;
     c34:	12 82       	std	Z+2, r1	; 0x02
	this->_data_in 			= 0;
     c36:	11 82       	std	Z+1, r1	; 0x01
	this->_last_received 	= 0;
     c38:	17 8a       	std	Z+23, r1	; 0x17
     c3a:	10 8e       	std	Z+24, r1	; 0x18
     c3c:	11 8e       	std	Z+25, r1	; 0x19
     c3e:	12 8e       	std	Z+26, r1	; 0x1a
	this->_packet_id 		= 0;
     c40:	15 8a       	std	Z+21, r1	; 0x15
	this->_packet_ver 		= 0;
     c42:	15 82       	std	Z+5, r1	; 0x05
	this->_sum_A			= 0;
     c44:	13 82       	std	Z+3, r1	; 0x03
	this->_sum_B 			= 0;
     c46:	14 82       	std	Z+4, r1	; 0x04
	this->_guard_bool		= false;
     c48:	16 8a       	std	Z+22, r1	; 0x16
}
     c4a:	08 95       	ret

00000c4c <_ZN14PACKET_HANDLER11_move_stateEh>:

/**
 * Move the state machine based on the input char.
 * @param data_byte - byte
 */
void PACKET_HANDLER::_move_state(byte data_byte){
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24

	byte table_index;

	switch(_phase){
     c5a:	28 81       	ld	r18, Y
     c5c:	22 30       	cpi	r18, 0x02	; 2
     c5e:	09 f1       	breq	.+66     	; 0xca2 <_ZN14PACKET_HANDLER11_move_stateEh+0x56>
     c60:	23 30       	cpi	r18, 0x03	; 3
     c62:	30 f4       	brcc	.+12     	; 0xc70 <_ZN14PACKET_HANDLER11_move_stateEh+0x24>
     c64:	22 23       	and	r18, r18
     c66:	c1 f0       	breq	.+48     	; 0xc98 <_ZN14PACKET_HANDLER11_move_stateEh+0x4c>
     c68:	21 30       	cpi	r18, 0x01	; 1
     c6a:	09 f0       	breq	.+2      	; 0xc6e <_ZN14PACKET_HANDLER11_move_stateEh+0x22>
     c6c:	79 c0       	rjmp	.+242    	; 0xd60 <_ZN14PACKET_HANDLER11_move_stateEh+0x114>
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <_ZN14PACKET_HANDLER11_move_stateEh+0x36>
     c70:	24 30       	cpi	r18, 0x04	; 4
     c72:	09 f4       	brne	.+2      	; 0xc76 <_ZN14PACKET_HANDLER11_move_stateEh+0x2a>
     c74:	47 c0       	rjmp	.+142    	; 0xd04 <_ZN14PACKET_HANDLER11_move_stateEh+0xb8>
     c76:	24 30       	cpi	r18, 0x04	; 4
     c78:	90 f1       	brcs	.+100    	; 0xcde <_ZN14PACKET_HANDLER11_move_stateEh+0x92>
     c7a:	25 30       	cpi	r18, 0x05	; 5
     c7c:	09 f0       	breq	.+2      	; 0xc80 <_ZN14PACKET_HANDLER11_move_stateEh+0x34>
     c7e:	70 c0       	rjmp	.+224    	; 0xd60 <_ZN14PACKET_HANDLER11_move_stateEh+0x114>
     c80:	47 c0       	rjmp	.+142    	; 0xd10 <_ZN14PACKET_HANDLER11_move_stateEh+0xc4>
    //!
    //! Note the fallthrough from P2 to P1 deals with the case where
    //! we see 0x34, 0x34, 0x44 where the first 0x34 is garbage or
    //! a SUM_B byte we never looked at.
	case PACKET_WAIT_PHASE_2:
		if ('+' == data_byte) {
     c82:	6b 32       	cpi	r22, 0x2B	; 43
     c84:	09 f0       	breq	.+2      	; 0xc88 <_ZN14PACKET_HANDLER11_move_stateEh+0x3c>
     c86:	6b c0       	rjmp	.+214    	; 0xd5e <_ZN14PACKET_HANDLER11_move_stateEh+0x112>
            _phase++;
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	88 83       	st	Y, r24

            //! prepare for the header
            _data_in = 0;
     c8c:	19 82       	std	Y+1, r1	; 0x01
            _data_expected = sizeof(struct packet_header_t);
     c8e:	8d e0       	ldi	r24, 0x0D	; 13
     c90:	8a 83       	std	Y+2, r24	; 0x02

            //! intialise the checksum accumulators
            _sum_A = _sum_B = 0;
     c92:	1c 82       	std	Y+4, r1	; 0x04
     c94:	1b 82       	std	Y+3, r1	; 0x03
     c96:	64 c0       	rjmp	.+200    	; 0xd60 <_ZN14PACKET_HANDLER11_move_stateEh+0x114>
		}
		_phase = PACKET_WAIT_PHASE_1;

    //! FALLTHROUGH
	case PACKET_WAIT_PHASE_1:
		if ('+' == data_byte) {
     c98:	6b 32       	cpi	r22, 0x2B	; 43
     c9a:	09 f0       	breq	.+2      	; 0xc9e <_ZN14PACKET_HANDLER11_move_stateEh+0x52>
     c9c:	61 c0       	rjmp	.+194    	; 0xd60 <_ZN14PACKET_HANDLER11_move_stateEh+0x114>
            _phase++;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	35 c0       	rjmp	.+106    	; 0xd0c <_ZN14PACKET_HANDLER11_move_stateEh+0xc0>
		break;

    //! receiving the header
	case PACKET_WAIT_HEADER:
		//! do checksum accumulation
		_sum_A += data_byte;
     ca2:	9b 81       	ldd	r25, Y+3	; 0x03
     ca4:	96 0f       	add	r25, r22
     ca6:	9b 83       	std	Y+3, r25	; 0x03
		_sum_B += _sum_A;
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	89 0f       	add	r24, r25
     cac:	8c 83       	std	Y+4, r24	; 0x04

		//! store the byte
		_buf.bytes[_data_in++] = data_byte;
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	fe 01       	movw	r30, r28
     cb2:	e8 0f       	add	r30, r24
     cb4:	f1 1d       	adc	r31, r1
     cb6:	60 87       	std	Z+8, r22	; 0x08
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	89 83       	std	Y+1, r24	; 0x01

		//! check for complete header received
		if (_data_in == _data_expected) {
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	89 17       	cp	r24, r25
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <_ZN14PACKET_HANDLER11_move_stateEh+0x78>
     cc2:	4e c0       	rjmp	.+156    	; 0xd60 <_ZN14PACKET_HANDLER11_move_stateEh+0x114>
            _phase++;
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	88 83       	st	Y, r24

            //! prepare for the payload
            //! variable-length data?
            _data_in = 0;
     cc8:	19 82       	std	Y+1, r1	; 0x01
            _data_expected = _buf.header.message_size;
     cca:	98 85       	ldd	r25, Y+8	; 0x08
     ccc:	9a 83       	std	Y+2, r25	; 0x02
            _packet_id = _buf.header.packet_id;
     cce:	89 85       	ldd	r24, Y+9	; 0x09
     cd0:	8d 8b       	std	Y+21, r24	; 0x15
            _packet_ver = _buf.header.packet_version;
     cd2:	8c 89       	ldd	r24, Y+20	; 0x14
     cd4:	8d 83       	std	Y+5, r24	; 0x05

            //! sanity check to avoid buffer overflow - revert back to waiting
            if (_data_expected > sizeof(_buf))
     cd6:	9e 30       	cpi	r25, 0x0E	; 14
     cd8:	08 f4       	brcc	.+2      	; 0xcdc <_ZN14PACKET_HANDLER11_move_stateEh+0x90>
     cda:	42 c0       	rjmp	.+132    	; 0xd60 <_ZN14PACKET_HANDLER11_move_stateEh+0x114>
     cdc:	40 c0       	rjmp	.+128    	; 0xd5e <_ZN14PACKET_HANDLER11_move_stateEh+0x112>
		break;

    //! receiving payload data
	case PACKET_WAIT_PACKET:
		//! do checksum accumulation
		_sum_A += data_byte;
     cde:	9b 81       	ldd	r25, Y+3	; 0x03
     ce0:	96 0f       	add	r25, r22
     ce2:	9b 83       	std	Y+3, r25	; 0x03
		_sum_B += _sum_A;
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	89 0f       	add	r24, r25
     ce8:	8c 83       	std	Y+4, r24	; 0x04

		//! store the byte
		_buf.bytes[_data_in++] = data_byte;
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	fe 01       	movw	r30, r28
     cee:	e8 0f       	add	r30, r24
     cf0:	f1 1d       	adc	r31, r1
     cf2:	60 87       	std	Z+8, r22	; 0x08
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	89 83       	std	Y+1, r24	; 0x01

		//! check for complete payload received
		if (_data_in == _data_expected) {
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	89 17       	cp	r24, r25
     cfc:	89 f5       	brne	.+98     	; 0xd60 <_ZN14PACKET_HANDLER11_move_stateEh+0x114>
            _phase++;
     cfe:	2f 5f       	subi	r18, 0xFF	; 255
     d00:	28 83       	st	Y, r18
     d02:	2e c0       	rjmp	.+92     	; 0xd60 <_ZN14PACKET_HANDLER11_move_stateEh+0x114>
		}
		break;

	//! waiting for the checksum bytes
	case PACKET_WAIT_SUM_A:
		if (data_byte != _sum_A) {
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	68 17       	cp	r22, r24
     d08:	51 f5       	brne	.+84     	; 0xd5e <_ZN14PACKET_HANDLER11_move_stateEh+0x112>
            _phase = PACKET_WAIT_PHASE_1;
		} else {
            _phase++;
     d0a:	85 e0       	ldi	r24, 0x05	; 5
     d0c:	88 83       	st	Y, r24
     d0e:	28 c0       	rjmp	.+80     	; 0xd60 <_ZN14PACKET_HANDLER11_move_stateEh+0x114>
		}
		break;
	case PACEKT_WAIT_SUM_B:
		if (data_byte == _sum_B) {
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	68 17       	cp	r22, r24
     d14:	21 f5       	brne	.+72     	; 0xd5e <_ZN14PACKET_HANDLER11_move_stateEh+0x112>

            // !call any handler interested in this message
            for (table_index = 0; 0xff != _handler_table[table_index].packet_id; table_index++)
                    if ((_handler_table[table_index].packet_id == PACKET_ANY) ||
                        (_handler_table[table_index].packet_id == _packet_id))
                            _handler_table[table_index].handler(_handler_table[table_index].args, _packet_id, _packet_ver, &_buf);
     d16:	88 e0       	ldi	r24, 0x08	; 8
     d18:	e8 2e       	mov	r14, r24
     d1a:	f1 2c       	mov	r15, r1
     d1c:	ec 0e       	add	r14, r28
     d1e:	fd 1e       	adc	r15, r29
     d20:	10 e0       	ldi	r17, 0x00	; 0
            /**
             * TOGGLE LEDS
             */

            // !call any handler interested in this message
            for (table_index = 0; 0xff != _handler_table[table_index].packet_id; table_index++)
     d22:	05 e0       	ldi	r16, 0x05	; 5
     d24:	12 c0       	rjmp	.+36     	; 0xd4a <_ZN14PACKET_HANDLER11_move_stateEh+0xfe>
                    if ((_handler_table[table_index].packet_id == PACKET_ANY) ||
     d26:	9e 3f       	cpi	r25, 0xFE	; 254
     d28:	19 f0       	breq	.+6      	; 0xd30 <_ZN14PACKET_HANDLER11_move_stateEh+0xe4>
     d2a:	8d 89       	ldd	r24, Y+21	; 0x15
     d2c:	98 17       	cp	r25, r24
     d2e:	61 f4       	brne	.+24     	; 0xd48 <_ZN14PACKET_HANDLER11_move_stateEh+0xfc>
                        (_handler_table[table_index].packet_id == _packet_id))
                            _handler_table[table_index].handler(_handler_table[table_index].args, _packet_id, _packet_ver, &_buf);
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	ed 91       	ld	r30, X+
     d34:	fc 91       	ld	r31, X
     d36:	12 97       	sbiw	r26, 0x02	; 2
     d38:	13 96       	adiw	r26, 0x03	; 3
     d3a:	8d 91       	ld	r24, X+
     d3c:	9c 91       	ld	r25, X
     d3e:	14 97       	sbiw	r26, 0x04	; 4
     d40:	6d 89       	ldd	r22, Y+21	; 0x15
     d42:	4d 81       	ldd	r20, Y+5	; 0x05
     d44:	97 01       	movw	r18, r14
     d46:	19 95       	eicall
            /**
             * TOGGLE LEDS
             */

            // !call any handler interested in this message
            for (table_index = 0; 0xff != _handler_table[table_index].packet_id; table_index++)
     d48:	1f 5f       	subi	r17, 0xFF	; 255
     d4a:	10 9f       	mul	r17, r16
     d4c:	c0 01       	movw	r24, r0
     d4e:	11 24       	eor	r1, r1
     d50:	ae 81       	ldd	r26, Y+6	; 0x06
     d52:	bf 81       	ldd	r27, Y+7	; 0x07
     d54:	a8 0f       	add	r26, r24
     d56:	b9 1f       	adc	r27, r25
     d58:	9c 91       	ld	r25, X
     d5a:	9f 3f       	cpi	r25, 0xFF	; 255
     d5c:	21 f7       	brne	.-56     	; 0xd26 <_ZN14PACKET_HANDLER11_move_stateEh+0xda>
                    if ((_handler_table[table_index].packet_id == PACKET_ANY) ||
                        (_handler_table[table_index].packet_id == _packet_id))
                            _handler_table[table_index].handler(_handler_table[table_index].args, _packet_id, _packet_ver, &_buf);
		} else {}

		_phase = PACKET_WAIT_PHASE_1;
     d5e:	18 82       	st	Y, r1
		break;
	}
}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	08 95       	ret

00000d6e <_ZN14PACKET_HANDLER4pollEv>:
}

/**
 * Poll loop reading is data from the Serial device.
 */
void PACKET_HANDLER::poll(void){
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24

	byte available;

	available = RF_SERIAL.available();
     d76:	87 ed       	ldi	r24, 0xD7	; 215
     d78:	95 e0       	ldi	r25, 0x05	; 5
     d7a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <_ZN14HardwareSerial9availableEv>
     d7e:	18 2f       	mov	r17, r24

	if(EMPTY == available){
     d80:	88 23       	and	r24, r24
     d82:	91 f4       	brne	.+36     	; 0xda8 <_ZN14PACKET_HANDLER4pollEv+0x3a>
		_guard_bool = false;
     d84:	1e 8a       	std	Y+22, r1	; 0x16
		//check timeout watchdog and if over reset.
		if((millis() - _last_received) > PACKET_TIMEOUT){
     d86:	0e 94 ad 10 	call	0x215a	; 0x215a <millis>
     d8a:	2f 89       	ldd	r18, Y+23	; 0x17
     d8c:	38 8d       	ldd	r19, Y+24	; 0x18
     d8e:	49 8d       	ldd	r20, Y+25	; 0x19
     d90:	5a 8d       	ldd	r21, Y+26	; 0x1a
     d92:	62 1b       	sub	r22, r18
     d94:	73 0b       	sbc	r23, r19
     d96:	84 0b       	sbc	r24, r20
     d98:	95 0b       	sbc	r25, r21
     d9a:	69 5e       	subi	r22, 0xE9	; 233
     d9c:	73 40       	sbci	r23, 0x03	; 3
     d9e:	80 40       	sbci	r24, 0x00	; 0
     da0:	90 40       	sbci	r25, 0x00	; 0
     da2:	90 f0       	brcs	.+36     	; 0xdc8 <_ZN14PACKET_HANDLER4pollEv+0x5a>
			_phase = PACKET_WAIT_PHASE_1;
     da4:	18 82       	st	Y, r1
     da6:	10 c0       	rjmp	.+32     	; 0xdc8 <_ZN14PACKET_HANDLER4pollEv+0x5a>
	}else {

		// new data
		while(available --){
			// move to the next state
			_move_state(RF_SERIAL.read());
     da8:	87 ed       	ldi	r24, 0xD7	; 215
     daa:	95 e0       	ldi	r25, 0x05	; 5
     dac:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN14HardwareSerial4readEv>
     db0:	68 2f       	mov	r22, r24
     db2:	ce 01       	movw	r24, r28
     db4:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN14PACKET_HANDLER11_move_stateEh>
     db8:	11 50       	subi	r17, 0x01	; 1
			_phase = PACKET_WAIT_PHASE_1;
		}
	}else {

		// new data
		while(available --){
     dba:	b1 f7       	brne	.-20     	; 0xda8 <_ZN14PACKET_HANDLER4pollEv+0x3a>
			// move to the next state
			_move_state(RF_SERIAL.read());
		}
			_last_received = millis();
     dbc:	0e 94 ad 10 	call	0x215a	; 0x215a <millis>
     dc0:	6f 8b       	std	Y+23, r22	; 0x17
     dc2:	78 8f       	std	Y+24, r23	; 0x18
     dc4:	89 8f       	std	Y+25, r24	; 0x19
     dc6:	9a 8f       	std	Y+26, r25	; 0x1a
	}
	#ifdef DEBUG
		//! Bang for every packet received.
		DEBUG_SERIAL.print("!");
	#endif
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	08 95       	ret

00000dd0 <_ZN13PACKET_PARSER11set_handlerEP14PACKET_HANDLER>:
#include "Packet_Parser.h"

//! Default constructor
PACKET_PARSER::PACKET_PARSER(){}

void PACKET_PARSER::set_handler(PACKET_HANDLER* packet_handler){
     dd0:	fc 01       	movw	r30, r24
	this->_packet_handler = packet_handler;
     dd2:	71 83       	std	Z+1, r23	; 0x01
     dd4:	60 83       	st	Z, r22
}
     dd6:	08 95       	ret

00000dd8 <_ZN13PACKET_PARSER19_get_sensor_configsEPv>:
//	}
//	nmap = & _nmap;
//}

//! Gets the sensor configs
void PACKET_PARSER::_get_sensor_configs(void* buf) {
     dd8:	fb 01       	movw	r30, r22
//	data = &_data;
}

//! Allocate buffer
void PACKET_PARSER::_alloc_mem(void* dest_pointer, size_t size, void* buf) {
	memcpy(dest_pointer, buf, size);
     dda:	dc 01       	movw	r26, r24
     ddc:	df 96       	adiw	r26, 0x3f	; 63
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	8d 93       	st	X+, r24
     de4:	9c 93       	st	X, r25
//		_check_read_packet(SENSOR_CONFIGS);
//		_alloc_mem((void*) &_configs[i - 1], sizeof(sensor_configs_t),
//				(void*) buf_ptr);
//	}
//	configs = & _configs;
}
     de6:	08 95       	ret

00000de8 <_ZN13PACKET_PARSER16_get_sensor_dataEPv>:

//! Gets the sensor data
void PACKET_PARSER::_get_sensor_data(void* buf) {
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	ec 01       	movw	r28, r24
     df2:	16 2f       	mov	r17, r22
     df4:	07 2f       	mov	r16, r23

//! Check the memory space
void PACKET_PARSER::_check_memory_space(size_t mem_space) {

	//! Check memory integrity
	if (memory_check() <= mem_space)
     df6:	0e 94 95 05 	call	0xb2a	; 0xb2a <_Z12memory_checkv>
     dfa:	47 97       	sbiw	r24, 0x17	; 23
     dfc:	08 f4       	brcc	.+2      	; 0xe00 <_ZN13PACKET_PARSER16_get_sensor_dataEPv+0x18>
     dfe:	ff cf       	rjmp	.-2      	; 0xdfe <_ZN13PACKET_PARSER16_get_sensor_dataEPv+0x16>
//	data = &_data;
}

//! Allocate buffer
void PACKET_PARSER::_alloc_mem(void* dest_pointer, size_t size, void* buf) {
	memcpy(dest_pointer, buf, size);
     e00:	de 01       	movw	r26, r28
     e02:	af 5b       	subi	r26, 0xBF	; 191
     e04:	bf 4f       	sbci	r27, 0xFF	; 255
     e06:	81 2f       	mov	r24, r17
     e08:	90 2f       	mov	r25, r16
     e0a:	9c 01       	movw	r18, r24
     e0c:	f9 01       	movw	r30, r18
     e0e:	86 e1       	ldi	r24, 0x16	; 22
     e10:	01 90       	ld	r0, Z+
     e12:	0d 92       	st	X+, r0
     e14:	81 50       	subi	r24, 0x01	; 1
     e16:	e1 f7       	brne	.-8      	; 0xe10 <_ZN13PACKET_PARSER16_get_sensor_dataEPv+0x28>
//			_alloc_mem(&_data[i -1].channels[j],
//					sizeof(remote_sensor_data_t::channels_t), buf_ptr);
//		}
//	}
//	data = &_data;
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <_ZN13PACKET_PARSER6_parseEhhPv>:
void PACKET_PARSER::_alloc_mem(void* dest_pointer, size_t size, void* buf) {
	memcpy(dest_pointer, buf, size);
}

//! Parse the packet
void PACKET_PARSER::_parse(byte packet_id, byte packet_ver, void *buf) {
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
     e2e:	f6 2e       	mov	r15, r22
     e30:	12 2f       	mov	r17, r18
     e32:	03 2f       	mov	r16, r19

//! Check the memory space
void PACKET_PARSER::_check_memory_space(size_t mem_space) {

	//! Check memory integrity
	if (memory_check() <= mem_space)
     e34:	0e 94 95 05 	call	0xb2a	; 0xb2a <_Z12memory_checkv>
     e38:	0b 97       	sbiw	r24, 0x0b	; 11
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <_ZN13PACKET_PARSER6_parseEhhPv+0x1c>
     e3c:	ff cf       	rjmp	.-2      	; 0xe3c <_ZN13PACKET_PARSER6_parseEhhPv+0x1a>
}

//! Parse the packet
void PACKET_PARSER::_parse(byte packet_id, byte packet_ver, void *buf) {

	char* buffer = (char*) buf;
     e3e:	e1 2f       	mov	r30, r17
     e40:	f0 2f       	mov	r31, r16

	//! Check if the string is ok to process.
	this->_check_packet_integrity((char*) buf);

	//! Assigns the new construct
	memcpy(&_header, buffer, sizeof(packet_header_t));
     e42:	9e 01       	movw	r18, r28
     e44:	2e 5f       	subi	r18, 0xFE	; 254
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	af 01       	movw	r20, r30
     e4a:	8d e0       	ldi	r24, 0x0D	; 13
     e4c:	da 01       	movw	r26, r20
     e4e:	0d 90       	ld	r0, X+
     e50:	ad 01       	movw	r20, r26
     e52:	d9 01       	movw	r26, r18
     e54:	0d 92       	st	X+, r0
     e56:	9d 01       	movw	r18, r26
     e58:	81 50       	subi	r24, 0x01	; 1
     e5a:	c1 f7       	brne	.-16     	; 0xe4c <_ZN13PACKET_PARSER6_parseEhhPv+0x2a>
	_check_packet_header();

	buffer += sizeof(this->_header);
     e5c:	8f 01       	movw	r16, r30
     e5e:	03 5f       	subi	r16, 0xF3	; 243
     e60:	1f 4f       	sbci	r17, 0xFF	; 255

	switch (packet_id) {
     e62:	b6 e0       	ldi	r27, 0x06	; 6
     e64:	fb 16       	cp	r15, r27
     e66:	09 f4       	brne	.+2      	; 0xe6a <_ZN13PACKET_PARSER6_parseEhhPv+0x48>
     e68:	52 c0       	rjmp	.+164    	; 0xf0e <_ZN13PACKET_PARSER6_parseEhhPv+0xec>
     e6a:	bf 15       	cp	r27, r15
     e6c:	90 f0       	brcs	.+36     	; 0xe92 <_ZN13PACKET_PARSER6_parseEhhPv+0x70>
     e6e:	e2 e0       	ldi	r30, 0x02	; 2
     e70:	fe 16       	cp	r15, r30
     e72:	69 f1       	breq	.+90     	; 0xece <_ZN13PACKET_PARSER6_parseEhhPv+0xac>
     e74:	ef 15       	cp	r30, r15
     e76:	28 f0       	brcs	.+10     	; 0xe82 <_ZN13PACKET_PARSER6_parseEhhPv+0x60>
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	ff 16       	cp	r15, r31
     e7c:	09 f0       	breq	.+2      	; 0xe80 <_ZN13PACKET_PARSER6_parseEhhPv+0x5e>
     e7e:	75 c0       	rjmp	.+234    	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
     e80:	1f c0       	rjmp	.+62     	; 0xec0 <_ZN13PACKET_PARSER6_parseEhhPv+0x9e>
     e82:	83 e0       	ldi	r24, 0x03	; 3
     e84:	f8 16       	cp	r15, r24
     e86:	49 f1       	breq	.+82     	; 0xeda <_ZN13PACKET_PARSER6_parseEhhPv+0xb8>
     e88:	a5 e0       	ldi	r26, 0x05	; 5
     e8a:	fa 16       	cp	r15, r26
     e8c:	09 f0       	breq	.+2      	; 0xe90 <_ZN13PACKET_PARSER6_parseEhhPv+0x6e>
     e8e:	6d c0       	rjmp	.+218    	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
     e90:	35 c0       	rjmp	.+106    	; 0xefc <_ZN13PACKET_PARSER6_parseEhhPv+0xda>
     e92:	b9 e0       	ldi	r27, 0x09	; 9
     e94:	fb 16       	cp	r15, r27
     e96:	09 f4       	brne	.+2      	; 0xe9a <_ZN13PACKET_PARSER6_parseEhhPv+0x78>
     e98:	65 c0       	rjmp	.+202    	; 0xf64 <_ZN13PACKET_PARSER6_parseEhhPv+0x142>
     e9a:	bf 15       	cp	r27, r15
     e9c:	40 f0       	brcs	.+16     	; 0xeae <_ZN13PACKET_PARSER6_parseEhhPv+0x8c>
     e9e:	e7 e0       	ldi	r30, 0x07	; 7
     ea0:	fe 16       	cp	r15, r30
     ea2:	d1 f1       	breq	.+116    	; 0xf18 <_ZN13PACKET_PARSER6_parseEhhPv+0xf6>
     ea4:	f8 e0       	ldi	r31, 0x08	; 8
     ea6:	ff 16       	cp	r15, r31
     ea8:	09 f0       	breq	.+2      	; 0xeac <_ZN13PACKET_PARSER6_parseEhhPv+0x8a>
     eaa:	5f c0       	rjmp	.+190    	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
     eac:	3f c0       	rjmp	.+126    	; 0xf2c <_ZN13PACKET_PARSER6_parseEhhPv+0x10a>
     eae:	8a e0       	ldi	r24, 0x0A	; 10
     eb0:	f8 16       	cp	r15, r24
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <_ZN13PACKET_PARSER6_parseEhhPv+0x94>
     eb4:	4e c0       	rjmp	.+156    	; 0xf52 <_ZN13PACKET_PARSER6_parseEhhPv+0x130>
     eb6:	ab e0       	ldi	r26, 0x0B	; 11
     eb8:	fa 16       	cp	r15, r26
     eba:	09 f0       	breq	.+2      	; 0xebe <_ZN13PACKET_PARSER6_parseEhhPv+0x9c>
     ebc:	56 c0       	rjmp	.+172    	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
     ebe:	40 c0       	rjmp	.+128    	; 0xf40 <_ZN13PACKET_PARSER6_parseEhhPv+0x11e>
//	data = &_data;
}

//! Allocate buffer
void PACKET_PARSER::_alloc_mem(void* dest_pointer, size_t size, void* buf) {
	memcpy(dest_pointer, buf, size);
     ec0:	f8 01       	movw	r30, r16
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 87       	std	Y+15, r24	; 0x0f
	return false;
}

//! Checks the ack signal
void PACKET_PARSER::_check_ack() {
	if (this->_ack.ack) {
     ec6:	88 23       	and	r24, r24
     ec8:	09 f0       	breq	.+2      	; 0xecc <_ZN13PACKET_PARSER6_parseEhhPv+0xaa>
     eca:	4f c0       	rjmp	.+158    	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
     ecc:	ff cf       	rjmp	.-2      	; 0xecc <_ZN13PACKET_PARSER6_parseEhhPv+0xaa>
//	data = &_data;
}

//! Allocate buffer
void PACKET_PARSER::_alloc_mem(void* dest_pointer, size_t size, void* buf) {
	memcpy(dest_pointer, buf, size);
     ece:	d8 01       	movw	r26, r16
     ed0:	8d 91       	ld	r24, X+
     ed2:	9c 91       	ld	r25, X
     ed4:	99 8b       	std	Y+17, r25	; 0x11
     ed6:	88 8b       	std	Y+16, r24	; 0x10
     ed8:	48 c0       	rjmp	.+144    	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
		char* debug_info;
		sprintf(debug_info, "[ROUTER]: ERRORS > MAX ERRORS");
		DEBUG_SERIAL.println(debug_info);
#endif
	}
	if (_status.router_mode == ERROR_MODE) {
     eda:	de 01       	movw	r26, r28
     edc:	52 96       	adiw	r26, 0x12	; 18
     ede:	f8 01       	movw	r30, r16
     ee0:	8d e0       	ldi	r24, 0x0D	; 13
     ee2:	01 90       	ld	r0, Z+
     ee4:	0d 92       	st	X+, r0
     ee6:	81 50       	subi	r24, 0x01	; 1
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <_ZN13PACKET_PARSER6_parseEhhPv+0xc0>
     eea:	8b 89       	ldd	r24, Y+19	; 0x13
     eec:	8f 3f       	cpi	r24, 0xFF	; 255
     eee:	09 f4       	brne	.+2      	; 0xef2 <_ZN13PACKET_PARSER6_parseEhhPv+0xd0>
		_heartbeat.router_mode = _status.router_mode;
     ef0:	88 8b       	std	Y+16, r24	; 0x10
		sprintf(debug_info, "[ROUTER]: MODE == PWR ERROR");
		DEBUG_SERIAL.println(debug_info);
#endif
	}
	//! Redundancy to save memeory space.
	if (_status.battery_voltage < MIN_BATT_LEVEL) {
     ef2:	8e 89       	ldd	r24, Y+22	; 0x16
     ef4:	84 36       	cpi	r24, 0x64	; 100
     ef6:	c8 f5       	brcc	.+114    	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
		_heartbeat.battery_voltage = _status.battery_voltage;
     ef8:	89 8b       	std	Y+17, r24	; 0x11
     efa:	37 c0       	rjmp	.+110    	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
//	data = &_data;
}

//! Allocate buffer
void PACKET_PARSER::_alloc_mem(void* dest_pointer, size_t size, void* buf) {
	memcpy(dest_pointer, buf, size);
     efc:	de 01       	movw	r26, r28
     efe:	9b 96       	adiw	r26, 0x2b	; 43
     f00:	f8 01       	movw	r30, r16
     f02:	80 e1       	ldi	r24, 0x10	; 16
     f04:	01 90       	ld	r0, Z+
     f06:	0d 92       	st	X+, r0
     f08:	81 50       	subi	r24, 0x01	; 1
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <_ZN13PACKET_PARSER6_parseEhhPv+0xe2>
     f0c:	2e c0       	rjmp	.+92     	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>

//! Check the memory space
void PACKET_PARSER::_check_memory_space(size_t mem_space) {

	//! Check memory integrity
	if (memory_check() <= mem_space)
     f0e:	85 85       	ldd	r24, Z+13	; 0x0d
     f10:	96 85       	ldd	r25, Z+14	; 0x0e
     f12:	9a a7       	std	Y+42, r25	; 0x2a
     f14:	89 a7       	std	Y+41, r24	; 0x29
     f16:	29 c0       	rjmp	.+82     	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
     f18:	0e 94 95 05 	call	0xb2a	; 0xb2a <_Z12memory_checkv>
     f1c:	03 97       	sbiw	r24, 0x03	; 3
     f1e:	08 f4       	brcc	.+2      	; 0xf22 <_ZN13PACKET_PARSER6_parseEhhPv+0x100>
     f20:	ff cf       	rjmp	.-2      	; 0xf20 <_ZN13PACKET_PARSER6_parseEhhPv+0xfe>
		_alloc_mem(&_en_sensors, sizeof(_en_sensors), buffer);
		return;

	case SENSOR_CONFIGS:
		_check_memory_space(sizeof(sensor_configs_t));
		_get_sensor_configs((void*) buffer);
     f22:	ce 01       	movw	r24, r28
     f24:	b8 01       	movw	r22, r16
     f26:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN13PACKET_PARSER19_get_sensor_configsEPv>
     f2a:	1f c0       	rjmp	.+62     	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>

//! Check the memory space
void PACKET_PARSER::_check_memory_space(size_t mem_space) {

	//! Check memory integrity
	if (memory_check() <= mem_space)
     f2c:	0e 94 95 05 	call	0xb2a	; 0xb2a <_Z12memory_checkv>
     f30:	47 97       	sbiw	r24, 0x17	; 23
     f32:	08 f4       	brcc	.+2      	; 0xf36 <_ZN13PACKET_PARSER6_parseEhhPv+0x114>
     f34:	ff cf       	rjmp	.-2      	; 0xf34 <_ZN13PACKET_PARSER6_parseEhhPv+0x112>
		_get_sensor_configs((void*) buffer);
		return;

	case SENSOR_DATA:
		_check_memory_space(sizeof(remote_sensor_data_t));
		_get_sensor_data((void*) buffer);
     f36:	ce 01       	movw	r24, r28
     f38:	b8 01       	movw	r22, r16
     f3a:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN13PACKET_PARSER16_get_sensor_dataEPv>
     f3e:	15 c0       	rjmp	.+42     	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
//	data = &_data;
}

//! Allocate buffer
void PACKET_PARSER::_alloc_mem(void* dest_pointer, size_t size, void* buf) {
	memcpy(dest_pointer, buf, size);
     f40:	de 01       	movw	r26, r28
     f42:	5f 96       	adiw	r26, 0x1f	; 31
     f44:	f8 01       	movw	r30, r16
     f46:	8a e0       	ldi	r24, 0x0A	; 10
     f48:	01 90       	ld	r0, Z+
     f4a:	0d 92       	st	X+, r0
     f4c:	81 50       	subi	r24, 0x01	; 1
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <_ZN13PACKET_PARSER6_parseEhhPv+0x126>
     f50:	0c c0       	rjmp	.+24     	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
		return;

	default: //! Nothing done here
		return;
	}
}
     f52:	de 01       	movw	r26, r28
     f54:	db 96       	adiw	r26, 0x3b	; 59
     f56:	f8 01       	movw	r30, r16
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	01 90       	ld	r0, Z+
     f5c:	0d 92       	st	X+, r0
     f5e:	81 50       	subi	r24, 0x01	; 1
     f60:	e1 f7       	brne	.-8      	; 0xf5a <_ZN13PACKET_PARSER6_parseEhhPv+0x138>
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <_ZN13PACKET_PARSER6_parseEhhPv+0x148>
     f64:	f8 01       	movw	r30, r16
     f66:	80 81       	ld	r24, Z
     f68:	8e af       	std	Y+62, r24	; 0x3e
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	08 95       	ret

00000f76 <_ZN13PACKET_PARSER5parseEPvhhS0_>:
//! Parse the structures.
void PACKET_PARSER::parse(void *arg, byte packet_id, byte packet_ver,
		void *buf) {

	//! Process String
	((PACKET_PARSER*) arg)->_parse(packet_id, packet_ver, buf);
     f76:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN13PACKET_PARSER6_parseEhhPv>
}
     f7a:	08 95       	ret

00000f7c <_ZN13PACKET_PARSERC1Ev>:
	byte battery_voltage;
};

// *************************************************
//! System status information
struct router_status_info_t {
     f7c:	48 96       	adiw	r24, 0x18	; 24
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	72 e0       	ldi	r23, 0x02	; 2
     f82:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN6StringC1EPKc>
 */

#include "Packet_Parser.h"

//! Default constructor
PACKET_PARSER::PACKET_PARSER(){}
     f86:	08 95       	ret

00000f88 <_ZN16EMULATION_DEVICEC1EP17joystick_report_t>:
#include "Emulation_Device_Implementation.h"

static byte idle_rate = 500 / 4; // see HID1_11.pdf sect 7.2.4

//! Default Constructor
EMULATION_DEVICE::EMULATION_DEVICE(joystick_report_t* joystick_report){
     f88:	fc 01       	movw	r30, r24
	//! Sending mutex
	_sending_mutex = false;
     f8a:	16 82       	std	Z+6, r1	; 0x06

	//! Initializing the enviroment variables
	_packet_buffer = EMPTY;
     f8c:	11 82       	std	Z+1, r1	; 0x01
     f8e:	10 82       	st	Z, r1
	_packet_id = EMPTY;
     f90:	13 82       	std	Z+3, r1	; 0x03
     f92:	12 82       	std	Z+2, r1	; 0x02
	_packet_in_sending_queue = true;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	85 83       	std	Z+5, r24	; 0x05
	_button = 0;
	_packet_size = 0;
     f98:	14 82       	std	Z+4, r1	; 0x04
	_button = 0;
     f9a:	17 82       	std	Z+7, r1	; 0x07

	_joy = joystick_report;
     f9c:	71 87       	std	Z+9, r23	; 0x09
     f9e:	60 87       	std	Z+8, r22	; 0x08

}
     fa0:	08 95       	ret

00000fa2 <_ZN16EMULATION_DEVICE24_create_usb_report_frameEv>:

//! Creates USB report frame
void EMULATION_DEVICE::_create_usb_report_frame(){
     fa2:	dc 01       	movw	r26, r24
	_packet_buffer = &mouse_report;
#endif

#ifdef JOYSTICK_REPORT

    uint8_t index = _button/8;
     fa4:	17 96       	adiw	r26, 0x07	; 7
     fa6:	2c 91       	ld	r18, X
     fa8:	17 97       	sbiw	r26, 0x07	; 7
    uint8_t bit = _button - 8*index;
     faa:	82 2f       	mov	r24, r18
     fac:	86 95       	lsr	r24
     fae:	86 95       	lsr	r24
     fb0:	86 95       	lsr	r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0

    _joy->button[index] |= 1 << bit;
     fb4:	18 96       	adiw	r26, 0x08	; 8
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X
     fba:	19 97       	sbiw	r26, 0x09	; 9
     fbc:	e8 0f       	add	r30, r24
     fbe:	f9 1f       	adc	r31, r25
     fc0:	33 e0       	ldi	r19, 0x03	; 3
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	3a 95       	dec	r19
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <_ZN16EMULATION_DEVICE24_create_usb_report_frameEv+0x20>
     fca:	28 1b       	sub	r18, r24
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <_ZN16EMULATION_DEVICE24_create_usb_report_frameEv+0x34>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	2a 95       	dec	r18
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <_ZN16EMULATION_DEVICE24_create_usb_report_frameEv+0x30>
     fda:	20 89       	ldd	r18, Z+16	; 0x10
     fdc:	28 2b       	or	r18, r24
     fde:	20 8b       	std	Z+16, r18	; 0x10
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	4a e0       	ldi	r20, 0x0A	; 10
     fe6:	50 e0       	ldi	r21, 0x00	; 0

    /* Move all of the axes */
    for (uint8_t ind=0; ind<8; ind++) {
    	_joy->axis[ind] += 10 * (ind+1);
     fe8:	18 96       	adiw	r26, 0x08	; 8
     fea:	6d 91       	ld	r22, X+
     fec:	7c 91       	ld	r23, X
     fee:	19 97       	sbiw	r26, 0x09	; 9
     ff0:	f9 01       	movw	r30, r18
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	e6 0f       	add	r30, r22
     ff8:	f7 1f       	adc	r31, r23
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	84 0f       	add	r24, r20
    1000:	95 1f       	adc	r25, r21
    1002:	91 83       	std	Z+1, r25	; 0x01
    1004:	80 83       	st	Z, r24
    1006:	2f 5f       	subi	r18, 0xFF	; 255
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	46 5f       	subi	r20, 0xF6	; 246
    100c:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t bit = _button - 8*index;

    _joy->button[index] |= 1 << bit;

    /* Move all of the axes */
    for (uint8_t ind=0; ind<8; ind++) {
    100e:	28 30       	cpi	r18, 0x08	; 8
    1010:	31 05       	cpc	r19, r1
    1012:	51 f7       	brne	.-44     	; 0xfe8 <_ZN16EMULATION_DEVICE24_create_usb_report_frameEv+0x46>
    	_joy->axis[ind] += 10 * (ind+1);
    }

	//! Reassign the structure to send.
	_packet_buffer = (uint8_t*)_joy;
    1014:	11 96       	adiw	r26, 0x01	; 1
    1016:	7c 93       	st	X, r23
    1018:	6e 93       	st	-X, r22

    _button++;
    101a:	17 96       	adiw	r26, 0x07	; 7
    101c:	8c 91       	ld	r24, X
    101e:	17 97       	sbiw	r26, 0x07	; 7
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	17 96       	adiw	r26, 0x07	; 7
    1024:	8c 93       	st	X, r24
    1026:	17 97       	sbiw	r26, 0x07	; 7
    if (_button >= 40) {
    1028:	88 32       	cpi	r24, 0x28	; 40
    102a:	18 f0       	brcs	.+6      	; 0x1032 <_ZN16EMULATION_DEVICE24_create_usb_report_frameEv+0x90>
       _button = 0;
    102c:	17 96       	adiw	r26, 0x07	; 7
    102e:	1c 92       	st	X, r1
    1030:	17 97       	sbiw	r26, 0x07	; 7
	_packet_in_sending_queue = false;
}

//! Update packet id
void EMULATION_DEVICE::_update_packet_id(){
	_packet_id ++;
    1032:	12 96       	adiw	r26, 0x02	; 2
    1034:	8d 91       	ld	r24, X+
    1036:	9c 91       	ld	r25, X
    1038:	13 97       	sbiw	r26, 0x03	; 3
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	13 96       	adiw	r26, 0x03	; 3
    103e:	9c 93       	st	X, r25
    1040:	8e 93       	st	-X, r24
    1042:	12 97       	sbiw	r26, 0x02	; 2
       _button = 0;
    }
#endif

	_update_packet_id();
	_packet_in_sending_queue = true;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	15 96       	adiw	r26, 0x05	; 5
    1048:	8c 93       	st	X, r24
}
    104a:	08 95       	ret

0000104c <_ZN16EMULATION_DEVICE22_send_usb_report_frameEv>:

//! Sends a USB report frame
void EMULATION_DEVICE::_send_usb_report_frame(){
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	8c 01       	movw	r16, r24
#endif

#ifdef JOYSTICK_REPORT

	//! Send the structure.
	SERIAL_OUTPUT.write(this->_packet_buffer, sizeof(joystick_report_t));
    1052:	fc 01       	movw	r30, r24
    1054:	60 81       	ld	r22, Z
    1056:	71 81       	ldd	r23, Z+1	; 0x01
    1058:	88 eb       	ldi	r24, 0xB8	; 184
    105a:	95 e0       	ldi	r25, 0x05	; 5
    105c:	45 e1       	ldi	r20, 0x15	; 21
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN5Print5writeEPKhj>
#endif

	_packet_in_sending_queue = false;
    1064:	f8 01       	movw	r30, r16
    1066:	15 82       	std	Z+5, r1	; 0x05
}
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <_ZN16EMULATION_DEVICE11emulate_usbEv>:

    temp->button[index] &= ~(1 << bit);
}

//! Emulates a USB interface
void EMULATION_DEVICE::emulate_usb(){
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	ec 01       	movw	r28, r24
		//! the idle rate.
		if ((TCNT1 > ((4 * (F_CPU / 1024000)) * idle_rate)
				|| TCNT1 > 0x7FFF) && idle_rate != 0) {

			//! Needs to send
			_sending_mutex = true;
    1076:	11 e0       	ldi	r17, 0x01	; 1
	//! Do this forever.
	while(1){

		//! Check to see if a report needs to be sent, using
		//! the idle rate.
		if ((TCNT1 > ((4 * (F_CPU / 1024000)) * idle_rate)
    1078:	80 91 84 00 	lds	r24, 0x0084
    107c:	90 91 85 00 	lds	r25, 0x0085
    1080:	8d 54       	subi	r24, 0x4D	; 77
    1082:	9d 41       	sbci	r25, 0x1D	; 29
    1084:	30 f4       	brcc	.+12     	; 0x1092 <_ZN16EMULATION_DEVICE11emulate_usbEv+0x24>
    1086:	80 91 84 00 	lds	r24, 0x0084
    108a:	90 91 85 00 	lds	r25, 0x0085
    108e:	97 ff       	sbrs	r25, 7
    1090:	0d c0       	rjmp	.+26     	; 0x10ac <_ZN16EMULATION_DEVICE11emulate_usbEv+0x3e>
				|| TCNT1 > 0x7FFF) && idle_rate != 0) {

			//! Needs to send
			_sending_mutex = true;
    1092:	1e 83       	std	Y+6, r17	; 0x06
			//! Create a valid random USB Frame
			_create_usb_report_frame();
		}

		//! If we need to send.
		if(_sending_mutex){
    1094:	8e 81       	ldd	r24, Y+6	; 0x06
    1096:	88 23       	and	r24, r24
    1098:	39 f0       	breq	.+14     	; 0x10a8 <_ZN16EMULATION_DEVICE11emulate_usbEv+0x3a>

			//! Send the report.
			//! and reset the timer.
			_send_usb_report_frame();
    109a:	ce 01       	movw	r24, r28
    109c:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN16EMULATION_DEVICE22_send_usb_report_frameEv>
			TCNT1 = 0;
    10a0:	10 92 85 00 	sts	0x0085, r1
    10a4:	10 92 84 00 	sts	0x0084, r1
		}

		//! No need to send anymore.
		_sending_mutex = false;
    10a8:	1e 82       	std	Y+6, r1	; 0x06
    10aa:	e6 cf       	rjmp	.-52     	; 0x1078 <_ZN16EMULATION_DEVICE11emulate_usbEv+0xa>
			//! Needs to send
			_sending_mutex = true;
		}else{

			//! Create a valid random USB Frame
			_create_usb_report_frame();
    10ac:	ce 01       	movw	r24, r28
    10ae:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_ZN16EMULATION_DEVICE24_create_usb_report_frameEv>
    10b2:	f0 cf       	rjmp	.-32     	; 0x1094 <_ZN16EMULATION_DEVICE11emulate_usbEv+0x26>

000010b4 <_Z41__static_initialization_and_destruction_0ii>:
	base_station_address = nvram_object->nv.node_address;
	base_station_mode = nvram_object->nv.device_mode;
	#ifdef DEBUG
		DEBUG_SERIAL.println("NVRAM READ");
	#endif
}
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	e1 f4       	brne	.+56     	; 0x10f2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    10ba:	6f 5f       	subi	r22, 0xFF	; 255
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	11 f5       	brne	.+68     	; 0x1104 <_Z41__static_initialization_and_destruction_0ii+0x50>

	//! Define an WATCHDOG object
	WATCHDOG watchdog;

	//! Define a common USB_STATE_MACHINE object
	USB_STATE_MACHINE usb_state_machine;
    10c0:	8a e5       	ldi	r24, 0x5A	; 90
    10c2:	92 e0       	ldi	r25, 0x02	; 2
    10c4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_ZN17USB_STATE_MACHINEC1Ev>

	//! Define an NVRAM object
	NVRAM nvram;

	//! Define an PACKET_PARSER object
	PACKET_PARSER packet_parser;
    10c8:	84 ee       	ldi	r24, 0xE4	; 228
    10ca:	92 e0       	ldi	r25, 0x02	; 2
    10cc:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN13PACKET_PARSERC1Ev>
			{ROUTER_DEBUG,     PACKET_PARSER::parse, 			&packet_parser},
			{ERROR_MSG,        PACKET_PARSER::parse, 			&packet_parser}
	};

	//! Define a PACKET_DECODER object
	PACKET_HANDLER packet_decoder((void*)&packet_handlers);
    10d0:	8b e3       	ldi	r24, 0x3B	; 59
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	67 e0       	ldi	r22, 0x07	; 7
    10d6:	72 e0       	ldi	r23, 0x02	; 2
    10d8:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN14PACKET_HANDLERC1EPv>

	//! Define a COMMAND_INTERPRETER object
	COMMAND_PARSER command_interpreter(&nvram, &packet_decoder, &usb_state_machine);
    10dc:	86 e5       	ldi	r24, 0x56	; 86
    10de:	93 e0       	ldi	r25, 0x03	; 3
    10e0:	6c e5       	ldi	r22, 0x5C	; 92
    10e2:	72 e0       	ldi	r23, 0x02	; 2
    10e4:	4b e3       	ldi	r20, 0x3B	; 59
    10e6:	53 e0       	ldi	r21, 0x03	; 3
    10e8:	2a e5       	ldi	r18, 0x5A	; 90
    10ea:	32 e0       	ldi	r19, 0x02	; 2
    10ec:	0e 94 93 04 	call	0x926	; 0x926 <_ZN14COMMAND_PARSERC1EP5NVRAMP14PACKET_HANDLERP17USB_STATE_MACHINE>
    10f0:	08 95       	ret
    10f2:	89 2b       	or	r24, r25
    10f4:	39 f4       	brne	.+14     	; 0x1104 <_Z41__static_initialization_and_destruction_0ii+0x50>
    10f6:	6f 5f       	subi	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	21 f4       	brne	.+8      	; 0x1104 <_Z41__static_initialization_and_destruction_0ii+0x50>
    10fc:	8c ef       	ldi	r24, 0xFC	; 252
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN6StringD1Ev>
    1104:	08 95       	ret

00001106 <_GLOBAL__D_eeprom>:
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	6f ef       	ldi	r22, 0xFF	; 255
    110c:	7f ef       	ldi	r23, 0xFF	; 255
    110e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_Z41__static_initialization_and_destruction_0ii>
    1112:	08 95       	ret

00001114 <_GLOBAL__I_eeprom>:
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	6f ef       	ldi	r22, 0xFF	; 255
    111a:	7f ef       	ldi	r23, 0xFF	; 255
    111c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_Z41__static_initialization_and_destruction_0ii>
    1120:	08 95       	ret

00001122 <_Z16configure_deviceP5NVRAM>:
/**
 * This function configures the device with NVRAM stored
 * parameters.
 * @param nvram_object - NVRAM
 */
void configure_device(NVRAM* nvram_object){
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	8c 01       	movw	r16, r24

	SERIAL_OUTPUT.begin(nvram_object->nv.serial1_speed);
    1128:	fc 01       	movw	r30, r24
    112a:	40 81       	ld	r20, Z
    112c:	51 81       	ldd	r21, Z+1	; 0x01
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	88 eb       	ldi	r24, 0xB8	; 184
    1134:	95 e0       	ldi	r25, 0x05	; 5
    1136:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN14HardwareSerial5beginEm>
		DEBUG_SERIAL.println("BOOT SERIAL");
	#endif

	//! Buttons setup
	pinMode(nvram_object->nv.button_1,
				 nvram_object->nv.button1_setting);
    113a:	f8 01       	movw	r30, r16
    113c:	80 85       	ldd	r24, Z+8	; 0x08
    113e:	61 85       	ldd	r22, Z+9	; 0x09
    1140:	0e 94 76 11 	call	0x22ec	; 0x22ec <pinMode>
	pinMode(nvram_object->nv.button_2,
				 nvram_object->nv.button2_setting);
    1144:	f8 01       	movw	r30, r16
    1146:	82 85       	ldd	r24, Z+10	; 0x0a
    1148:	63 85       	ldd	r22, Z+11	; 0x0b
    114a:	0e 94 76 11 	call	0x22ec	; 0x22ec <pinMode>

	//! LED setup
	pinMode(nvram_object->nv.led_1,
				 nvram_object->nv.led1_setting);
    114e:	f8 01       	movw	r30, r16
    1150:	84 85       	ldd	r24, Z+12	; 0x0c
    1152:	65 85       	ldd	r22, Z+13	; 0x0d
    1154:	0e 94 76 11 	call	0x22ec	; 0x22ec <pinMode>
	pinMode(nvram_object->nv.led_2,
				 nvram_object->nv.led2_setting);
    1158:	f8 01       	movw	r30, r16
    115a:	86 85       	ldd	r24, Z+14	; 0x0e
    115c:	67 85       	ldd	r22, Z+15	; 0x0f
    115e:	0e 94 76 11 	call	0x22ec	; 0x22ec <pinMode>
	pinMode(nvram_object->nv.led_3,
				 nvram_object->nv.led3_setting);
    1162:	f8 01       	movw	r30, r16
    1164:	80 89       	ldd	r24, Z+16	; 0x10
    1166:	61 89       	ldd	r22, Z+17	; 0x11
    1168:	0e 94 76 11 	call	0x22ec	; 0x22ec <pinMode>
	pinMode(nvram_object->nv.led_4,
				 nvram_object->nv.led4_setting);
    116c:	f8 01       	movw	r30, r16
    116e:	82 89       	ldd	r24, Z+18	; 0x12
    1170:	63 89       	ldd	r22, Z+19	; 0x13
    1172:	0e 94 76 11 	call	0x22ec	; 0x22ec <pinMode>

	//! Set RF data.
	base_station_address = nvram_object->nv.node_address;
    1176:	f8 01       	movw	r30, r16
    1178:	86 81       	ldd	r24, Z+6	; 0x06
    117a:	80 93 75 03 	sts	0x0375, r24
	base_station_mode = nvram_object->nv.device_mode;
    117e:	87 81       	ldd	r24, Z+7	; 0x07
    1180:	80 93 76 03 	sts	0x0376, r24
	#ifdef DEBUG
		DEBUG_SERIAL.println("NVRAM READ");
	#endif
}
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <loop>:

void loop(){

	//! If the emulation device is chosen.
	//! Start the emulation process.
	if(emulation_chosen){
    118a:	80 91 77 03 	lds	r24, 0x0377
    118e:	88 23       	and	r24, r24
    1190:	39 f0       	breq	.+14     	; 0x11a0 <loop+0x16>
	#ifdef DEBUG
		DEBUG_SERIAL.println("STARTING EMULATION ENGINE");
	#endif
		//! Cast to the emulation device pointer.
		((EMULATION_DEVICE*) generic_pointer)->emulate_usb();
    1192:	80 91 73 03 	lds	r24, 0x0373
    1196:	90 91 74 03 	lds	r25, 0x0374
    119a:	0e 94 37 08 	call	0x106e	; 0x106e <_ZN16EMULATION_DEVICE11emulate_usbEv>
    119e:	08 95       	ret

	}else if(usb_device_chosen){
    11a0:	80 91 78 03 	lds	r24, 0x0378
    11a4:	88 23       	and	r24, r24
    11a6:	39 f0       	breq	.+14     	; 0x11b6 <loop+0x2c>
	#ifdef DEBUG
		DEBUG_SERIAL.println("STARTING USB DEVICE ENGINE");
	#endif
		//! Cast to the USB device pointer
		((USB_DEVICE*) generic_pointer)->run_usb();
    11a8:	80 91 73 03 	lds	r24, 0x0373
    11ac:	90 91 74 03 	lds	r25, 0x0374
    11b0:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN10USB_DEVICE7run_usbEv>
    11b4:	08 95       	ret
    11b6:	ff cf       	rjmp	.-2      	; 0x11b6 <loop+0x2c>

000011b8 <setup>:
		loop();
	}
	return 0;
}

void setup(){
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	67 97       	sbiw	r28, 0x17	; 23
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61

	//! Clear the interrupt flag, to void all interrupts
	//! coming in during the setup phase
	cli();
    11d0:	f8 94       	cli

	//! Loads the settings saved in NVRAM
	//! Also loads the commands to the cached mem.
	nvram.load();
    11d2:	8c e5       	ldi	r24, 0x5C	; 92
    11d4:	92 e0       	ldi	r25, 0x02	; 2
    11d6:	0e 94 d7 05 	call	0xbae	; 0xbae <_ZN5NVRAM4loadEv>
	configure_device(&nvram);
    11da:	8c e5       	ldi	r24, 0x5C	; 92
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	0e 94 91 08 	call	0x1122	; 0x1122 <_Z16configure_deviceP5NVRAM>
	#ifdef DEBUG
		DEBUG_SERIAL.println("STARTED DEBUG ENGINE");
	#endif

	//! sets the sdecoder objdect.
	packet_parser.set_handler(&packet_decoder);
    11e2:	84 ee       	ldi	r24, 0xE4	; 228
    11e4:	92 e0       	ldi	r25, 0x02	; 2
    11e6:	6b e3       	ldi	r22, 0x3B	; 59
    11e8:	73 e0       	ldi	r23, 0x03	; 3
    11ea:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN13PACKET_PARSER11set_handlerEP14PACKET_HANDLER>

	//! Reset and reboot device.
	attachInterrupt(SELECT_BUTTON_2, reset_device, CHANGE);
    11ee:	83 e0       	ldi	r24, 0x03	; 3
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <attachInterrupt>
		DEBUG_SERIAL.println("INTERRUPT ATTACHED TO BUTTON 2");
		DEBUG_SERIAL.println("ENTERING SELECT LOOP");
	#endif

	//! Wait 5sec to check the pin.
	delay(FIVE_SECONDS);
    11fc:	68 e8       	ldi	r22, 0x88	; 136
    11fe:	73 e1       	ldi	r23, 0x13	; 19
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 bb 10 	call	0x2176	; 0x2176 <delay>

	//! Check choice (default = Emulation).
		//! 1 - Emulation
		//! 0 - Real USB device
	if(digitalRead(SELECT_BUTTON_1) == HIGH){
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	0e 94 10 12 	call	0x2420	; 0x2420 <digitalRead>
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	81 f4       	brne	.+32     	; 0x1232 <setup+0x7a>

		//! Defines the generic pointer (EMULATION).
		//! This is where we setup the object pointer.
		EMULATION_DEVICE emulation_device(&joystick_report);
    1212:	8e 01       	movw	r16, r28
    1214:	0f 5f       	subi	r16, 0xFF	; 255
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	c8 01       	movw	r24, r16
    121a:	6e e5       	ldi	r22, 0x5E	; 94
    121c:	73 e0       	ldi	r23, 0x03	; 3
    121e:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN16EMULATION_DEVICEC1EP17joystick_report_t>
		generic_pointer = &emulation_device;
    1222:	10 93 74 03 	sts	0x0374, r17
    1226:	00 93 73 03 	sts	0x0373, r16
		emulation_chosen = true;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 93 77 03 	sts	0x0377, r24
    1230:	1a c0       	rjmp	.+52     	; 0x1266 <setup+0xae>

	#ifdef DEBUG
		DEBUG_SERIAL.println("EMULATION CHOSEN");
	#endif

	}else if(digitalRead(SELECT_BUTTON_1) == LOW){
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	0e 94 10 12 	call	0x2420	; 0x2420 <digitalRead>
    1238:	89 2b       	or	r24, r25
    123a:	a1 f4       	brne	.+40     	; 0x1264 <setup+0xac>

		//! Define the generic pointer (USB HOST DEVICE).
		//! This is where we setup the object pointer.

		USB_DEVICE usb_host_device(&command_interpreter,
				&packet_parser, &joystick_report);
    123c:	8e 01       	movw	r16, r28
    123e:	05 5f       	subi	r16, 0xF5	; 245
    1240:	1f 4f       	sbci	r17, 0xFF	; 255
    1242:	c8 01       	movw	r24, r16
    1244:	66 e5       	ldi	r22, 0x56	; 86
    1246:	73 e0       	ldi	r23, 0x03	; 3
    1248:	44 ee       	ldi	r20, 0xE4	; 228
    124a:	52 e0       	ldi	r21, 0x02	; 2
    124c:	2e e5       	ldi	r18, 0x5E	; 94
    124e:	33 e0       	ldi	r19, 0x03	; 3
    1250:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN10USB_DEVICEC1EP14COMMAND_PARSERP13PACKET_PARSERP17joystick_report_t>
		generic_pointer = &usb_host_device;
    1254:	10 93 74 03 	sts	0x0374, r17
    1258:	00 93 73 03 	sts	0x0373, r16
		usb_device_chosen = true;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 78 03 	sts	0x0378, r24
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <setup+0xae>
    1264:	ff cf       	rjmp	.-2      	; 0x1264 <setup+0xac>
	#endif
		error((void*)__LINE__, (void*)__func__);
	}

	//! Timer is initialized to keep track of the CPU idle time.
	TCCR1B = _BV(CS12) | _BV(CS11);
    1266:	86 e0       	ldi	r24, 0x06	; 6
    1268:	80 93 81 00 	sts	0x0081, r24

	#ifdef DEBUG
		DEBUG_SERIAL.println("MEM CHECK");
	#endif
    //! Check memory integrity
    if(memory_check() <= EMPTY)
    126c:	0e 94 95 05 	call	0xb2a	; 0xb2a <_Z12memory_checkv>
    1270:	89 2b       	or	r24, r25
    1272:	09 f4       	brne	.+2      	; 0x1276 <setup+0xbe>
    1274:	ff cf       	rjmp	.-2      	; 0x1274 <setup+0xbc>
	#ifdef DEBUG
		DEBUG_SERIAL.println("RESUME INTERRUPTS");
	#endif

	//! Resume interrupt handling
	sei();
    1276:	78 94       	sei
}
    1278:	67 96       	adiw	r28, 0x17	; 23
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	08 95       	ret

0000128e <main>:
 * on the uC. It returns 0 if successfully terminated,
 * and 1 is there is an error.
 * @return
 */
int main(void){
	init();
    128e:	0e 94 14 11 	call	0x2228	; 0x2228 <init>
	setup();
    1292:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <setup>

	#ifdef DEBUG
		DEBUG_SERIAL.println("ENTERING RUN LOOP");
	#endif
	for (;;) {
		loop();
    1296:	0e 94 c5 08 	call	0x118a	; 0x118a <loop>
    129a:	fd cf       	rjmp	.-6      	; 0x1296 <main+0x8>

0000129c <__vector_25>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
#elif defined(SIG_USART0_RECV)
  SIGNAL(SIG_USART0_RECV)
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	0b b6       	in	r0, 0x3b	; 59
    12a6:	0f 92       	push	r0
    12a8:	11 24       	eor	r1, r1
    12aa:	2f 93       	push	r18
    12ac:	3f 93       	push	r19
    12ae:	4f 93       	push	r20
    12b0:	8f 93       	push	r24
    12b2:	9f 93       	push	r25
    12b4:	ef 93       	push	r30
    12b6:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    12b8:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    12bc:	20 91 b9 03 	lds	r18, 0x03B9
    12c0:	30 91 ba 03 	lds	r19, 0x03BA
    12c4:	2f 5f       	subi	r18, 0xFF	; 255
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	2f 73       	andi	r18, 0x3F	; 63
    12ca:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    12cc:	80 91 bb 03 	lds	r24, 0x03BB
    12d0:	90 91 bc 03 	lds	r25, 0x03BC
    12d4:	28 17       	cp	r18, r24
    12d6:	39 07       	cpc	r19, r25
    12d8:	59 f0       	breq	.+22     	; 0x12f0 <__vector_25+0x54>
    buffer->buffer[buffer->head] = c;
    12da:	e0 91 b9 03 	lds	r30, 0x03B9
    12de:	f0 91 ba 03 	lds	r31, 0x03BA
    12e2:	e7 58       	subi	r30, 0x87	; 135
    12e4:	fc 4f       	sbci	r31, 0xFC	; 252
    12e6:	40 83       	st	Z, r20
    buffer->head = i;
    12e8:	30 93 ba 03 	sts	0x03BA, r19
    12ec:	20 93 b9 03 	sts	0x03B9, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	4f 91       	pop	r20
    12fa:	3f 91       	pop	r19
    12fc:	2f 91       	pop	r18
    12fe:	0f 90       	pop	r0
    1300:	0b be       	out	0x3b, r0	; 59
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	0f 90       	pop	r0
    1308:	1f 90       	pop	r1
    130a:	18 95       	reti

0000130c <__vector_36>:

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	0b b6       	in	r0, 0x3b	; 59
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	8f 93       	push	r24
    1322:	9f 93       	push	r25
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31
  {
    unsigned char c = UDR1;
    1328:	40 91 ce 00 	lds	r20, 0x00CE
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    132c:	20 91 41 04 	lds	r18, 0x0441
    1330:	30 91 42 04 	lds	r19, 0x0442
    1334:	2f 5f       	subi	r18, 0xFF	; 255
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	2f 73       	andi	r18, 0x3F	; 63
    133a:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    133c:	80 91 43 04 	lds	r24, 0x0443
    1340:	90 91 44 04 	lds	r25, 0x0444
    1344:	28 17       	cp	r18, r24
    1346:	39 07       	cpc	r19, r25
    1348:	59 f0       	breq	.+22     	; 0x1360 <__vector_36+0x54>
    buffer->buffer[buffer->head] = c;
    134a:	e0 91 41 04 	lds	r30, 0x0441
    134e:	f0 91 42 04 	lds	r31, 0x0442
    1352:	ef 5f       	subi	r30, 0xFF	; 255
    1354:	fb 4f       	sbci	r31, 0xFB	; 251
    1356:	40 83       	st	Z, r20
    buffer->head = i;
    1358:	30 93 42 04 	sts	0x0442, r19
    135c:	20 93 41 04 	sts	0x0441, r18
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    unsigned char c = UDR1;
    store_char(c, &rx_buffer1);
  }
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	4f 91       	pop	r20
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	0b be       	out	0x3b, r0	; 59
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <__vector_51>:

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
    137c:	1f 92       	push	r1
    137e:	0f 92       	push	r0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	0f 92       	push	r0
    1384:	0b b6       	in	r0, 0x3b	; 59
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	2f 93       	push	r18
    138c:	3f 93       	push	r19
    138e:	4f 93       	push	r20
    1390:	8f 93       	push	r24
    1392:	9f 93       	push	r25
    1394:	ef 93       	push	r30
    1396:	ff 93       	push	r31
  {
    unsigned char c = UDR2;
    1398:	40 91 d6 00 	lds	r20, 0x00D6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    139c:	20 91 c9 04 	lds	r18, 0x04C9
    13a0:	30 91 ca 04 	lds	r19, 0x04CA
    13a4:	2f 5f       	subi	r18, 0xFF	; 255
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	2f 73       	andi	r18, 0x3F	; 63
    13aa:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    13ac:	80 91 cb 04 	lds	r24, 0x04CB
    13b0:	90 91 cc 04 	lds	r25, 0x04CC
    13b4:	28 17       	cp	r18, r24
    13b6:	39 07       	cpc	r19, r25
    13b8:	59 f0       	breq	.+22     	; 0x13d0 <__vector_51+0x54>
    buffer->buffer[buffer->head] = c;
    13ba:	e0 91 c9 04 	lds	r30, 0x04C9
    13be:	f0 91 ca 04 	lds	r31, 0x04CA
    13c2:	e7 57       	subi	r30, 0x77	; 119
    13c4:	fb 4f       	sbci	r31, 0xFB	; 251
    13c6:	40 83       	st	Z, r20
    buffer->head = i;
    13c8:	30 93 ca 04 	sts	0x04CA, r19
    13cc:	20 93 c9 04 	sts	0x04C9, r18
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    unsigned char c = UDR2;
    store_char(c, &rx_buffer2);
  }
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	4f 91       	pop	r20
    13da:	3f 91       	pop	r19
    13dc:	2f 91       	pop	r18
    13de:	0f 90       	pop	r0
    13e0:	0b be       	out	0x3b, r0	; 59
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti

000013ec <__vector_54>:

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
    13ec:	1f 92       	push	r1
    13ee:	0f 92       	push	r0
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	0f 92       	push	r0
    13f4:	0b b6       	in	r0, 0x3b	; 59
    13f6:	0f 92       	push	r0
    13f8:	11 24       	eor	r1, r1
    13fa:	2f 93       	push	r18
    13fc:	3f 93       	push	r19
    13fe:	4f 93       	push	r20
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
    1404:	ef 93       	push	r30
    1406:	ff 93       	push	r31
  {
    unsigned char c = UDR3;
    1408:	40 91 36 01 	lds	r20, 0x0136
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    140c:	20 91 51 05 	lds	r18, 0x0551
    1410:	30 91 52 05 	lds	r19, 0x0552
    1414:	2f 5f       	subi	r18, 0xFF	; 255
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	2f 73       	andi	r18, 0x3F	; 63
    141a:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    141c:	80 91 53 05 	lds	r24, 0x0553
    1420:	90 91 54 05 	lds	r25, 0x0554
    1424:	28 17       	cp	r18, r24
    1426:	39 07       	cpc	r19, r25
    1428:	59 f0       	breq	.+22     	; 0x1440 <__vector_54+0x54>
    buffer->buffer[buffer->head] = c;
    142a:	e0 91 51 05 	lds	r30, 0x0551
    142e:	f0 91 52 05 	lds	r31, 0x0552
    1432:	ef 5e       	subi	r30, 0xEF	; 239
    1434:	fa 4f       	sbci	r31, 0xFA	; 250
    1436:	40 83       	st	Z, r20
    buffer->head = i;
    1438:	30 93 52 05 	sts	0x0552, r19
    143c:	20 93 51 05 	sts	0x0551, r18
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    unsigned char c = UDR3;
    store_char(c, &rx_buffer3);
  }
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	4f 91       	pop	r20
    144a:	3f 91       	pop	r19
    144c:	2f 91       	pop	r18
    144e:	0f 90       	pop	r0
    1450:	0b be       	out	0x3b, r0	; 59
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <__vector_26>:
#if defined(UART0_UDRE_vect)
ISR(UART0_UDRE_vect)
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	0b b6       	in	r0, 0x3b	; 59
    1466:	0f 92       	push	r0
    1468:	11 24       	eor	r1, r1
    146a:	2f 93       	push	r18
    146c:	3f 93       	push	r19
    146e:	4f 93       	push	r20
    1470:	5f 93       	push	r21
    1472:	6f 93       	push	r22
    1474:	7f 93       	push	r23
    1476:	8f 93       	push	r24
    1478:	9f 93       	push	r25
    147a:	af 93       	push	r26
    147c:	bf 93       	push	r27
    147e:	ef 93       	push	r30
    1480:	ff 93       	push	r31
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1482:	20 91 fd 03 	lds	r18, 0x03FD
    1486:	30 91 fe 03 	lds	r19, 0x03FE
    148a:	80 91 ff 03 	lds	r24, 0x03FF
    148e:	90 91 00 04 	lds	r25, 0x0400
    1492:	28 17       	cp	r18, r24
    1494:	39 07       	cpc	r19, r25
    1496:	31 f4       	brne	.+12     	; 0x14a4 <__vector_26+0x48>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1498:	80 91 c1 00 	lds	r24, 0x00C1
    149c:	8f 7d       	andi	r24, 0xDF	; 223
    149e:	80 93 c1 00 	sts	0x00C1, r24
    14a2:	16 c0       	rjmp	.+44     	; 0x14d0 <__vector_26+0x74>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    14a4:	e0 91 ff 03 	lds	r30, 0x03FF
    14a8:	f0 91 00 04 	lds	r31, 0x0400
    14ac:	e3 54       	subi	r30, 0x43	; 67
    14ae:	fc 4f       	sbci	r31, 0xFC	; 252
    14b0:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    14b2:	80 91 ff 03 	lds	r24, 0x03FF
    14b6:	90 91 00 04 	lds	r25, 0x0400
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	60 e4       	ldi	r22, 0x40	; 64
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	0e 94 40 12 	call	0x2480	; 0x2480 <__divmodhi4>
    14c4:	90 93 00 04 	sts	0x0400, r25
    14c8:	80 93 ff 03 	sts	0x03FF, r24
	
  #if defined(UDR0)
    UDR0 = c;
    14cc:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	0f 90       	pop	r0
    14ea:	0b be       	out	0x3b, r0	; 59
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	0b b6       	in	r0, 0x3b	; 59
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	2f 93       	push	r18
    1506:	3f 93       	push	r19
    1508:	4f 93       	push	r20
    150a:	5f 93       	push	r21
    150c:	6f 93       	push	r22
    150e:	7f 93       	push	r23
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	ef 93       	push	r30
    151a:	ff 93       	push	r31
{
  if (tx_buffer1.head == tx_buffer1.tail) {
    151c:	20 91 85 04 	lds	r18, 0x0485
    1520:	30 91 86 04 	lds	r19, 0x0486
    1524:	80 91 87 04 	lds	r24, 0x0487
    1528:	90 91 88 04 	lds	r25, 0x0488
    152c:	28 17       	cp	r18, r24
    152e:	39 07       	cpc	r19, r25
    1530:	31 f4       	brne	.+12     	; 0x153e <__vector_37+0x48>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    1532:	80 91 c9 00 	lds	r24, 0x00C9
    1536:	8f 7d       	andi	r24, 0xDF	; 223
    1538:	80 93 c9 00 	sts	0x00C9, r24
    153c:	16 c0       	rjmp	.+44     	; 0x156a <__vector_37+0x74>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    153e:	e0 91 87 04 	lds	r30, 0x0487
    1542:	f0 91 88 04 	lds	r31, 0x0488
    1546:	eb 5b       	subi	r30, 0xBB	; 187
    1548:	fb 4f       	sbci	r31, 0xFB	; 251
    154a:	40 81       	ld	r20, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    154c:	80 91 87 04 	lds	r24, 0x0487
    1550:	90 91 88 04 	lds	r25, 0x0488
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	60 e4       	ldi	r22, 0x40	; 64
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	0e 94 40 12 	call	0x2480	; 0x2480 <__divmodhi4>
    155e:	90 93 88 04 	sts	0x0488, r25
    1562:	80 93 87 04 	sts	0x0487, r24
	
    UDR1 = c;
    1566:	40 93 ce 00 	sts	0x00CE, r20
  }
}
    156a:	ff 91       	pop	r31
    156c:	ef 91       	pop	r30
    156e:	bf 91       	pop	r27
    1570:	af 91       	pop	r26
    1572:	9f 91       	pop	r25
    1574:	8f 91       	pop	r24
    1576:	7f 91       	pop	r23
    1578:	6f 91       	pop	r22
    157a:	5f 91       	pop	r21
    157c:	4f 91       	pop	r20
    157e:	3f 91       	pop	r19
    1580:	2f 91       	pop	r18
    1582:	0f 90       	pop	r0
    1584:	0b be       	out	0x3b, r0	; 59
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	0f 90       	pop	r0
    158c:	1f 90       	pop	r1
    158e:	18 95       	reti

00001590 <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
    1590:	1f 92       	push	r1
    1592:	0f 92       	push	r0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	0f 92       	push	r0
    1598:	0b b6       	in	r0, 0x3b	; 59
    159a:	0f 92       	push	r0
    159c:	11 24       	eor	r1, r1
    159e:	2f 93       	push	r18
    15a0:	3f 93       	push	r19
    15a2:	4f 93       	push	r20
    15a4:	5f 93       	push	r21
    15a6:	6f 93       	push	r22
    15a8:	7f 93       	push	r23
    15aa:	8f 93       	push	r24
    15ac:	9f 93       	push	r25
    15ae:	af 93       	push	r26
    15b0:	bf 93       	push	r27
    15b2:	ef 93       	push	r30
    15b4:	ff 93       	push	r31
{
  if (tx_buffer2.head == tx_buffer2.tail) {
    15b6:	20 91 0d 05 	lds	r18, 0x050D
    15ba:	30 91 0e 05 	lds	r19, 0x050E
    15be:	80 91 0f 05 	lds	r24, 0x050F
    15c2:	90 91 10 05 	lds	r25, 0x0510
    15c6:	28 17       	cp	r18, r24
    15c8:	39 07       	cpc	r19, r25
    15ca:	31 f4       	brne	.+12     	; 0x15d8 <__vector_52+0x48>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    15cc:	80 91 d1 00 	lds	r24, 0x00D1
    15d0:	8f 7d       	andi	r24, 0xDF	; 223
    15d2:	80 93 d1 00 	sts	0x00D1, r24
    15d6:	16 c0       	rjmp	.+44     	; 0x1604 <__vector_52+0x74>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    15d8:	e0 91 0f 05 	lds	r30, 0x050F
    15dc:	f0 91 10 05 	lds	r31, 0x0510
    15e0:	e3 53       	subi	r30, 0x33	; 51
    15e2:	fb 4f       	sbci	r31, 0xFB	; 251
    15e4:	40 81       	ld	r20, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    15e6:	80 91 0f 05 	lds	r24, 0x050F
    15ea:	90 91 10 05 	lds	r25, 0x0510
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	60 e4       	ldi	r22, 0x40	; 64
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	0e 94 40 12 	call	0x2480	; 0x2480 <__divmodhi4>
    15f8:	90 93 10 05 	sts	0x0510, r25
    15fc:	80 93 0f 05 	sts	0x050F, r24
	
    UDR2 = c;
    1600:	40 93 d6 00 	sts	0x00D6, r20
  }
}
    1604:	ff 91       	pop	r31
    1606:	ef 91       	pop	r30
    1608:	bf 91       	pop	r27
    160a:	af 91       	pop	r26
    160c:	9f 91       	pop	r25
    160e:	8f 91       	pop	r24
    1610:	7f 91       	pop	r23
    1612:	6f 91       	pop	r22
    1614:	5f 91       	pop	r21
    1616:	4f 91       	pop	r20
    1618:	3f 91       	pop	r19
    161a:	2f 91       	pop	r18
    161c:	0f 90       	pop	r0
    161e:	0b be       	out	0x3b, r0	; 59
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	0f 90       	pop	r0
    1626:	1f 90       	pop	r1
    1628:	18 95       	reti

0000162a <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	0b b6       	in	r0, 0x3b	; 59
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	2f 93       	push	r18
    163a:	3f 93       	push	r19
    163c:	4f 93       	push	r20
    163e:	5f 93       	push	r21
    1640:	6f 93       	push	r22
    1642:	7f 93       	push	r23
    1644:	8f 93       	push	r24
    1646:	9f 93       	push	r25
    1648:	af 93       	push	r26
    164a:	bf 93       	push	r27
    164c:	ef 93       	push	r30
    164e:	ff 93       	push	r31
{
  if (tx_buffer3.head == tx_buffer3.tail) {
    1650:	20 91 95 05 	lds	r18, 0x0595
    1654:	30 91 96 05 	lds	r19, 0x0596
    1658:	80 91 97 05 	lds	r24, 0x0597
    165c:	90 91 98 05 	lds	r25, 0x0598
    1660:	28 17       	cp	r18, r24
    1662:	39 07       	cpc	r19, r25
    1664:	31 f4       	brne	.+12     	; 0x1672 <__vector_55+0x48>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    1666:	80 91 31 01 	lds	r24, 0x0131
    166a:	8f 7d       	andi	r24, 0xDF	; 223
    166c:	80 93 31 01 	sts	0x0131, r24
    1670:	16 c0       	rjmp	.+44     	; 0x169e <__vector_55+0x74>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    1672:	e0 91 97 05 	lds	r30, 0x0597
    1676:	f0 91 98 05 	lds	r31, 0x0598
    167a:	eb 5a       	subi	r30, 0xAB	; 171
    167c:	fa 4f       	sbci	r31, 0xFA	; 250
    167e:	40 81       	ld	r20, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    1680:	80 91 97 05 	lds	r24, 0x0597
    1684:	90 91 98 05 	lds	r25, 0x0598
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	60 e4       	ldi	r22, 0x40	; 64
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	0e 94 40 12 	call	0x2480	; 0x2480 <__divmodhi4>
    1692:	90 93 98 05 	sts	0x0598, r25
    1696:	80 93 97 05 	sts	0x0597, r24
	
    UDR3 = c;
    169a:	40 93 36 01 	sts	0x0136, r20
  }
}
    169e:	ff 91       	pop	r31
    16a0:	ef 91       	pop	r30
    16a2:	bf 91       	pop	r27
    16a4:	af 91       	pop	r26
    16a6:	9f 91       	pop	r25
    16a8:	8f 91       	pop	r24
    16aa:	7f 91       	pop	r23
    16ac:	6f 91       	pop	r22
    16ae:	5f 91       	pop	r21
    16b0:	4f 91       	pop	r20
    16b2:	3f 91       	pop	r19
    16b4:	2f 91       	pop	r18
    16b6:	0f 90       	pop	r0
    16b8:	0b be       	out	0x3b, r0	; 59
    16ba:	0f 90       	pop	r0
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	0f 90       	pop	r0
    16c0:	1f 90       	pop	r1
    16c2:	18 95       	reti

000016c4 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    16c4:	af 92       	push	r10
    16c6:	bf 92       	push	r11
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	ec 01       	movw	r28, r24
    16d8:	7a 01       	movw	r14, r20
    16da:	8b 01       	movw	r16, r22
    16dc:	dd 24       	eor	r13, r13
    16de:	40 30       	cpi	r20, 0x00	; 0
    16e0:	81 ee       	ldi	r24, 0xE1	; 225
    16e2:	58 07       	cpc	r21, r24
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	68 07       	cpc	r22, r24
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	78 07       	cpc	r23, r24
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <_ZN14HardwareSerial5beginEm+0x2e>
    16ee:	dd 24       	eor	r13, r13
    16f0:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	a9 2e       	mov	r10, r25
    16f6:	b1 2c       	mov	r11, r1
    16f8:	ec 89       	ldd	r30, Y+20	; 0x14
    16fa:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    16fc:	dd 20       	and	r13, r13
    16fe:	69 f0       	breq	.+26     	; 0x171a <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    1700:	c5 01       	movw	r24, r10
    1702:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1704:	02 c0       	rjmp	.+4      	; 0x170a <_ZN14HardwareSerial5beginEm+0x46>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <_ZN14HardwareSerial5beginEm+0x42>
    170e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	79 e0       	ldi	r23, 0x09	; 9
    1714:	8d e3       	ldi	r24, 0x3D	; 61
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    171a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    171c:	60 e8       	ldi	r22, 0x80	; 128
    171e:	74 e8       	ldi	r23, 0x84	; 132
    1720:	8e e1       	ldi	r24, 0x1E	; 30
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a8 01       	movw	r20, r16
    1726:	97 01       	movw	r18, r14
    1728:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__udivmodsi4>
    172c:	21 50       	subi	r18, 0x01	; 1
    172e:	30 40       	sbci	r19, 0x00	; 0
    1730:	40 40       	sbci	r20, 0x00	; 0
    1732:	50 40       	sbci	r21, 0x00	; 0
    1734:	56 95       	lsr	r21
    1736:	47 95       	ror	r20
    1738:	37 95       	ror	r19
    173a:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    173c:	80 e1       	ldi	r24, 0x10	; 16
    173e:	20 30       	cpi	r18, 0x00	; 0
    1740:	38 07       	cpc	r19, r24
    1742:	20 f0       	brcs	.+8      	; 0x174c <_ZN14HardwareSerial5beginEm+0x88>
    1744:	dd 20       	and	r13, r13
    1746:	11 f0       	breq	.+4      	; 0x174c <_ZN14HardwareSerial5beginEm+0x88>
    1748:	dd 24       	eor	r13, r13
    174a:	d6 cf       	rjmp	.-84     	; 0x16f8 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    174c:	e8 89       	ldd	r30, Y+16	; 0x10
    174e:	f9 89       	ldd	r31, Y+17	; 0x11
    1750:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1752:	ea 89       	ldd	r30, Y+18	; 0x12
    1754:	fb 89       	ldd	r31, Y+19	; 0x13
    1756:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1758:	ee 89       	ldd	r30, Y+22	; 0x16
    175a:	ff 89       	ldd	r31, Y+23	; 0x17
    175c:	40 81       	ld	r20, Z
    175e:	21 e0       	ldi	r18, 0x01	; 1
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	c9 01       	movw	r24, r18
    1764:	0a 8c       	ldd	r0, Y+26	; 0x1a
    1766:	02 c0       	rjmp	.+4      	; 0x176c <_ZN14HardwareSerial5beginEm+0xa8>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <_ZN14HardwareSerial5beginEm+0xa4>
    1770:	48 2b       	or	r20, r24
    1772:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1774:	ee 89       	ldd	r30, Y+22	; 0x16
    1776:	ff 89       	ldd	r31, Y+23	; 0x17
    1778:	40 81       	ld	r20, Z
    177a:	c9 01       	movw	r24, r18
    177c:	0b 8c       	ldd	r0, Y+27	; 0x1b
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <_ZN14HardwareSerial5beginEm+0xc0>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <_ZN14HardwareSerial5beginEm+0xbc>
    1788:	48 2b       	or	r20, r24
    178a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    178c:	ee 89       	ldd	r30, Y+22	; 0x16
    178e:	ff 89       	ldd	r31, Y+23	; 0x17
    1790:	40 81       	ld	r20, Z
    1792:	c9 01       	movw	r24, r18
    1794:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1796:	02 c0       	rjmp	.+4      	; 0x179c <_ZN14HardwareSerial5beginEm+0xd8>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <_ZN14HardwareSerial5beginEm+0xd4>
    17a0:	48 2b       	or	r20, r24
    17a2:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    17a4:	ee 89       	ldd	r30, Y+22	; 0x16
    17a6:	ff 89       	ldd	r31, Y+23	; 0x17
    17a8:	80 81       	ld	r24, Z
    17aa:	0d 8c       	ldd	r0, Y+29	; 0x1d
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <_ZN14HardwareSerial5beginEm+0xee>
    17ae:	22 0f       	add	r18, r18
    17b0:	33 1f       	adc	r19, r19
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <_ZN14HardwareSerial5beginEm+0xea>
    17b6:	20 95       	com	r18
    17b8:	28 23       	and	r18, r24
    17ba:	20 83       	st	Z, r18
}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	bf 90       	pop	r11
    17cc:	af 90       	pop	r10
    17ce:	08 95       	ret

000017d0 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    17d0:	dc 01       	movw	r26, r24
    17d2:	1c 96       	adiw	r26, 0x0c	; 12
    17d4:	ed 91       	ld	r30, X+
    17d6:	fc 91       	ld	r31, X
    17d8:	1d 97       	sbiw	r26, 0x0d	; 13
    17da:	e0 5c       	subi	r30, 0xC0	; 192
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	21 91       	ld	r18, Z+
    17e0:	31 91       	ld	r19, Z+
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	28 1b       	sub	r18, r24
    17e8:	39 0b       	sbc	r19, r25
    17ea:	2f 73       	andi	r18, 0x3F	; 63
    17ec:	30 70       	andi	r19, 0x00	; 0
}
    17ee:	c9 01       	movw	r24, r18
    17f0:	08 95       	ret

000017f2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    17f2:	dc 01       	movw	r26, r24
    17f4:	1c 96       	adiw	r26, 0x0c	; 12
    17f6:	ed 91       	ld	r30, X+
    17f8:	fc 91       	ld	r31, X
    17fa:	1d 97       	sbiw	r26, 0x0d	; 13
    17fc:	e0 5c       	subi	r30, 0xC0	; 192
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	20 81       	ld	r18, Z
    1802:	31 81       	ldd	r19, Z+1	; 0x01
    1804:	e0 54       	subi	r30, 0x40	; 64
    1806:	f0 40       	sbci	r31, 0x00	; 0
    1808:	df 01       	movw	r26, r30
    180a:	ae 5b       	subi	r26, 0xBE	; 190
    180c:	bf 4f       	sbci	r27, 0xFF	; 255
    180e:	8d 91       	ld	r24, X+
    1810:	9c 91       	ld	r25, X
    1812:	11 97       	sbiw	r26, 0x01	; 1
    1814:	28 17       	cp	r18, r24
    1816:	39 07       	cpc	r19, r25
    1818:	19 f4       	brne	.+6      	; 0x1820 <_ZN14HardwareSerial4peekEv+0x2e>
    181a:	2f ef       	ldi	r18, 0xFF	; 255
    181c:	3f ef       	ldi	r19, 0xFF	; 255
    181e:	07 c0       	rjmp	.+14     	; 0x182e <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1820:	8d 91       	ld	r24, X+
    1822:	9c 91       	ld	r25, X
    1824:	e8 0f       	add	r30, r24
    1826:	f9 1f       	adc	r31, r25
    1828:	80 81       	ld	r24, Z
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    182e:	c9 01       	movw	r24, r18
    1830:	08 95       	ret

00001832 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1832:	dc 01       	movw	r26, r24
    1834:	1c 96       	adiw	r26, 0x0c	; 12
    1836:	ed 91       	ld	r30, X+
    1838:	fc 91       	ld	r31, X
    183a:	1d 97       	sbiw	r26, 0x0d	; 13
    183c:	e0 5c       	subi	r30, 0xC0	; 192
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	20 81       	ld	r18, Z
    1842:	31 81       	ldd	r19, Z+1	; 0x01
    1844:	e0 54       	subi	r30, 0x40	; 64
    1846:	f0 40       	sbci	r31, 0x00	; 0
    1848:	df 01       	movw	r26, r30
    184a:	ae 5b       	subi	r26, 0xBE	; 190
    184c:	bf 4f       	sbci	r27, 0xFF	; 255
    184e:	8d 91       	ld	r24, X+
    1850:	9c 91       	ld	r25, X
    1852:	11 97       	sbiw	r26, 0x01	; 1
    1854:	28 17       	cp	r18, r24
    1856:	39 07       	cpc	r19, r25
    1858:	19 f4       	brne	.+6      	; 0x1860 <_ZN14HardwareSerial4readEv+0x2e>
    185a:	2f ef       	ldi	r18, 0xFF	; 255
    185c:	3f ef       	ldi	r19, 0xFF	; 255
    185e:	10 c0       	rjmp	.+32     	; 0x1880 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1860:	8d 91       	ld	r24, X+
    1862:	9c 91       	ld	r25, X
    1864:	11 97       	sbiw	r26, 0x01	; 1
    1866:	e8 0f       	add	r30, r24
    1868:	f9 1f       	adc	r31, r25
    186a:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    186c:	8d 91       	ld	r24, X+
    186e:	9c 91       	ld	r25, X
    1870:	11 97       	sbiw	r26, 0x01	; 1
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	8f 73       	andi	r24, 0x3F	; 63
    1876:	90 70       	andi	r25, 0x00	; 0
    1878:	11 96       	adiw	r26, 0x01	; 1
    187a:	9c 93       	st	X, r25
    187c:	8e 93       	st	-X, r24
    return c;
    187e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1880:	c9 01       	movw	r24, r18
    1882:	08 95       	ret

00001884 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    1884:	fc 01       	movw	r30, r24
    1886:	86 85       	ldd	r24, Z+14	; 0x0e
    1888:	97 85       	ldd	r25, Z+15	; 0x0f
    188a:	dc 01       	movw	r26, r24
    188c:	a0 5c       	subi	r26, 0xC0	; 192
    188e:	bf 4f       	sbci	r27, 0xFF	; 255
    1890:	fc 01       	movw	r30, r24
    1892:	ee 5b       	subi	r30, 0xBE	; 190
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	2d 91       	ld	r18, X+
    1898:	3c 91       	ld	r19, X
    189a:	11 97       	sbiw	r26, 0x01	; 1
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	28 17       	cp	r18, r24
    18a2:	39 07       	cpc	r19, r25
    18a4:	c1 f7       	brne	.-16     	; 0x1896 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    18a6:	08 95       	ret

000018a8 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	ec 01       	movw	r28, r24
    18ae:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    18b0:	ee 85       	ldd	r30, Y+14	; 0x0e
    18b2:	ff 85       	ldd	r31, Y+15	; 0x0f
    18b4:	e0 5c       	subi	r30, 0xC0	; 192
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	e0 54       	subi	r30, 0x40	; 64
    18be:	f0 40       	sbci	r31, 0x00	; 0
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	60 e4       	ldi	r22, 0x40	; 64
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	0e 94 40 12 	call	0x2480	; 0x2480 <__divmodhi4>
    18ca:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    18cc:	df 01       	movw	r26, r30
    18ce:	ae 5b       	subi	r26, 0xBE	; 190
    18d0:	bf 4f       	sbci	r27, 0xFF	; 255
    18d2:	8d 91       	ld	r24, X+
    18d4:	9c 91       	ld	r25, X
    18d6:	11 97       	sbiw	r26, 0x01	; 1
    18d8:	28 17       	cp	r18, r24
    18da:	39 07       	cpc	r19, r25
    18dc:	d1 f3       	breq	.-12     	; 0x18d2 <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    18de:	e0 5c       	subi	r30, 0xC0	; 192
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	e0 54       	subi	r30, 0x40	; 64
    18e8:	f0 40       	sbci	r31, 0x00	; 0
    18ea:	e8 0f       	add	r30, r24
    18ec:	f9 1f       	adc	r31, r25
    18ee:	40 83       	st	Z, r20
  _tx_buffer->head = i;
    18f0:	ee 85       	ldd	r30, Y+14	; 0x0e
    18f2:	ff 85       	ldd	r31, Y+15	; 0x0f
    18f4:	e0 5c       	subi	r30, 0xC0	; 192
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	31 83       	std	Z+1, r19	; 0x01
    18fa:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    18fc:	ee 89       	ldd	r30, Y+22	; 0x16
    18fe:	ff 89       	ldd	r31, Y+23	; 0x17
    1900:	20 81       	ld	r18, Z
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1908:	02 c0       	rjmp	.+4      	; 0x190e <_ZN14HardwareSerial5writeEh+0x66>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <_ZN14HardwareSerial5writeEh+0x62>
    1912:	28 2b       	or	r18, r24
    1914:	20 83       	st	Z, r18
  
  return 1;
}
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	08 95       	ret

00001920 <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    1920:	1f 93       	push	r17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1922:	10 92 9c 05 	sts	0x059C, r1
    1926:	10 92 9b 05 	sts	0x059B, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    192a:	28 ee       	ldi	r18, 0xE8	; 232
    192c:	33 e0       	ldi	r19, 0x03	; 3
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	20 93 9d 05 	sts	0x059D, r18
    1936:	30 93 9e 05 	sts	0x059E, r19
    193a:	40 93 9f 05 	sts	0x059F, r20
    193e:	50 93 a0 05 	sts	0x05A0, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1942:	62 e4       	ldi	r22, 0x42	; 66
    1944:	72 e0       	ldi	r23, 0x02	; 2
    1946:	70 93 9a 05 	sts	0x059A, r23
    194a:	60 93 99 05 	sts	0x0599, r22
{
  _rx_buffer = rx_buffer;
    194e:	89 e7       	ldi	r24, 0x79	; 121
    1950:	93 e0       	ldi	r25, 0x03	; 3
    1952:	90 93 a6 05 	sts	0x05A6, r25
    1956:	80 93 a5 05 	sts	0x05A5, r24
  _tx_buffer = tx_buffer;
    195a:	8d eb       	ldi	r24, 0xBD	; 189
    195c:	93 e0       	ldi	r25, 0x03	; 3
    195e:	90 93 a8 05 	sts	0x05A8, r25
    1962:	80 93 a7 05 	sts	0x05A7, r24
  _ubrrh = ubrrh;
    1966:	85 ec       	ldi	r24, 0xC5	; 197
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	90 93 aa 05 	sts	0x05AA, r25
    196e:	80 93 a9 05 	sts	0x05A9, r24
  _ubrrl = ubrrl;
    1972:	84 ec       	ldi	r24, 0xC4	; 196
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	90 93 ac 05 	sts	0x05AC, r25
    197a:	80 93 ab 05 	sts	0x05AB, r24
  _ucsra = ucsra;
    197e:	80 ec       	ldi	r24, 0xC0	; 192
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	90 93 ae 05 	sts	0x05AE, r25
    1986:	80 93 ad 05 	sts	0x05AD, r24
  _ucsrb = ucsrb;
    198a:	81 ec       	ldi	r24, 0xC1	; 193
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	90 93 b0 05 	sts	0x05B0, r25
    1992:	80 93 af 05 	sts	0x05AF, r24
  _udr = udr;
    1996:	86 ec       	ldi	r24, 0xC6	; 198
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	90 93 b2 05 	sts	0x05B2, r25
    199e:	80 93 b1 05 	sts	0x05B1, r24
  _rxen = rxen;
    19a2:	14 e0       	ldi	r17, 0x04	; 4
    19a4:	10 93 b3 05 	sts	0x05B3, r17
  _txen = txen;
    19a8:	b3 e0       	ldi	r27, 0x03	; 3
    19aa:	b0 93 b4 05 	sts	0x05B4, r27
  _rxcie = rxcie;
    19ae:	a7 e0       	ldi	r26, 0x07	; 7
    19b0:	a0 93 b5 05 	sts	0x05B5, r26
  _udrie = udrie;
    19b4:	f5 e0       	ldi	r31, 0x05	; 5
    19b6:	f0 93 b6 05 	sts	0x05B6, r31
  _u2x = u2x;
    19ba:	e1 e0       	ldi	r30, 0x01	; 1
    19bc:	e0 93 b7 05 	sts	0x05B7, r30
    19c0:	10 92 bb 05 	sts	0x05BB, r1
    19c4:	10 92 ba 05 	sts	0x05BA, r1
    19c8:	20 93 bc 05 	sts	0x05BC, r18
    19cc:	30 93 bd 05 	sts	0x05BD, r19
    19d0:	40 93 be 05 	sts	0x05BE, r20
    19d4:	50 93 bf 05 	sts	0x05BF, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    19d8:	70 93 b9 05 	sts	0x05B9, r23
    19dc:	60 93 b8 05 	sts	0x05B8, r22
{
  _rx_buffer = rx_buffer;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	94 e0       	ldi	r25, 0x04	; 4
    19e4:	90 93 c5 05 	sts	0x05C5, r25
    19e8:	80 93 c4 05 	sts	0x05C4, r24
  _tx_buffer = tx_buffer;
    19ec:	85 e4       	ldi	r24, 0x45	; 69
    19ee:	94 e0       	ldi	r25, 0x04	; 4
    19f0:	90 93 c7 05 	sts	0x05C7, r25
    19f4:	80 93 c6 05 	sts	0x05C6, r24
  _ubrrh = ubrrh;
    19f8:	8d ec       	ldi	r24, 0xCD	; 205
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	90 93 c9 05 	sts	0x05C9, r25
    1a00:	80 93 c8 05 	sts	0x05C8, r24
  _ubrrl = ubrrl;
    1a04:	8c ec       	ldi	r24, 0xCC	; 204
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	90 93 cb 05 	sts	0x05CB, r25
    1a0c:	80 93 ca 05 	sts	0x05CA, r24
  _ucsra = ucsra;
    1a10:	88 ec       	ldi	r24, 0xC8	; 200
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	90 93 cd 05 	sts	0x05CD, r25
    1a18:	80 93 cc 05 	sts	0x05CC, r24
  _ucsrb = ucsrb;
    1a1c:	89 ec       	ldi	r24, 0xC9	; 201
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	90 93 cf 05 	sts	0x05CF, r25
    1a24:	80 93 ce 05 	sts	0x05CE, r24
  _udr = udr;
    1a28:	8e ec       	ldi	r24, 0xCE	; 206
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	90 93 d1 05 	sts	0x05D1, r25
    1a30:	80 93 d0 05 	sts	0x05D0, r24
  _rxen = rxen;
    1a34:	10 93 d2 05 	sts	0x05D2, r17
  _txen = txen;
    1a38:	b0 93 d3 05 	sts	0x05D3, r27
  _rxcie = rxcie;
    1a3c:	a0 93 d4 05 	sts	0x05D4, r26
  _udrie = udrie;
    1a40:	f0 93 d5 05 	sts	0x05D5, r31
  _u2x = u2x;
    1a44:	e0 93 d6 05 	sts	0x05D6, r30
    1a48:	10 92 da 05 	sts	0x05DA, r1
    1a4c:	10 92 d9 05 	sts	0x05D9, r1
    1a50:	20 93 db 05 	sts	0x05DB, r18
    1a54:	30 93 dc 05 	sts	0x05DC, r19
    1a58:	40 93 dd 05 	sts	0x05DD, r20
    1a5c:	50 93 de 05 	sts	0x05DE, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1a60:	70 93 d8 05 	sts	0x05D8, r23
    1a64:	60 93 d7 05 	sts	0x05D7, r22
{
  _rx_buffer = rx_buffer;
    1a68:	89 e8       	ldi	r24, 0x89	; 137
    1a6a:	94 e0       	ldi	r25, 0x04	; 4
    1a6c:	90 93 e4 05 	sts	0x05E4, r25
    1a70:	80 93 e3 05 	sts	0x05E3, r24
  _tx_buffer = tx_buffer;
    1a74:	8d ec       	ldi	r24, 0xCD	; 205
    1a76:	94 e0       	ldi	r25, 0x04	; 4
    1a78:	90 93 e6 05 	sts	0x05E6, r25
    1a7c:	80 93 e5 05 	sts	0x05E5, r24
  _ubrrh = ubrrh;
    1a80:	85 ed       	ldi	r24, 0xD5	; 213
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	90 93 e8 05 	sts	0x05E8, r25
    1a88:	80 93 e7 05 	sts	0x05E7, r24
  _ubrrl = ubrrl;
    1a8c:	84 ed       	ldi	r24, 0xD4	; 212
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	90 93 ea 05 	sts	0x05EA, r25
    1a94:	80 93 e9 05 	sts	0x05E9, r24
  _ucsra = ucsra;
    1a98:	80 ed       	ldi	r24, 0xD0	; 208
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	90 93 ec 05 	sts	0x05EC, r25
    1aa0:	80 93 eb 05 	sts	0x05EB, r24
  _ucsrb = ucsrb;
    1aa4:	81 ed       	ldi	r24, 0xD1	; 209
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	90 93 ee 05 	sts	0x05EE, r25
    1aac:	80 93 ed 05 	sts	0x05ED, r24
  _udr = udr;
    1ab0:	86 ed       	ldi	r24, 0xD6	; 214
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	90 93 f0 05 	sts	0x05F0, r25
    1ab8:	80 93 ef 05 	sts	0x05EF, r24
  _rxen = rxen;
    1abc:	10 93 f1 05 	sts	0x05F1, r17
  _txen = txen;
    1ac0:	b0 93 f2 05 	sts	0x05F2, r27
  _rxcie = rxcie;
    1ac4:	a0 93 f3 05 	sts	0x05F3, r26
  _udrie = udrie;
    1ac8:	f0 93 f4 05 	sts	0x05F4, r31
  _u2x = u2x;
    1acc:	e0 93 f5 05 	sts	0x05F5, r30
    1ad0:	10 92 f9 05 	sts	0x05F9, r1
    1ad4:	10 92 f8 05 	sts	0x05F8, r1
    1ad8:	20 93 fa 05 	sts	0x05FA, r18
    1adc:	30 93 fb 05 	sts	0x05FB, r19
    1ae0:	40 93 fc 05 	sts	0x05FC, r20
    1ae4:	50 93 fd 05 	sts	0x05FD, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1ae8:	70 93 f7 05 	sts	0x05F7, r23
    1aec:	60 93 f6 05 	sts	0x05F6, r22
{
  _rx_buffer = rx_buffer;
    1af0:	81 e1       	ldi	r24, 0x11	; 17
    1af2:	95 e0       	ldi	r25, 0x05	; 5
    1af4:	90 93 03 06 	sts	0x0603, r25
    1af8:	80 93 02 06 	sts	0x0602, r24
  _tx_buffer = tx_buffer;
    1afc:	85 e5       	ldi	r24, 0x55	; 85
    1afe:	95 e0       	ldi	r25, 0x05	; 5
    1b00:	90 93 05 06 	sts	0x0605, r25
    1b04:	80 93 04 06 	sts	0x0604, r24
  _ubrrh = ubrrh;
    1b08:	85 e3       	ldi	r24, 0x35	; 53
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	90 93 07 06 	sts	0x0607, r25
    1b10:	80 93 06 06 	sts	0x0606, r24
  _ubrrl = ubrrl;
    1b14:	84 e3       	ldi	r24, 0x34	; 52
    1b16:	91 e0       	ldi	r25, 0x01	; 1
    1b18:	90 93 09 06 	sts	0x0609, r25
    1b1c:	80 93 08 06 	sts	0x0608, r24
  _ucsra = ucsra;
    1b20:	80 e3       	ldi	r24, 0x30	; 48
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	90 93 0b 06 	sts	0x060B, r25
    1b28:	80 93 0a 06 	sts	0x060A, r24
  _ucsrb = ucsrb;
    1b2c:	81 e3       	ldi	r24, 0x31	; 49
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	90 93 0d 06 	sts	0x060D, r25
    1b34:	80 93 0c 06 	sts	0x060C, r24
  _udr = udr;
    1b38:	86 e3       	ldi	r24, 0x36	; 54
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	90 93 0f 06 	sts	0x060F, r25
    1b40:	80 93 0e 06 	sts	0x060E, r24
  _rxen = rxen;
    1b44:	10 93 10 06 	sts	0x0610, r17
  _txen = txen;
    1b48:	b0 93 11 06 	sts	0x0611, r27
  _rxcie = rxcie;
    1b4c:	a0 93 12 06 	sts	0x0612, r26
  _udrie = udrie;
    1b50:	f0 93 13 06 	sts	0x0613, r31
  _u2x = u2x;
    1b54:	e0 93 14 06 	sts	0x0614, r30
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    1b58:	1f 91       	pop	r17
    1b5a:	08 95       	ret

00001b5c <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1b5c:	cf 92       	push	r12
    1b5e:	df 92       	push	r13
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	7c 01       	movw	r14, r24
    1b6e:	6b 01       	movw	r12, r22
    1b70:	8a 01       	movw	r16, r20
    1b72:	c0 e0       	ldi	r28, 0x00	; 0
    1b74:	d0 e0       	ldi	r29, 0x00	; 0
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1b78:	d6 01       	movw	r26, r12
    1b7a:	6d 91       	ld	r22, X+
    1b7c:	6d 01       	movw	r12, r26
    1b7e:	d7 01       	movw	r26, r14
    1b80:	ed 91       	ld	r30, X+
    1b82:	fc 91       	ld	r31, X
    1b84:	01 90       	ld	r0, Z+
    1b86:	f0 81       	ld	r31, Z
    1b88:	e0 2d       	mov	r30, r0
    1b8a:	c7 01       	movw	r24, r14
    1b8c:	19 95       	eicall
    1b8e:	c8 0f       	add	r28, r24
    1b90:	d9 1f       	adc	r29, r25
    1b92:	01 50       	subi	r16, 0x01	; 1
    1b94:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1b96:	01 15       	cp	r16, r1
    1b98:	11 05       	cpc	r17, r1
    1b9a:	71 f7       	brne	.-36     	; 0x1b78 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13
    1bac:	cf 90       	pop	r12
    1bae:	08 95       	ret

00001bb0 <attachInterrupt>:

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1bb0:	88 30       	cpi	r24, 0x08	; 8
    1bb2:	08 f0       	brcs	.+2      	; 0x1bb6 <attachInterrupt+0x6>
    1bb4:	78 c0       	rjmp	.+240    	; 0x1ca6 <attachInterrupt+0xf6>
    intFunc[interruptNum] = userFunc;
    1bb6:	e8 2f       	mov	r30, r24
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	ee 0f       	add	r30, r30
    1bbc:	ff 1f       	adc	r31, r31
    1bbe:	eb 5e       	subi	r30, 0xEB	; 235
    1bc0:	f9 4f       	sbci	r31, 0xF9	; 249
    1bc2:	71 83       	std	Z+1, r23	; 0x01
    1bc4:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1bc6:	83 30       	cpi	r24, 0x03	; 3
    1bc8:	d9 f0       	breq	.+54     	; 0x1c00 <attachInterrupt+0x50>
    1bca:	84 30       	cpi	r24, 0x04	; 4
    1bcc:	30 f4       	brcc	.+12     	; 0x1bda <attachInterrupt+0x2a>
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <attachInterrupt+0x24>
    1bd2:	44 c0       	rjmp	.+136    	; 0x1c5c <attachInterrupt+0xac>
    1bd4:	82 30       	cpi	r24, 0x02	; 2
    1bd6:	60 f4       	brcc	.+24     	; 0x1bf0 <attachInterrupt+0x40>
    1bd8:	39 c0       	rjmp	.+114    	; 0x1c4c <attachInterrupt+0x9c>
    1bda:	85 30       	cpi	r24, 0x05	; 5
    1bdc:	51 f1       	breq	.+84     	; 0x1c32 <attachInterrupt+0x82>
    1bde:	85 30       	cpi	r24, 0x05	; 5
    1be0:	d8 f0       	brcs	.+54     	; 0x1c18 <attachInterrupt+0x68>
    1be2:	86 30       	cpi	r24, 0x06	; 6
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <attachInterrupt+0x38>
    1be6:	46 c0       	rjmp	.+140    	; 0x1c74 <attachInterrupt+0xc4>
    1be8:	87 30       	cpi	r24, 0x07	; 7
    1bea:	09 f0       	breq	.+2      	; 0x1bee <attachInterrupt+0x3e>
    1bec:	5c c0       	rjmp	.+184    	; 0x1ca6 <attachInterrupt+0xf6>
    1bee:	4f c0       	rjmp	.+158    	; 0x1c8e <attachInterrupt+0xde>
#if defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1bf0:	80 91 69 00 	lds	r24, 0x0069
    1bf4:	8c 7f       	andi	r24, 0xFC	; 252
    1bf6:	84 2b       	or	r24, r20
    1bf8:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    1bfc:	e8 9a       	sbi	0x1d, 0	; 29
    1bfe:	08 95       	ret
      break;
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1c00:	80 91 69 00 	lds	r24, 0x0069
    1c04:	44 0f       	add	r20, r20
    1c06:	55 1f       	adc	r21, r21
    1c08:	44 0f       	add	r20, r20
    1c0a:	55 1f       	adc	r21, r21
    1c0c:	83 7f       	andi	r24, 0xF3	; 243
    1c0e:	84 2b       	or	r24, r20
    1c10:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    1c14:	e9 9a       	sbi	0x1d, 1	; 29
    1c16:	08 95       	ret
      break;
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
    1c18:	80 91 69 00 	lds	r24, 0x0069
    1c1c:	74 e0       	ldi	r23, 0x04	; 4
    1c1e:	44 0f       	add	r20, r20
    1c20:	55 1f       	adc	r21, r21
    1c22:	7a 95       	dec	r23
    1c24:	e1 f7       	brne	.-8      	; 0x1c1e <attachInterrupt+0x6e>
    1c26:	8f 7c       	andi	r24, 0xCF	; 207
    1c28:	84 2b       	or	r24, r20
    1c2a:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT2);
    1c2e:	ea 9a       	sbi	0x1d, 2	; 29
    1c30:	08 95       	ret
      break;
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
    1c32:	80 91 69 00 	lds	r24, 0x0069
    1c36:	66 e0       	ldi	r22, 0x06	; 6
    1c38:	44 0f       	add	r20, r20
    1c3a:	55 1f       	adc	r21, r21
    1c3c:	6a 95       	dec	r22
    1c3e:	e1 f7       	brne	.-8      	; 0x1c38 <attachInterrupt+0x88>
    1c40:	8f 73       	andi	r24, 0x3F	; 63
    1c42:	84 2b       	or	r24, r20
    1c44:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT3);
    1c48:	eb 9a       	sbi	0x1d, 3	; 29
    1c4a:	08 95       	ret
      break;
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
    1c4c:	80 91 6a 00 	lds	r24, 0x006A
    1c50:	8c 7f       	andi	r24, 0xFC	; 252
    1c52:	84 2b       	or	r24, r20
    1c54:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT4);
    1c58:	ec 9a       	sbi	0x1d, 4	; 29
    1c5a:	08 95       	ret
      break;
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
    1c5c:	80 91 6a 00 	lds	r24, 0x006A
    1c60:	44 0f       	add	r20, r20
    1c62:	55 1f       	adc	r21, r21
    1c64:	44 0f       	add	r20, r20
    1c66:	55 1f       	adc	r21, r21
    1c68:	83 7f       	andi	r24, 0xF3	; 243
    1c6a:	84 2b       	or	r24, r20
    1c6c:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT5);
    1c70:	ed 9a       	sbi	0x1d, 5	; 29
    1c72:	08 95       	ret
      break;
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
    1c74:	80 91 6a 00 	lds	r24, 0x006A
    1c78:	24 e0       	ldi	r18, 0x04	; 4
    1c7a:	44 0f       	add	r20, r20
    1c7c:	55 1f       	adc	r21, r21
    1c7e:	2a 95       	dec	r18
    1c80:	e1 f7       	brne	.-8      	; 0x1c7a <attachInterrupt+0xca>
    1c82:	8f 7c       	andi	r24, 0xCF	; 207
    1c84:	84 2b       	or	r24, r20
    1c86:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT6);
    1c8a:	ee 9a       	sbi	0x1d, 6	; 29
    1c8c:	08 95       	ret
      break;
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
    1c8e:	80 91 6a 00 	lds	r24, 0x006A
    1c92:	96 e0       	ldi	r25, 0x06	; 6
    1c94:	44 0f       	add	r20, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	9a 95       	dec	r25
    1c9a:	e1 f7       	brne	.-8      	; 0x1c94 <attachInterrupt+0xe4>
    1c9c:	8f 73       	andi	r24, 0x3F	; 63
    1c9e:	84 2b       	or	r24, r20
    1ca0:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT7);
    1ca4:	ef 9a       	sbi	0x1d, 7	; 29
    1ca6:	08 95       	ret

00001ca8 <__vector_1>:
}
*/

#if defined(EICRA) && defined(EICRB)

SIGNAL(INT0_vect) {
    1ca8:	1f 92       	push	r1
    1caa:	0f 92       	push	r0
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	0f 92       	push	r0
    1cb0:	0b b6       	in	r0, 0x3b	; 59
    1cb2:	0f 92       	push	r0
    1cb4:	11 24       	eor	r1, r1
    1cb6:	2f 93       	push	r18
    1cb8:	3f 93       	push	r19
    1cba:	4f 93       	push	r20
    1cbc:	5f 93       	push	r21
    1cbe:	6f 93       	push	r22
    1cc0:	7f 93       	push	r23
    1cc2:	8f 93       	push	r24
    1cc4:	9f 93       	push	r25
    1cc6:	af 93       	push	r26
    1cc8:	bf 93       	push	r27
    1cca:	ef 93       	push	r30
    1ccc:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    1cce:	80 91 19 06 	lds	r24, 0x0619
    1cd2:	90 91 1a 06 	lds	r25, 0x061A
    1cd6:	89 2b       	or	r24, r25
    1cd8:	29 f0       	breq	.+10     	; 0x1ce4 <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    1cda:	e0 91 19 06 	lds	r30, 0x0619
    1cde:	f0 91 1a 06 	lds	r31, 0x061A
    1ce2:	19 95       	eicall
}
    1ce4:	ff 91       	pop	r31
    1ce6:	ef 91       	pop	r30
    1ce8:	bf 91       	pop	r27
    1cea:	af 91       	pop	r26
    1cec:	9f 91       	pop	r25
    1cee:	8f 91       	pop	r24
    1cf0:	7f 91       	pop	r23
    1cf2:	6f 91       	pop	r22
    1cf4:	5f 91       	pop	r21
    1cf6:	4f 91       	pop	r20
    1cf8:	3f 91       	pop	r19
    1cfa:	2f 91       	pop	r18
    1cfc:	0f 90       	pop	r0
    1cfe:	0b be       	out	0x3b, r0	; 59
    1d00:	0f 90       	pop	r0
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	0f 90       	pop	r0
    1d06:	1f 90       	pop	r1
    1d08:	18 95       	reti

00001d0a <__vector_2>:

SIGNAL(INT1_vect) {
    1d0a:	1f 92       	push	r1
    1d0c:	0f 92       	push	r0
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	0f 92       	push	r0
    1d12:	0b b6       	in	r0, 0x3b	; 59
    1d14:	0f 92       	push	r0
    1d16:	11 24       	eor	r1, r1
    1d18:	2f 93       	push	r18
    1d1a:	3f 93       	push	r19
    1d1c:	4f 93       	push	r20
    1d1e:	5f 93       	push	r21
    1d20:	6f 93       	push	r22
    1d22:	7f 93       	push	r23
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	af 93       	push	r26
    1d2a:	bf 93       	push	r27
    1d2c:	ef 93       	push	r30
    1d2e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    1d30:	80 91 1b 06 	lds	r24, 0x061B
    1d34:	90 91 1c 06 	lds	r25, 0x061C
    1d38:	89 2b       	or	r24, r25
    1d3a:	29 f0       	breq	.+10     	; 0x1d46 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    1d3c:	e0 91 1b 06 	lds	r30, 0x061B
    1d40:	f0 91 1c 06 	lds	r31, 0x061C
    1d44:	19 95       	eicall
}
    1d46:	ff 91       	pop	r31
    1d48:	ef 91       	pop	r30
    1d4a:	bf 91       	pop	r27
    1d4c:	af 91       	pop	r26
    1d4e:	9f 91       	pop	r25
    1d50:	8f 91       	pop	r24
    1d52:	7f 91       	pop	r23
    1d54:	6f 91       	pop	r22
    1d56:	5f 91       	pop	r21
    1d58:	4f 91       	pop	r20
    1d5a:	3f 91       	pop	r19
    1d5c:	2f 91       	pop	r18
    1d5e:	0f 90       	pop	r0
    1d60:	0b be       	out	0x3b, r0	; 59
    1d62:	0f 90       	pop	r0
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	0f 90       	pop	r0
    1d68:	1f 90       	pop	r1
    1d6a:	18 95       	reti

00001d6c <__vector_3>:

SIGNAL(INT2_vect) {
    1d6c:	1f 92       	push	r1
    1d6e:	0f 92       	push	r0
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	0f 92       	push	r0
    1d74:	0b b6       	in	r0, 0x3b	; 59
    1d76:	0f 92       	push	r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	2f 93       	push	r18
    1d7c:	3f 93       	push	r19
    1d7e:	4f 93       	push	r20
    1d80:	5f 93       	push	r21
    1d82:	6f 93       	push	r22
    1d84:	7f 93       	push	r23
    1d86:	8f 93       	push	r24
    1d88:	9f 93       	push	r25
    1d8a:	af 93       	push	r26
    1d8c:	bf 93       	push	r27
    1d8e:	ef 93       	push	r30
    1d90:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    1d92:	80 91 1d 06 	lds	r24, 0x061D
    1d96:	90 91 1e 06 	lds	r25, 0x061E
    1d9a:	89 2b       	or	r24, r25
    1d9c:	29 f0       	breq	.+10     	; 0x1da8 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    1d9e:	e0 91 1d 06 	lds	r30, 0x061D
    1da2:	f0 91 1e 06 	lds	r31, 0x061E
    1da6:	19 95       	eicall
}
    1da8:	ff 91       	pop	r31
    1daa:	ef 91       	pop	r30
    1dac:	bf 91       	pop	r27
    1dae:	af 91       	pop	r26
    1db0:	9f 91       	pop	r25
    1db2:	8f 91       	pop	r24
    1db4:	7f 91       	pop	r23
    1db6:	6f 91       	pop	r22
    1db8:	5f 91       	pop	r21
    1dba:	4f 91       	pop	r20
    1dbc:	3f 91       	pop	r19
    1dbe:	2f 91       	pop	r18
    1dc0:	0f 90       	pop	r0
    1dc2:	0b be       	out	0x3b, r0	; 59
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	0f 90       	pop	r0
    1dca:	1f 90       	pop	r1
    1dcc:	18 95       	reti

00001dce <__vector_4>:

SIGNAL(INT3_vect) {
    1dce:	1f 92       	push	r1
    1dd0:	0f 92       	push	r0
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	0f 92       	push	r0
    1dd6:	0b b6       	in	r0, 0x3b	; 59
    1dd8:	0f 92       	push	r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	2f 93       	push	r18
    1dde:	3f 93       	push	r19
    1de0:	4f 93       	push	r20
    1de2:	5f 93       	push	r21
    1de4:	6f 93       	push	r22
    1de6:	7f 93       	push	r23
    1de8:	8f 93       	push	r24
    1dea:	9f 93       	push	r25
    1dec:	af 93       	push	r26
    1dee:	bf 93       	push	r27
    1df0:	ef 93       	push	r30
    1df2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    1df4:	80 91 1f 06 	lds	r24, 0x061F
    1df8:	90 91 20 06 	lds	r25, 0x0620
    1dfc:	89 2b       	or	r24, r25
    1dfe:	29 f0       	breq	.+10     	; 0x1e0a <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    1e00:	e0 91 1f 06 	lds	r30, 0x061F
    1e04:	f0 91 20 06 	lds	r31, 0x0620
    1e08:	19 95       	eicall
}
    1e0a:	ff 91       	pop	r31
    1e0c:	ef 91       	pop	r30
    1e0e:	bf 91       	pop	r27
    1e10:	af 91       	pop	r26
    1e12:	9f 91       	pop	r25
    1e14:	8f 91       	pop	r24
    1e16:	7f 91       	pop	r23
    1e18:	6f 91       	pop	r22
    1e1a:	5f 91       	pop	r21
    1e1c:	4f 91       	pop	r20
    1e1e:	3f 91       	pop	r19
    1e20:	2f 91       	pop	r18
    1e22:	0f 90       	pop	r0
    1e24:	0b be       	out	0x3b, r0	; 59
    1e26:	0f 90       	pop	r0
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	0f 90       	pop	r0
    1e2c:	1f 90       	pop	r1
    1e2e:	18 95       	reti

00001e30 <__vector_5>:

SIGNAL(INT4_vect) {
    1e30:	1f 92       	push	r1
    1e32:	0f 92       	push	r0
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	0f 92       	push	r0
    1e38:	0b b6       	in	r0, 0x3b	; 59
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    1e56:	80 91 15 06 	lds	r24, 0x0615
    1e5a:	90 91 16 06 	lds	r25, 0x0616
    1e5e:	89 2b       	or	r24, r25
    1e60:	29 f0       	breq	.+10     	; 0x1e6c <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    1e62:	e0 91 15 06 	lds	r30, 0x0615
    1e66:	f0 91 16 06 	lds	r31, 0x0616
    1e6a:	19 95       	eicall
}
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	bf 91       	pop	r27
    1e72:	af 91       	pop	r26
    1e74:	9f 91       	pop	r25
    1e76:	8f 91       	pop	r24
    1e78:	7f 91       	pop	r23
    1e7a:	6f 91       	pop	r22
    1e7c:	5f 91       	pop	r21
    1e7e:	4f 91       	pop	r20
    1e80:	3f 91       	pop	r19
    1e82:	2f 91       	pop	r18
    1e84:	0f 90       	pop	r0
    1e86:	0b be       	out	0x3b, r0	; 59
    1e88:	0f 90       	pop	r0
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	0f 90       	pop	r0
    1e8e:	1f 90       	pop	r1
    1e90:	18 95       	reti

00001e92 <__vector_6>:

SIGNAL(INT5_vect) {
    1e92:	1f 92       	push	r1
    1e94:	0f 92       	push	r0
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	0f 92       	push	r0
    1e9a:	0b b6       	in	r0, 0x3b	; 59
    1e9c:	0f 92       	push	r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	2f 93       	push	r18
    1ea2:	3f 93       	push	r19
    1ea4:	4f 93       	push	r20
    1ea6:	5f 93       	push	r21
    1ea8:	6f 93       	push	r22
    1eaa:	7f 93       	push	r23
    1eac:	8f 93       	push	r24
    1eae:	9f 93       	push	r25
    1eb0:	af 93       	push	r26
    1eb2:	bf 93       	push	r27
    1eb4:	ef 93       	push	r30
    1eb6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    1eb8:	80 91 17 06 	lds	r24, 0x0617
    1ebc:	90 91 18 06 	lds	r25, 0x0618
    1ec0:	89 2b       	or	r24, r25
    1ec2:	29 f0       	breq	.+10     	; 0x1ece <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    1ec4:	e0 91 17 06 	lds	r30, 0x0617
    1ec8:	f0 91 18 06 	lds	r31, 0x0618
    1ecc:	19 95       	eicall
}
    1ece:	ff 91       	pop	r31
    1ed0:	ef 91       	pop	r30
    1ed2:	bf 91       	pop	r27
    1ed4:	af 91       	pop	r26
    1ed6:	9f 91       	pop	r25
    1ed8:	8f 91       	pop	r24
    1eda:	7f 91       	pop	r23
    1edc:	6f 91       	pop	r22
    1ede:	5f 91       	pop	r21
    1ee0:	4f 91       	pop	r20
    1ee2:	3f 91       	pop	r19
    1ee4:	2f 91       	pop	r18
    1ee6:	0f 90       	pop	r0
    1ee8:	0b be       	out	0x3b, r0	; 59
    1eea:	0f 90       	pop	r0
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	0f 90       	pop	r0
    1ef0:	1f 90       	pop	r1
    1ef2:	18 95       	reti

00001ef4 <__vector_7>:

SIGNAL(INT6_vect) {
    1ef4:	1f 92       	push	r1
    1ef6:	0f 92       	push	r0
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	0f 92       	push	r0
    1efc:	0b b6       	in	r0, 0x3b	; 59
    1efe:	0f 92       	push	r0
    1f00:	11 24       	eor	r1, r1
    1f02:	2f 93       	push	r18
    1f04:	3f 93       	push	r19
    1f06:	4f 93       	push	r20
    1f08:	5f 93       	push	r21
    1f0a:	6f 93       	push	r22
    1f0c:	7f 93       	push	r23
    1f0e:	8f 93       	push	r24
    1f10:	9f 93       	push	r25
    1f12:	af 93       	push	r26
    1f14:	bf 93       	push	r27
    1f16:	ef 93       	push	r30
    1f18:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    1f1a:	80 91 21 06 	lds	r24, 0x0621
    1f1e:	90 91 22 06 	lds	r25, 0x0622
    1f22:	89 2b       	or	r24, r25
    1f24:	29 f0       	breq	.+10     	; 0x1f30 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    1f26:	e0 91 21 06 	lds	r30, 0x0621
    1f2a:	f0 91 22 06 	lds	r31, 0x0622
    1f2e:	19 95       	eicall
}
    1f30:	ff 91       	pop	r31
    1f32:	ef 91       	pop	r30
    1f34:	bf 91       	pop	r27
    1f36:	af 91       	pop	r26
    1f38:	9f 91       	pop	r25
    1f3a:	8f 91       	pop	r24
    1f3c:	7f 91       	pop	r23
    1f3e:	6f 91       	pop	r22
    1f40:	5f 91       	pop	r21
    1f42:	4f 91       	pop	r20
    1f44:	3f 91       	pop	r19
    1f46:	2f 91       	pop	r18
    1f48:	0f 90       	pop	r0
    1f4a:	0b be       	out	0x3b, r0	; 59
    1f4c:	0f 90       	pop	r0
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	0f 90       	pop	r0
    1f52:	1f 90       	pop	r1
    1f54:	18 95       	reti

00001f56 <__vector_8>:

SIGNAL(INT7_vect) {
    1f56:	1f 92       	push	r1
    1f58:	0f 92       	push	r0
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	0f 92       	push	r0
    1f5e:	0b b6       	in	r0, 0x3b	; 59
    1f60:	0f 92       	push	r0
    1f62:	11 24       	eor	r1, r1
    1f64:	2f 93       	push	r18
    1f66:	3f 93       	push	r19
    1f68:	4f 93       	push	r20
    1f6a:	5f 93       	push	r21
    1f6c:	6f 93       	push	r22
    1f6e:	7f 93       	push	r23
    1f70:	8f 93       	push	r24
    1f72:	9f 93       	push	r25
    1f74:	af 93       	push	r26
    1f76:	bf 93       	push	r27
    1f78:	ef 93       	push	r30
    1f7a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    1f7c:	80 91 23 06 	lds	r24, 0x0623
    1f80:	90 91 24 06 	lds	r25, 0x0624
    1f84:	89 2b       	or	r24, r25
    1f86:	29 f0       	breq	.+10     	; 0x1f92 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    1f88:	e0 91 23 06 	lds	r30, 0x0623
    1f8c:	f0 91 24 06 	lds	r31, 0x0624
    1f90:	19 95       	eicall
}
    1f92:	ff 91       	pop	r31
    1f94:	ef 91       	pop	r30
    1f96:	bf 91       	pop	r27
    1f98:	af 91       	pop	r26
    1f9a:	9f 91       	pop	r25
    1f9c:	8f 91       	pop	r24
    1f9e:	7f 91       	pop	r23
    1fa0:	6f 91       	pop	r22
    1fa2:	5f 91       	pop	r21
    1fa4:	4f 91       	pop	r20
    1fa6:	3f 91       	pop	r19
    1fa8:	2f 91       	pop	r18
    1faa:	0f 90       	pop	r0
    1fac:	0b be       	out	0x3b, r0	; 59
    1fae:	0f 90       	pop	r0
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	0f 90       	pop	r0
    1fb4:	1f 90       	pop	r1
    1fb6:	18 95       	reti

00001fb8 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	ec 01       	movw	r28, r24
    1fc2:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1fc4:	6f 5f       	subi	r22, 0xFF	; 255
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	88 81       	ld	r24, Y
    1fca:	99 81       	ldd	r25, Y+1	; 0x01
    1fcc:	0e 94 8e 02 	call	0x51c	; 0x51c <realloc>
	if (newbuffer) {
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	11 f4       	brne	.+4      	; 0x1fd8 <_ZN6String12changeBufferEj+0x20>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	05 c0       	rjmp	.+10     	; 0x1fe2 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    1fd8:	99 83       	std	Y+1, r25	; 0x01
    1fda:	88 83       	st	Y, r24
		capacity = maxStrLen;
    1fdc:	1b 83       	std	Y+3, r17	; 0x03
    1fde:	0a 83       	std	Y+2, r16	; 0x02
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	08 95       	ret

00001fec <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    1ff2:	88 81       	ld	r24, Y
    1ff4:	99 81       	ldd	r25, Y+1	; 0x01
    1ff6:	89 2b       	or	r24, r25
    1ff8:	29 f0       	breq	.+10     	; 0x2004 <_ZN6String7reserveEj+0x18>
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffe:	86 17       	cp	r24, r22
    2000:	97 07       	cpc	r25, r23
    2002:	60 f4       	brcc	.+24     	; 0x201c <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    2004:	ce 01       	movw	r24, r28
    2006:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <_ZN6String12changeBufferEj>
    200a:	88 23       	and	r24, r24
    200c:	41 f0       	breq	.+16     	; 0x201e <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    200e:	8c 81       	ldd	r24, Y+4	; 0x04
    2010:	9d 81       	ldd	r25, Y+5	; 0x05
    2012:	89 2b       	or	r24, r25
    2014:	19 f4       	brne	.+6      	; 0x201c <_ZN6String7reserveEj+0x30>
    2016:	e8 81       	ld	r30, Y
    2018:	f9 81       	ldd	r31, Y+1	; 0x01
    201a:	10 82       	st	Z, r1
    201c:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	08 95       	ret

00002024 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    202a:	88 81       	ld	r24, Y
    202c:	99 81       	ldd	r25, Y+1	; 0x01
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	11 f0       	breq	.+4      	; 0x2036 <_ZN6String10invalidateEv+0x12>
    2032:	0e 94 36 02 	call	0x46c	; 0x46c <free>
	buffer = NULL;
    2036:	19 82       	std	Y+1, r1	; 0x01
    2038:	18 82       	st	Y, r1
	capacity = len = 0;
    203a:	1d 82       	std	Y+5, r1	; 0x05
    203c:	1c 82       	std	Y+4, r1	; 0x04
    203e:	1b 82       	std	Y+3, r1	; 0x03
    2040:	1a 82       	std	Y+2, r1	; 0x02
}
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	08 95       	ret

00002048 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	ec 01       	movw	r28, r24
    2056:	7b 01       	movw	r14, r22
    2058:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    205a:	ba 01       	movw	r22, r20
    205c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN6String7reserveEj>
    2060:	88 23       	and	r24, r24
    2062:	21 f4       	brne	.+8      	; 0x206c <_ZN6String4copyEPKcj+0x24>
		invalidate();
    2064:	ce 01       	movw	r24, r28
    2066:	0e 94 12 10 	call	0x2024	; 0x2024 <_ZN6String10invalidateEv>
    206a:	07 c0       	rjmp	.+14     	; 0x207a <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    206c:	1d 83       	std	Y+5, r17	; 0x05
    206e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2070:	88 81       	ld	r24, Y
    2072:	99 81       	ldd	r25, Y+1	; 0x01
    2074:	b7 01       	movw	r22, r14
    2076:	0e 94 75 03 	call	0x6ea	; 0x6ea <strcpy>
	return *this;
}
    207a:	ce 01       	movw	r24, r28
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	1f 91       	pop	r17
    2082:	0f 91       	pop	r16
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	08 95       	ret

0000208a <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2090:	19 82       	std	Y+1, r1	; 0x01
    2092:	18 82       	st	Y, r1
	capacity = 0;
    2094:	1b 82       	std	Y+3, r1	; 0x03
    2096:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    2098:	1d 82       	std	Y+5, r1	; 0x05
    209a:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    209c:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    209e:	61 15       	cp	r22, r1
    20a0:	71 05       	cpc	r23, r1
    20a2:	51 f0       	breq	.+20     	; 0x20b8 <_ZN6StringC1EPKc+0x2e>
    20a4:	db 01       	movw	r26, r22
    20a6:	0d 90       	ld	r0, X+
    20a8:	00 20       	and	r0, r0
    20aa:	e9 f7       	brne	.-6      	; 0x20a6 <_ZN6StringC1EPKc+0x1c>
    20ac:	11 97       	sbiw	r26, 0x01	; 1
    20ae:	a6 1b       	sub	r26, r22
    20b0:	b7 0b       	sbc	r27, r23
    20b2:	ad 01       	movw	r20, r26
    20b4:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN6String4copyEPKcj>
}
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

000020be <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    20be:	fc 01       	movw	r30, r24
{
	free(buffer);
    20c0:	80 81       	ld	r24, Z
    20c2:	91 81       	ldd	r25, Z+1	; 0x01
    20c4:	0e 94 36 02 	call	0x46c	; 0x46c <free>
}
    20c8:	08 95       	ret

000020ca <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    20ca:	1f 92       	push	r1
    20cc:	0f 92       	push	r0
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	0f 92       	push	r0
    20d2:	11 24       	eor	r1, r1
    20d4:	2f 93       	push	r18
    20d6:	3f 93       	push	r19
    20d8:	8f 93       	push	r24
    20da:	9f 93       	push	r25
    20dc:	af 93       	push	r26
    20de:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    20e0:	80 91 29 06 	lds	r24, 0x0629
    20e4:	90 91 2a 06 	lds	r25, 0x062A
    20e8:	a0 91 2b 06 	lds	r26, 0x062B
    20ec:	b0 91 2c 06 	lds	r27, 0x062C
	unsigned char f = timer0_fract;
    20f0:	30 91 2d 06 	lds	r19, 0x062D

	m += MILLIS_INC;
    20f4:	01 96       	adiw	r24, 0x01	; 1
    20f6:	a1 1d       	adc	r26, r1
    20f8:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    20fa:	23 2f       	mov	r18, r19
    20fc:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    20fe:	2d 37       	cpi	r18, 0x7D	; 125
    2100:	20 f0       	brcs	.+8      	; 0x210a <__vector_23+0x40>
		f -= FRACT_MAX;
    2102:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	a1 1d       	adc	r26, r1
    2108:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    210a:	20 93 2d 06 	sts	0x062D, r18
	timer0_millis = m;
    210e:	80 93 29 06 	sts	0x0629, r24
    2112:	90 93 2a 06 	sts	0x062A, r25
    2116:	a0 93 2b 06 	sts	0x062B, r26
    211a:	b0 93 2c 06 	sts	0x062C, r27
	timer0_overflow_count++;
    211e:	80 91 25 06 	lds	r24, 0x0625
    2122:	90 91 26 06 	lds	r25, 0x0626
    2126:	a0 91 27 06 	lds	r26, 0x0627
    212a:	b0 91 28 06 	lds	r27, 0x0628
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	a1 1d       	adc	r26, r1
    2132:	b1 1d       	adc	r27, r1
    2134:	80 93 25 06 	sts	0x0625, r24
    2138:	90 93 26 06 	sts	0x0626, r25
    213c:	a0 93 27 06 	sts	0x0627, r26
    2140:	b0 93 28 06 	sts	0x0628, r27
}
    2144:	bf 91       	pop	r27
    2146:	af 91       	pop	r26
    2148:	9f 91       	pop	r25
    214a:	8f 91       	pop	r24
    214c:	3f 91       	pop	r19
    214e:	2f 91       	pop	r18
    2150:	0f 90       	pop	r0
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	0f 90       	pop	r0
    2156:	1f 90       	pop	r1
    2158:	18 95       	reti

0000215a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    215a:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    215c:	f8 94       	cli
	m = timer0_millis;
    215e:	20 91 29 06 	lds	r18, 0x0629
    2162:	30 91 2a 06 	lds	r19, 0x062A
    2166:	40 91 2b 06 	lds	r20, 0x062B
    216a:	50 91 2c 06 	lds	r21, 0x062C
	SREG = oldSREG;
    216e:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2170:	b9 01       	movw	r22, r18
    2172:	ca 01       	movw	r24, r20
    2174:	08 95       	ret

00002176 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    2176:	9b 01       	movw	r18, r22
    2178:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    217a:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    217c:	f8 94       	cli
	m = timer0_overflow_count;
    217e:	80 91 25 06 	lds	r24, 0x0625
    2182:	90 91 26 06 	lds	r25, 0x0626
    2186:	a0 91 27 06 	lds	r26, 0x0627
    218a:	b0 91 28 06 	lds	r27, 0x0628
#if defined(TCNT0)
	t = TCNT0;
    218e:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2190:	a8 9b       	sbis	0x15, 0	; 21
    2192:	05 c0       	rjmp	.+10     	; 0x219e <delay+0x28>
    2194:	6f 3f       	cpi	r22, 0xFF	; 255
    2196:	19 f0       	breq	.+6      	; 0x219e <delay+0x28>
		m++;
    2198:	01 96       	adiw	r24, 0x01	; 1
    219a:	a1 1d       	adc	r26, r1
    219c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    219e:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    21a0:	ba 2f       	mov	r27, r26
    21a2:	a9 2f       	mov	r26, r25
    21a4:	98 2f       	mov	r25, r24
    21a6:	88 27       	eor	r24, r24
    21a8:	86 0f       	add	r24, r22
    21aa:	91 1d       	adc	r25, r1
    21ac:	a1 1d       	adc	r26, r1
    21ae:	b1 1d       	adc	r27, r1
    21b0:	62 e0       	ldi	r22, 0x02	; 2
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	aa 1f       	adc	r26, r26
    21b8:	bb 1f       	adc	r27, r27
    21ba:	6a 95       	dec	r22
    21bc:	d1 f7       	brne	.-12     	; 0x21b2 <delay+0x3c>
    21be:	bc 01       	movw	r22, r24
    21c0:	2d c0       	rjmp	.+90     	; 0x221c <__stack+0x1d>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    21c2:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    21c4:	f8 94       	cli
	m = timer0_overflow_count;
    21c6:	80 91 25 06 	lds	r24, 0x0625
    21ca:	90 91 26 06 	lds	r25, 0x0626
    21ce:	a0 91 27 06 	lds	r26, 0x0627
    21d2:	b0 91 28 06 	lds	r27, 0x0628
#if defined(TCNT0)
	t = TCNT0;
    21d6:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    21d8:	a8 9b       	sbis	0x15, 0	; 21
    21da:	05 c0       	rjmp	.+10     	; 0x21e6 <delay+0x70>
    21dc:	ef 3f       	cpi	r30, 0xFF	; 255
    21de:	19 f0       	breq	.+6      	; 0x21e6 <delay+0x70>
		m++;
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	a1 1d       	adc	r26, r1
    21e4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    21e6:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    21e8:	ba 2f       	mov	r27, r26
    21ea:	a9 2f       	mov	r26, r25
    21ec:	98 2f       	mov	r25, r24
    21ee:	88 27       	eor	r24, r24
    21f0:	8e 0f       	add	r24, r30
    21f2:	91 1d       	adc	r25, r1
    21f4:	a1 1d       	adc	r26, r1
    21f6:	b1 1d       	adc	r27, r1
    21f8:	e2 e0       	ldi	r30, 0x02	; 2
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	aa 1f       	adc	r26, r26
    2200:	bb 1f       	adc	r27, r27
    2202:	ea 95       	dec	r30
    2204:	d1 f7       	brne	.-12     	; 0x21fa <delay+0x84>
    2206:	86 1b       	sub	r24, r22
    2208:	97 0b       	sbc	r25, r23
    220a:	88 5e       	subi	r24, 0xE8	; 232
    220c:	93 40       	sbci	r25, 0x03	; 3
    220e:	c8 f2       	brcs	.-78     	; 0x21c2 <delay+0x4c>
			ms--;
    2210:	21 50       	subi	r18, 0x01	; 1
    2212:	30 40       	sbci	r19, 0x00	; 0
    2214:	40 40       	sbci	r20, 0x00	; 0
    2216:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    2218:	68 51       	subi	r22, 0x18	; 24
    221a:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    221c:	21 15       	cp	r18, r1
    221e:	31 05       	cpc	r19, r1
    2220:	41 05       	cpc	r20, r1
    2222:	51 05       	cpc	r21, r1
    2224:	71 f6       	brne	.-100    	; 0x21c2 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2226:	08 95       	ret

00002228 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2228:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    222a:	84 b5       	in	r24, 0x24	; 36
    222c:	82 60       	ori	r24, 0x02	; 2
    222e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2230:	84 b5       	in	r24, 0x24	; 36
    2232:	81 60       	ori	r24, 0x01	; 1
    2234:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2236:	85 b5       	in	r24, 0x25	; 37
    2238:	82 60       	ori	r24, 0x02	; 2
    223a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    223c:	85 b5       	in	r24, 0x25	; 37
    223e:	81 60       	ori	r24, 0x01	; 1
    2240:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2242:	ee e6       	ldi	r30, 0x6E	; 110
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	81 60       	ori	r24, 0x01	; 1
    224a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    224c:	e1 e8       	ldi	r30, 0x81	; 129
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2252:	80 81       	ld	r24, Z
    2254:	82 60       	ori	r24, 0x02	; 2
    2256:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2258:	80 81       	ld	r24, Z
    225a:	81 60       	ori	r24, 0x01	; 1
    225c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    225e:	e0 e8       	ldi	r30, 0x80	; 128
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	81 60       	ori	r24, 0x01	; 1
    2266:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2268:	e1 eb       	ldi	r30, 0xB1	; 177
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	84 60       	ori	r24, 0x04	; 4
    2270:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2272:	e0 eb       	ldi	r30, 0xB0	; 176
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	81 60       	ori	r24, 0x01	; 1
    227a:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    227c:	e1 e9       	ldi	r30, 0x91	; 145
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	82 60       	ori	r24, 0x02	; 2
    2284:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2286:	80 81       	ld	r24, Z
    2288:	81 60       	ori	r24, 0x01	; 1
    228a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    228c:	e0 e9       	ldi	r30, 0x90	; 144
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	80 83       	st	Z, r24
#endif
	
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2296:	e1 ea       	ldi	r30, 0xA1	; 161
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    22a0:	80 81       	ld	r24, Z
    22a2:	81 60       	ori	r24, 0x01	; 1
    22a4:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    22a6:	e0 ea       	ldi	r30, 0xA0	; 160
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	81 60       	ori	r24, 0x01	; 1
    22ae:	80 83       	st	Z, r24
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    22b0:	e1 e2       	ldi	r30, 0x21	; 33
    22b2:	f1 e0       	ldi	r31, 0x01	; 1
    22b4:	80 81       	ld	r24, Z
    22b6:	82 60       	ori	r24, 0x02	; 2
    22b8:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    22ba:	80 81       	ld	r24, Z
    22bc:	81 60       	ori	r24, 0x01	; 1
    22be:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    22c0:	e0 e2       	ldi	r30, 0x20	; 32
    22c2:	f1 e0       	ldi	r31, 0x01	; 1
    22c4:	80 81       	ld	r24, Z
    22c6:	81 60       	ori	r24, 0x01	; 1
    22c8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    22ca:	ea e7       	ldi	r30, 0x7A	; 122
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	84 60       	ori	r24, 0x04	; 4
    22d2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    22d4:	80 81       	ld	r24, Z
    22d6:	82 60       	ori	r24, 0x02	; 2
    22d8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    22da:	80 81       	ld	r24, Z
    22dc:	81 60       	ori	r24, 0x01	; 1
    22de:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    22e0:	80 81       	ld	r24, Z
    22e2:	80 68       	ori	r24, 0x80	; 128
    22e4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    22e6:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    22ea:	08 95       	ret

000022ec <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    22ec:	48 2f       	mov	r20, r24
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	ca 01       	movw	r24, r20
    22f2:	88 5d       	subi	r24, 0xD8	; 216
    22f4:	9d 4f       	sbci	r25, 0xFD	; 253
    22f6:	fc 01       	movw	r30, r24
    22f8:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    22fa:	4e 51       	subi	r20, 0x1E	; 30
    22fc:	5e 4f       	sbci	r21, 0xFE	; 254
    22fe:	fa 01       	movw	r30, r20
    2300:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    2302:	88 23       	and	r24, r24
    2304:	c1 f0       	breq	.+48     	; 0x2336 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2306:	e8 2f       	mov	r30, r24
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	ec 56       	subi	r30, 0x6C	; 108
    2310:	fe 4f       	sbci	r31, 0xFE	; 254
    2312:	a5 91       	lpm	r26, Z+
    2314:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    2316:	66 23       	and	r22, r22
    2318:	41 f4       	brne	.+16     	; 0x232a <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    231a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    231c:	f8 94       	cli
		*reg &= ~bit;
    231e:	8c 91       	ld	r24, X
    2320:	20 95       	com	r18
    2322:	82 23       	and	r24, r18
    2324:	8c 93       	st	X, r24
		SREG = oldSREG;
    2326:	9f bf       	out	0x3f, r25	; 63
    2328:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    232a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    232c:	f8 94       	cli
		*reg |= bit;
    232e:	8c 91       	ld	r24, X
    2330:	82 2b       	or	r24, r18
    2332:	8c 93       	st	X, r24
		SREG = oldSREG;
    2334:	9f bf       	out	0x3f, r25	; 63
    2336:	08 95       	ret

00002338 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2338:	89 30       	cpi	r24, 0x09	; 9
    233a:	09 f4       	brne	.+2      	; 0x233e <turnOffPWM+0x6>
    233c:	49 c0       	rjmp	.+146    	; 0x23d0 <turnOffPWM+0x98>
    233e:	8a 30       	cpi	r24, 0x0A	; 10
    2340:	a0 f4       	brcc	.+40     	; 0x236a <turnOffPWM+0x32>
    2342:	84 30       	cpi	r24, 0x04	; 4
    2344:	51 f1       	breq	.+84     	; 0x239a <turnOffPWM+0x62>
    2346:	85 30       	cpi	r24, 0x05	; 5
    2348:	40 f4       	brcc	.+16     	; 0x235a <turnOffPWM+0x22>
    234a:	82 30       	cpi	r24, 0x02	; 2
    234c:	79 f1       	breq	.+94     	; 0x23ac <turnOffPWM+0x74>
    234e:	83 30       	cpi	r24, 0x03	; 3
    2350:	00 f5       	brcc	.+64     	; 0x2392 <turnOffPWM+0x5a>
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	09 f0       	breq	.+2      	; 0x2358 <turnOffPWM+0x20>
    2356:	63 c0       	rjmp	.+198    	; 0x241e <turnOffPWM+0xe6>
    2358:	26 c0       	rjmp	.+76     	; 0x23a6 <turnOffPWM+0x6e>
    235a:	87 30       	cpi	r24, 0x07	; 7
    235c:	79 f1       	breq	.+94     	; 0x23bc <turnOffPWM+0x84>
    235e:	88 30       	cpi	r24, 0x08	; 8
    2360:	98 f5       	brcc	.+102    	; 0x23c8 <turnOffPWM+0x90>
    2362:	86 30       	cpi	r24, 0x06	; 6
    2364:	09 f0       	breq	.+2      	; 0x2368 <turnOffPWM+0x30>
    2366:	5b c0       	rjmp	.+182    	; 0x241e <turnOffPWM+0xe6>
    2368:	25 c0       	rjmp	.+74     	; 0x23b4 <turnOffPWM+0x7c>
    236a:	8d 30       	cpi	r24, 0x0D	; 13
    236c:	09 f4       	brne	.+2      	; 0x2370 <turnOffPWM+0x38>
    236e:	42 c0       	rjmp	.+132    	; 0x23f4 <turnOffPWM+0xbc>
    2370:	8e 30       	cpi	r24, 0x0E	; 14
    2372:	28 f4       	brcc	.+10     	; 0x237e <turnOffPWM+0x46>
    2374:	8b 30       	cpi	r24, 0x0B	; 11
    2376:	b1 f1       	breq	.+108    	; 0x23e4 <turnOffPWM+0xac>
    2378:	8c 30       	cpi	r24, 0x0C	; 12
    237a:	c0 f5       	brcc	.+112    	; 0x23ec <turnOffPWM+0xb4>
    237c:	2d c0       	rjmp	.+90     	; 0x23d8 <turnOffPWM+0xa0>
    237e:	80 31       	cpi	r24, 0x10	; 16
    2380:	09 f4       	brne	.+2      	; 0x2384 <turnOffPWM+0x4c>
    2382:	42 c0       	rjmp	.+132    	; 0x2408 <turnOffPWM+0xd0>
    2384:	81 31       	cpi	r24, 0x11	; 17
    2386:	09 f4       	brne	.+2      	; 0x238a <turnOffPWM+0x52>
    2388:	45 c0       	rjmp	.+138    	; 0x2414 <turnOffPWM+0xdc>
    238a:	8f 30       	cpi	r24, 0x0F	; 15
    238c:	09 f0       	breq	.+2      	; 0x2390 <turnOffPWM+0x58>
    238e:	47 c0       	rjmp	.+142    	; 0x241e <turnOffPWM+0xe6>
    2390:	37 c0       	rjmp	.+110    	; 0x2400 <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2392:	80 91 80 00 	lds	r24, 0x0080
    2396:	8f 77       	andi	r24, 0x7F	; 127
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    239a:	80 91 80 00 	lds	r24, 0x0080
    239e:	8f 7d       	andi	r24, 0xDF	; 223
    23a0:	80 93 80 00 	sts	0x0080, r24
    23a4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    23a6:	84 b5       	in	r24, 0x24	; 36
    23a8:	8f 77       	andi	r24, 0x7F	; 127
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    23ac:	84 b5       	in	r24, 0x24	; 36
    23ae:	8f 7d       	andi	r24, 0xDF	; 223
    23b0:	84 bd       	out	0x24, r24	; 36
    23b2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    23b4:	80 91 b0 00 	lds	r24, 0x00B0
    23b8:	8f 77       	andi	r24, 0x7F	; 127
    23ba:	03 c0       	rjmp	.+6      	; 0x23c2 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    23bc:	80 91 b0 00 	lds	r24, 0x00B0
    23c0:	8f 7d       	andi	r24, 0xDF	; 223
    23c2:	80 93 b0 00 	sts	0x00B0, r24
    23c6:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    23c8:	80 91 90 00 	lds	r24, 0x0090
    23cc:	8f 77       	andi	r24, 0x7F	; 127
    23ce:	07 c0       	rjmp	.+14     	; 0x23de <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    23d0:	80 91 90 00 	lds	r24, 0x0090
    23d4:	8f 7d       	andi	r24, 0xDF	; 223
    23d6:	03 c0       	rjmp	.+6      	; 0x23de <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    23d8:	80 91 90 00 	lds	r24, 0x0090
    23dc:	87 7f       	andi	r24, 0xF7	; 247
    23de:	80 93 90 00 	sts	0x0090, r24
    23e2:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    23e4:	80 91 a0 00 	lds	r24, 0x00A0
    23e8:	8f 77       	andi	r24, 0x7F	; 127
    23ea:	07 c0       	rjmp	.+14     	; 0x23fa <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    23ec:	80 91 a0 00 	lds	r24, 0x00A0
    23f0:	8f 7d       	andi	r24, 0xDF	; 223
    23f2:	03 c0       	rjmp	.+6      	; 0x23fa <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    23f4:	80 91 a0 00 	lds	r24, 0x00A0
    23f8:	87 7f       	andi	r24, 0xF7	; 247
    23fa:	80 93 a0 00 	sts	0x00A0, r24
    23fe:	08 95       	ret
		#endif
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2400:	80 91 20 01 	lds	r24, 0x0120
    2404:	8f 77       	andi	r24, 0x7F	; 127
    2406:	03 c0       	rjmp	.+6      	; 0x240e <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2408:	80 91 20 01 	lds	r24, 0x0120
    240c:	8f 7d       	andi	r24, 0xDF	; 223
    240e:	80 93 20 01 	sts	0x0120, r24
    2412:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2414:	80 91 20 01 	lds	r24, 0x0120
    2418:	87 7f       	andi	r24, 0xF7	; 247
    241a:	80 93 20 01 	sts	0x0120, r24
    241e:	08 95       	ret

00002420 <digitalRead>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    2424:	48 2f       	mov	r20, r24
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	ca 01       	movw	r24, r20
    242a:	82 59       	subi	r24, 0x92	; 146
    242c:	9d 4f       	sbci	r25, 0xFD	; 253
    242e:	fc 01       	movw	r30, r24
    2430:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2432:	ca 01       	movw	r24, r20
    2434:	88 5d       	subi	r24, 0xD8	; 216
    2436:	9d 4f       	sbci	r25, 0xFD	; 253
    2438:	fc 01       	movw	r30, r24
    243a:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    243c:	4e 51       	subi	r20, 0x1E	; 30
    243e:	5e 4f       	sbci	r21, 0xFE	; 254
    2440:	fa 01       	movw	r30, r20
    2442:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    2444:	11 23       	and	r17, r17
    2446:	19 f4       	brne	.+6      	; 0x244e <digitalRead+0x2e>
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	15 c0       	rjmp	.+42     	; 0x2478 <digitalRead+0x58>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    244e:	22 23       	and	r18, r18
    2450:	19 f0       	breq	.+6      	; 0x2458 <digitalRead+0x38>
    2452:	82 2f       	mov	r24, r18
    2454:	0e 94 9c 11 	call	0x2338	; 0x2338 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2458:	81 2f       	mov	r24, r17
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	88 53       	subi	r24, 0x38	; 56
    2462:	9e 4f       	sbci	r25, 0xFE	; 254
    2464:	fc 01       	movw	r30, r24
    2466:	a5 91       	lpm	r26, Z+
    2468:	b4 91       	lpm	r27, Z+
    246a:	8c 91       	ld	r24, X
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	80 23       	and	r24, r16
    2472:	11 f0       	breq	.+4      	; 0x2478 <digitalRead+0x58>
    2474:	21 e0       	ldi	r18, 0x01	; 1
    2476:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    2478:	c9 01       	movw	r24, r18
    247a:	1f 91       	pop	r17
    247c:	0f 91       	pop	r16
    247e:	08 95       	ret

00002480 <__divmodhi4>:
    2480:	97 fb       	bst	r25, 7
    2482:	09 2e       	mov	r0, r25
    2484:	07 26       	eor	r0, r23
    2486:	0a d0       	rcall	.+20     	; 0x249c <__divmodhi4_neg1>
    2488:	77 fd       	sbrc	r23, 7
    248a:	04 d0       	rcall	.+8      	; 0x2494 <__divmodhi4_neg2>
    248c:	2e d0       	rcall	.+92     	; 0x24ea <__udivmodhi4>
    248e:	06 d0       	rcall	.+12     	; 0x249c <__divmodhi4_neg1>
    2490:	00 20       	and	r0, r0
    2492:	1a f4       	brpl	.+6      	; 0x249a <__divmodhi4_exit>

00002494 <__divmodhi4_neg2>:
    2494:	70 95       	com	r23
    2496:	61 95       	neg	r22
    2498:	7f 4f       	sbci	r23, 0xFF	; 255

0000249a <__divmodhi4_exit>:
    249a:	08 95       	ret

0000249c <__divmodhi4_neg1>:
    249c:	f6 f7       	brtc	.-4      	; 0x249a <__divmodhi4_exit>
    249e:	90 95       	com	r25
    24a0:	81 95       	neg	r24
    24a2:	9f 4f       	sbci	r25, 0xFF	; 255
    24a4:	08 95       	ret

000024a6 <__udivmodsi4>:
    24a6:	a1 e2       	ldi	r26, 0x21	; 33
    24a8:	1a 2e       	mov	r1, r26
    24aa:	aa 1b       	sub	r26, r26
    24ac:	bb 1b       	sub	r27, r27
    24ae:	fd 01       	movw	r30, r26
    24b0:	0d c0       	rjmp	.+26     	; 0x24cc <__udivmodsi4_ep>

000024b2 <__udivmodsi4_loop>:
    24b2:	aa 1f       	adc	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	ee 1f       	adc	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	a2 17       	cp	r26, r18
    24bc:	b3 07       	cpc	r27, r19
    24be:	e4 07       	cpc	r30, r20
    24c0:	f5 07       	cpc	r31, r21
    24c2:	20 f0       	brcs	.+8      	; 0x24cc <__udivmodsi4_ep>
    24c4:	a2 1b       	sub	r26, r18
    24c6:	b3 0b       	sbc	r27, r19
    24c8:	e4 0b       	sbc	r30, r20
    24ca:	f5 0b       	sbc	r31, r21

000024cc <__udivmodsi4_ep>:
    24cc:	66 1f       	adc	r22, r22
    24ce:	77 1f       	adc	r23, r23
    24d0:	88 1f       	adc	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	1a 94       	dec	r1
    24d6:	69 f7       	brne	.-38     	; 0x24b2 <__udivmodsi4_loop>
    24d8:	60 95       	com	r22
    24da:	70 95       	com	r23
    24dc:	80 95       	com	r24
    24de:	90 95       	com	r25
    24e0:	9b 01       	movw	r18, r22
    24e2:	ac 01       	movw	r20, r24
    24e4:	bd 01       	movw	r22, r26
    24e6:	cf 01       	movw	r24, r30
    24e8:	08 95       	ret

000024ea <__udivmodhi4>:
    24ea:	aa 1b       	sub	r26, r26
    24ec:	bb 1b       	sub	r27, r27
    24ee:	51 e1       	ldi	r21, 0x11	; 17
    24f0:	07 c0       	rjmp	.+14     	; 0x2500 <__udivmodhi4_ep>

000024f2 <__udivmodhi4_loop>:
    24f2:	aa 1f       	adc	r26, r26
    24f4:	bb 1f       	adc	r27, r27
    24f6:	a6 17       	cp	r26, r22
    24f8:	b7 07       	cpc	r27, r23
    24fa:	10 f0       	brcs	.+4      	; 0x2500 <__udivmodhi4_ep>
    24fc:	a6 1b       	sub	r26, r22
    24fe:	b7 0b       	sbc	r27, r23

00002500 <__udivmodhi4_ep>:
    2500:	88 1f       	adc	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	5a 95       	dec	r21
    2506:	a9 f7       	brne	.-22     	; 0x24f2 <__udivmodhi4_loop>
    2508:	80 95       	com	r24
    250a:	90 95       	com	r25
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	08 95       	ret

00002512 <__tablejump2__>:
    2512:	ee 0f       	add	r30, r30
    2514:	ff 1f       	adc	r31, r31

00002516 <__tablejump__>:
    2516:	05 90       	lpm	r0, Z+
    2518:	f4 91       	lpm	r31, Z+
    251a:	e0 2d       	mov	r30, r0
    251c:	19 94       	eijmp

0000251e <__prologue_saves__>:
    251e:	2f 92       	push	r2
    2520:	3f 92       	push	r3
    2522:	4f 92       	push	r4
    2524:	5f 92       	push	r5
    2526:	6f 92       	push	r6
    2528:	7f 92       	push	r7
    252a:	8f 92       	push	r8
    252c:	9f 92       	push	r9
    252e:	af 92       	push	r10
    2530:	bf 92       	push	r11
    2532:	cf 92       	push	r12
    2534:	df 92       	push	r13
    2536:	ef 92       	push	r14
    2538:	ff 92       	push	r15
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	ca 1b       	sub	r28, r26
    2548:	db 0b       	sbc	r29, r27
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	19 94       	eijmp

00002556 <__epilogue_restores__>:
    2556:	2a 88       	ldd	r2, Y+18	; 0x12
    2558:	39 88       	ldd	r3, Y+17	; 0x11
    255a:	48 88       	ldd	r4, Y+16	; 0x10
    255c:	5f 84       	ldd	r5, Y+15	; 0x0f
    255e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2560:	7d 84       	ldd	r7, Y+13	; 0x0d
    2562:	8c 84       	ldd	r8, Y+12	; 0x0c
    2564:	9b 84       	ldd	r9, Y+11	; 0x0b
    2566:	aa 84       	ldd	r10, Y+10	; 0x0a
    2568:	b9 84       	ldd	r11, Y+9	; 0x09
    256a:	c8 84       	ldd	r12, Y+8	; 0x08
    256c:	df 80       	ldd	r13, Y+7	; 0x07
    256e:	ee 80       	ldd	r14, Y+6	; 0x06
    2570:	fd 80       	ldd	r15, Y+5	; 0x05
    2572:	0c 81       	ldd	r16, Y+4	; 0x04
    2574:	1b 81       	ldd	r17, Y+3	; 0x03
    2576:	aa 81       	ldd	r26, Y+2	; 0x02
    2578:	b9 81       	ldd	r27, Y+1	; 0x01
    257a:	ce 0f       	add	r28, r30
    257c:	d1 1d       	adc	r29, r1
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	ed 01       	movw	r28, r26
    258a:	08 95       	ret

0000258c <__do_global_dtors>:
    258c:	12 e0       	ldi	r17, 0x02	; 2
    258e:	c8 eb       	ldi	r28, 0xB8	; 184
    2590:	d2 e0       	ldi	r29, 0x02	; 2
    2592:	04 c0       	rjmp	.+8      	; 0x259c <.do_global_dtors_start>

00002594 <.do_global_dtors_loop>:
    2594:	fe 01       	movw	r30, r28
    2596:	0e 94 8b 12 	call	0x2516	; 0x2516 <__tablejump__>
    259a:	22 96       	adiw	r28, 0x02	; 2

0000259c <.do_global_dtors_start>:
    259c:	ca 3b       	cpi	r28, 0xBA	; 186
    259e:	d1 07       	cpc	r29, r17
    25a0:	c9 f7       	brne	.-14     	; 0x2594 <.do_global_dtors_loop>
    25a2:	f8 94       	cli

000025a4 <__stop_program>:
    25a4:	ff cf       	rjmp	.-2      	; 0x25a4 <__stop_program>
