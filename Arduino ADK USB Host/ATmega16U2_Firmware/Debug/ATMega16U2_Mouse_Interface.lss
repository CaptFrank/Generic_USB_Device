
ATMega16U2_Mouse_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000108e  00001122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  00800110  00800110  00001132  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001f22  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000740  00000000  00000000  00001f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b021  00000000  00000000  00002691  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f11  00000000  00000000  0000d6b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00016a1e  00000000  00000000  000105c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001344  00000000  00000000  00026fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00018643  00000000  00000000  00028328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007b84  00000000  00000000  0004096b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010a8  00000000  00000000  000484ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000aac7  00000000  00000000  00049597  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	af c0       	rjmp	.+350    	; 0x164 <__bad_interrupt>
       6:	00 00       	nop
       8:	ad c0       	rjmp	.+346    	; 0x164 <__bad_interrupt>
       a:	00 00       	nop
       c:	ab c0       	rjmp	.+342    	; 0x164 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c0       	rjmp	.+338    	; 0x164 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c0       	rjmp	.+334    	; 0x164 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c0       	rjmp	.+330    	; 0x164 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c0       	rjmp	.+326    	; 0x164 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c0       	rjmp	.+322    	; 0x164 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c0       	rjmp	.+318    	; 0x164 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c5       	rjmp	.+2934   	; 0xba0 <__vector_10>
      2a:	00 00       	nop
      2c:	9b c0       	rjmp	.+310    	; 0x164 <__bad_interrupt>
      2e:	00 00       	nop
      30:	99 c0       	rjmp	.+306    	; 0x164 <__bad_interrupt>
      32:	00 00       	nop
      34:	97 c0       	rjmp	.+302    	; 0x164 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c0       	rjmp	.+298    	; 0x164 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c0       	rjmp	.+294    	; 0x164 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c0       	rjmp	.+290    	; 0x164 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c0       	rjmp	.+286    	; 0x164 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c0       	rjmp	.+282    	; 0x164 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c0       	rjmp	.+278    	; 0x164 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c0       	rjmp	.+274    	; 0x164 <__bad_interrupt>
      52:	00 00       	nop
      54:	87 c0       	rjmp	.+270    	; 0x164 <__bad_interrupt>
      56:	00 00       	nop
      58:	85 c0       	rjmp	.+266    	; 0x164 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c0       	rjmp	.+262    	; 0x164 <__bad_interrupt>
      5e:	00 00       	nop
      60:	81 c0       	rjmp	.+258    	; 0x164 <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__vector_25>
      66:	00 00       	nop
      68:	7d c0       	rjmp	.+250    	; 0x164 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7b c0       	rjmp	.+246    	; 0x164 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c0       	rjmp	.+242    	; 0x164 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c0       	rjmp	.+238    	; 0x164 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c0       	rjmp	.+234    	; 0x164 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c0       	rjmp	.+230    	; 0x164 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c0       	rjmp	.+226    	; 0x164 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c0       	rjmp	.+222    	; 0x164 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c0       	rjmp	.+218    	; 0x164 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c0       	rjmp	.+214    	; 0x164 <__bad_interrupt>
      8e:	00 00       	nop
      90:	69 c0       	rjmp	.+210    	; 0x164 <__bad_interrupt>
      92:	00 00       	nop
      94:	67 c0       	rjmp	.+206    	; 0x164 <__bad_interrupt>
	...

00000098 <ProductString>:
      98:	14 03 4d 00 6f 00 75 00 73 00 65 00 20 00 30 00     ..M.o.u.s.e. .0.
      a8:	2e 00 31 00 00 00                                   ..1...

000000ae <ManufacturerString>:
      ae:	10 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
	...

000000c0 <LanguageString>:
      c0:	04 03 09 04                                         ....

000000c4 <ConfigurationDescriptor>:
      c4:	09 02 22 00 01 01 00 c0 64 09 04 00 00 01 03 01     ..".....d.......
      d4:	02 00 09 21 11 01 00 01 22 32 00 07 05 81 03 08     ...!...."2......
      e4:	00 0a                                               ..

000000e6 <DeviceDescriptor>:
      e6:	12 01 10 01 00 00 00 08 eb 03 41 20 00 00 01 02     ..........A ....
      f6:	00 01                                               ..

000000f8 <MouseReport>:
      f8:	05 01 09 02 a1 01 09 01 a1 00 95 03 75 01 05 09     ............u...
     108:	19 01 29 03 15 00 25 01 81 02 95 01 75 05 81 01     ..)...%.....u...
     118:	75 08 95 02 05 01 09 30 09 31 15 81 25 7f 81 06     u......0.1..%...
     128:	c0 c0                                               ..

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d0 e2       	ldi	r29, 0x20	; 32
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
     136:	11 e0       	ldi	r17, 0x01	; 1
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	ee e8       	ldi	r30, 0x8E	; 142
     13e:	f0 e1       	ldi	r31, 0x10	; 16
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0b bf       	out	0x3b, r16	; 59
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x14>
     146:	07 90       	elpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	a0 31       	cpi	r26, 0x10	; 16
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0x10>

00000150 <__do_clear_bss>:
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	a0 e1       	ldi	r26, 0x10	; 16
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	a8 3a       	cpi	r26, 0xA8	; 168
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
     160:	27 d0       	rcall	.+78     	; 0x1b0 <main>
     162:	93 c7       	rjmp	.+3878   	; 0x108a <_exit>

00000164 <__bad_interrupt>:
     164:	4d cf       	rjmp	.-358    	; 0x0 <__vectors>

00000166 <SetupHardware>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	84 b7       	in	r24, 0x34	; 52
     16c:	87 7f       	andi	r24, 0xF7	; 247
     16e:	84 bf       	out	0x34, r24	; 52
     170:	28 e1       	ldi	r18, 0x18	; 24
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	f8 94       	cli
     176:	20 93 60 00 	sts	0x0060, r18
     17a:	10 92 60 00 	sts	0x0060, r1
     17e:	0f be       	out	0x3f, r0	; 63
     180:	87 e6       	ldi	r24, 0x67	; 103
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	90 93 cd 00 	sts	0x00CD, r25
     188:	80 93 cc 00 	sts	0x00CC, r24
     18c:	86 e0       	ldi	r24, 0x06	; 6
     18e:	80 93 ca 00 	sts	0x00CA, r24
     192:	10 92 c8 00 	sts	0x00C8, r1
     196:	c9 ec       	ldi	r28, 0xC9	; 201
     198:	d0 e0       	ldi	r29, 0x00	; 0
     19a:	28 83       	st	Y, r18
     19c:	53 9a       	sbi	0x0a, 3	; 10
     19e:	5a 9a       	sbi	0x0b, 2	; 11
     1a0:	e4 d4       	rcall	.+2504   	; 0xb6a <USB_Init>
     1a2:	84 e0       	ldi	r24, 0x04	; 4
     1a4:	85 bd       	out	0x25, r24	; 37
     1a6:	88 e9       	ldi	r24, 0x98	; 152
     1a8:	88 83       	st	Y, r24
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <main>:
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <main+0x6>
     1b6:	1f 92       	push	r1
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	d4 df       	rcall	.-88     	; 0x166 <SetupHardware>
     1be:	2f b7       	in	r18, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	86 e1       	ldi	r24, 0x16	; 22
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	90 93 97 01 	sts	0x0197, r25
     1ca:	80 93 96 01 	sts	0x0196, r24
     1ce:	90 93 99 01 	sts	0x0199, r25
     1d2:	80 93 98 01 	sts	0x0198, r24
     1d6:	2f bf       	out	0x3f, r18	; 63
     1d8:	78 94       	sei
     1da:	0a e9       	ldi	r16, 0x9A	; 154
     1dc:	11 e0       	ldi	r17, 0x01	; 1
     1de:	6e 01       	movw	r12, r28
     1e0:	24 e0       	ldi	r18, 0x04	; 4
     1e2:	c2 0e       	add	r12, r18
     1e4:	d1 1c       	adc	r13, r1
     1e6:	0f 2e       	mov	r0, r31
     1e8:	f8 e9       	ldi	r31, 0x98	; 152
     1ea:	ef 2e       	mov	r14, r31
     1ec:	f1 e0       	ldi	r31, 0x01	; 1
     1ee:	ff 2e       	mov	r15, r31
     1f0:	f0 2d       	mov	r31, r0
     1f2:	4c 01       	movw	r8, r24
     1f4:	0f 2e       	mov	r0, r31
     1f6:	f0 e1       	ldi	r31, 0x10	; 16
     1f8:	af 2e       	mov	r10, r31
     1fa:	f1 e0       	ldi	r31, 0x01	; 1
     1fc:	bf 2e       	mov	r11, r31
     1fe:	f0 2d       	mov	r31, r0
     200:	0f 2e       	mov	r0, r31
     202:	f1 e1       	ldi	r31, 0x11	; 17
     204:	6f 2e       	mov	r6, r31
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	7f 2e       	mov	r7, r31
     20a:	f0 2d       	mov	r31, r0
     20c:	0f 2e       	mov	r0, r31
     20e:	f2 e1       	ldi	r31, 0x12	; 18
     210:	4f 2e       	mov	r4, r31
     212:	f1 e0       	ldi	r31, 0x01	; 1
     214:	5f 2e       	mov	r5, r31
     216:	f0 2d       	mov	r31, r0
     218:	9f b7       	in	r25, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	d8 01       	movw	r26, r16
     21e:	8c 91       	ld	r24, X
     220:	9f bf       	out	0x3f, r25	; 63
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	d0 f1       	brcs	.+116    	; 0x29a <main+0xea>
     226:	ae 01       	movw	r20, r28
     228:	4f 5f       	subi	r20, 0xFF	; 255
     22a:	5f 4f       	sbci	r21, 0xFF	; 255
     22c:	d7 01       	movw	r26, r14
     22e:	ed 91       	ld	r30, X+
     230:	fc 91       	ld	r31, X
     232:	11 97       	sbiw	r26, 0x01	; 1
     234:	81 91       	ld	r24, Z+
     236:	ed 93       	st	X+, r30
     238:	fc 93       	st	X, r31
     23a:	e6 59       	subi	r30, 0x96	; 150
     23c:	f1 40       	sbci	r31, 0x01	; 1
     23e:	19 f4       	brne	.+6      	; 0x246 <main+0x96>
     240:	f7 01       	movw	r30, r14
     242:	91 82       	std	Z+1, r9	; 0x01
     244:	80 82       	st	Z, r8
     246:	9f b7       	in	r25, 0x3f	; 63
     248:	f8 94       	cli
     24a:	d8 01       	movw	r26, r16
     24c:	2c 91       	ld	r18, X
     24e:	21 50       	subi	r18, 0x01	; 1
     250:	2c 93       	st	X, r18
     252:	9f bf       	out	0x3f, r25	; 63
     254:	fa 01       	movw	r30, r20
     256:	81 93       	st	Z+, r24
     258:	af 01       	movw	r20, r30
     25a:	ec 15       	cp	r30, r12
     25c:	fd 05       	cpc	r31, r13
     25e:	31 f7       	brne	.-52     	; 0x22c <main+0x7c>
     260:	d7 01       	movw	r26, r14
     262:	8d 91       	ld	r24, X+
     264:	9c 91       	ld	r25, X
     266:	11 97       	sbiw	r26, 0x01	; 1
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	8d 93       	st	X+, r24
     26c:	9c 93       	st	X, r25
     26e:	86 59       	subi	r24, 0x96	; 150
     270:	91 40       	sbci	r25, 0x01	; 1
     272:	19 f4       	brne	.+6      	; 0x27a <main+0xca>
     274:	f7 01       	movw	r30, r14
     276:	91 82       	std	Z+1, r9	; 0x01
     278:	80 82       	st	Z, r8
     27a:	8f b7       	in	r24, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	d8 01       	movw	r26, r16
     280:	9c 91       	ld	r25, X
     282:	91 50       	subi	r25, 0x01	; 1
     284:	9c 93       	st	X, r25
     286:	8f bf       	out	0x3f, r24	; 63
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	f5 01       	movw	r30, r10
     28c:	80 83       	st	Z, r24
     28e:	8a 81       	ldd	r24, Y+2	; 0x02
     290:	d3 01       	movw	r26, r6
     292:	8c 93       	st	X, r24
     294:	8b 81       	ldd	r24, Y+3	; 0x03
     296:	f2 01       	movw	r30, r4
     298:	80 83       	st	Z, r24
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	d3 d0       	rcall	.+422    	; 0x446 <HID_Device_USBTask>
     2a0:	bc d6       	rcall	.+3448   	; 0x101a <USB_USBTask>
     2a2:	ba cf       	rjmp	.-140    	; 0x218 <main+0x68>

000002a4 <EVENT_USB_Device_Connect>:
     2a4:	08 95       	ret

000002a6 <EVENT_USB_Device_Disconnect>:
     2a6:	08 95       	ret

000002a8 <EVENT_USB_Device_ConfigurationChanged>:
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	b6 d0       	rcall	.+364    	; 0x41a <HID_Device_ConfigureEndpoints>
     2ae:	e2 ee       	ldi	r30, 0xE2	; 226
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	84 60       	ori	r24, 0x04	; 4
     2b6:	80 83       	st	Z, r24
     2b8:	08 95       	ret

000002ba <EVENT_USB_Device_StartOfFrame>:
     2ba:	80 91 0e 01 	lds	r24, 0x010E
     2be:	90 91 0f 01 	lds	r25, 0x010F
     2c2:	00 97       	sbiw	r24, 0x00	; 0
     2c4:	29 f0       	breq	.+10     	; 0x2d0 <EVENT_USB_Device_StartOfFrame+0x16>
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	90 93 0f 01 	sts	0x010F, r25
     2cc:	80 93 0e 01 	sts	0x010E, r24
     2d0:	08 95       	ret

000002d2 <CALLBACK_HID_Device_CreateHIDReport>:
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	80 91 10 01 	lds	r24, 0x0110
     2da:	90 91 11 01 	lds	r25, 0x0111
     2de:	a0 91 12 01 	lds	r26, 0x0112
     2e2:	f9 01       	movw	r30, r18
     2e4:	80 83       	st	Z, r24
     2e6:	91 83       	std	Z+1, r25	; 0x01
     2e8:	a2 83       	std	Z+2, r26	; 0x02
     2ea:	83 e0       	ldi	r24, 0x03	; 3
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	f8 01       	movw	r30, r16
     2f0:	91 83       	std	Z+1, r25	; 0x01
     2f2:	80 83       	st	Z, r24
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	08 95       	ret

000002fc <__vector_25>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	0b b6       	in	r0, 0x3b	; 59
     308:	0f 92       	push	r0
     30a:	2f 93       	push	r18
     30c:	8f 93       	push	r24
     30e:	9f 93       	push	r25
     310:	af 93       	push	r26
     312:	bf 93       	push	r27
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     318:	90 91 ce 00 	lds	r25, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     31c:	80 91 9f 01 	lds	r24, 0x019F
     320:	84 30       	cpi	r24, 0x04	; 4
     322:	d9 f4       	brne	.+54     	; 0x35a <__vector_25+0x5e>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     324:	e6 e9       	ldi	r30, 0x96	; 150
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	a0 81       	ld	r26, Z
     32a:	b1 81       	ldd	r27, Z+1	; 0x01
     32c:	9c 93       	st	X, r25
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     32e:	80 81       	ld	r24, Z
     330:	91 81       	ldd	r25, Z+1	; 0x01
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	91 83       	std	Z+1, r25	; 0x01
     336:	80 83       	st	Z, r24
     338:	8e 17       	cp	r24, r30
     33a:	9f 07       	cpc	r25, r31
     33c:	31 f4       	brne	.+12     	; 0x34a <__vector_25+0x4e>
			  Buffer->In = Buffer->Buffer;
     33e:	86 e1       	ldi	r24, 0x16	; 22
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	90 93 97 01 	sts	0x0197, r25
     346:	80 93 96 01 	sts	0x0196, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     34a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     34c:	f8 94       	cli
			{
				Buffer->Count++;
     34e:	ea e9       	ldi	r30, 0x9A	; 154
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	90 81       	ld	r25, Z
     354:	9f 5f       	subi	r25, 0xFF	; 255
     356:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     358:	8f bf       	out	0x3f, r24	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	bf 91       	pop	r27
     360:	af 91       	pop	r26
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	2f 91       	pop	r18
     368:	0f 90       	pop	r0
     36a:	0b be       	out	0x3b, r0	; 59
     36c:	0f 90       	pop	r0
     36e:	0f be       	out	0x3f, r0	; 63
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <CALLBACK_USB_GetDescriptor>:
			break;
	}
	
	*DescriptorAddress = Address;		
	return Size;
}
     376:	29 2f       	mov	r18, r25
     378:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     37a:	23 30       	cpi	r18, 0x03	; 3
     37c:	31 05       	cpc	r19, r1
     37e:	c9 f0       	breq	.+50     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x3c>
     380:	44 f4       	brge	.+16     	; 0x392 <CALLBACK_USB_GetDescriptor+0x1c>
     382:	21 30       	cpi	r18, 0x01	; 1
     384:	31 05       	cpc	r19, r1
     386:	09 f4       	brne	.+2      	; 0x38a <CALLBACK_USB_GetDescriptor+0x14>
     388:	39 c0       	rjmp	.+114    	; 0x3fc <CALLBACK_USB_GetDescriptor+0x86>
     38a:	22 30       	cpi	r18, 0x02	; 2
     38c:	31 05       	cpc	r19, r1
     38e:	39 f4       	brne	.+14     	; 0x39e <CALLBACK_USB_GetDescriptor+0x28>
     390:	0b c0       	rjmp	.+22     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x32>
     392:	21 32       	cpi	r18, 0x21	; 33
     394:	31 05       	cpc	r19, r1
     396:	41 f1       	breq	.+80     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x72>
     398:	22 32       	cpi	r18, 0x22	; 34
     39a:	31 05       	cpc	r19, r1
     39c:	51 f1       	breq	.+84     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	33 c0       	rjmp	.+102    	; 0x40e <CALLBACK_USB_GetDescriptor+0x98>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3a8:	22 e2       	ldi	r18, 0x22	; 34
     3aa:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = (void*)&ConfigurationDescriptor;
     3ac:	84 ec       	ldi	r24, 0xC4	; 196
     3ae:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3b0:	2e c0       	rjmp	.+92     	; 0x40e <CALLBACK_USB_GetDescriptor+0x98>
			break;
	}
	
	*DescriptorAddress = Address;		
	return Size;
}
     3b2:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	91 05       	cpc	r25, r1
     3b8:	59 f0       	breq	.+22     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x5a>
     3ba:	82 30       	cpi	r24, 0x02	; 2
     3bc:	91 05       	cpc	r25, r1
     3be:	71 f0       	breq	.+28     	; 0x3dc <CALLBACK_USB_GetDescriptor+0x66>
     3c0:	89 2b       	or	r24, r25
     3c2:	09 f5       	brne	.+66     	; 0x406 <CALLBACK_USB_GetDescriptor+0x90>
			{
				case 0x00:
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3c4:	e0 ec       	ldi	r30, 0xC0	; 192
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	24 91       	lpm	r18, Z
     3ca:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = (void*)&LanguageString;
     3cc:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     3ce:	1f c0       	rjmp	.+62     	; 0x40e <CALLBACK_USB_GetDescriptor+0x98>
				case 0x01:
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3d0:	ee ea       	ldi	r30, 0xAE	; 174
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	24 91       	lpm	r18, Z
     3d6:	30 e0       	ldi	r19, 0x00	; 0
				case 0x00:
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01:
					Address = (void*)&ManufacturerString;
     3d8:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     3da:	19 c0       	rjmp	.+50     	; 0x40e <CALLBACK_USB_GetDescriptor+0x98>
				case 0x02:
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3dc:	e8 e9       	ldi	r30, 0x98	; 152
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	24 91       	lpm	r18, Z
     3e2:	30 e0       	ldi	r19, 0x00	; 0
				case 0x01:
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = (void*)&ProductString;
     3e4:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     3e6:	13 c0       	rjmp	.+38     	; 0x40e <CALLBACK_USB_GetDescriptor+0x98>
			}
			
			break;
		case HID_DTYPE_HID: //added HID
			Address = (void*)&ConfigurationDescriptor.HID_DeviceHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t); // added HID
     3e8:	29 e0       	ldi	r18, 0x09	; 9
     3ea:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}
			
			break;
		case HID_DTYPE_HID: //added HID
			Address = (void*)&ConfigurationDescriptor.HID_DeviceHID;
     3ec:	86 ed       	ldi	r24, 0xD6	; 214
     3ee:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t); // added HID
			break;
     3f0:	0e c0       	rjmp	.+28     	; 0x40e <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report: //added HID 
			Address = (void*)&MouseReport;
			Size    = sizeof(MouseReport);
     3f2:	22 e3       	ldi	r18, 0x32	; 50
     3f4:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID: //added HID
			Address = (void*)&ConfigurationDescriptor.HID_DeviceHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t); // added HID
			break;
		case HID_DTYPE_Report: //added HID 
			Address = (void*)&MouseReport;
     3f6:	88 ef       	ldi	r24, 0xF8	; 248
     3f8:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(MouseReport);
			break;
     3fa:	09 c0       	rjmp	.+18     	; 0x40e <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3fc:	22 e1       	ldi	r18, 0x12	; 18
     3fe:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
     400:	86 ee       	ldi	r24, 0xE6	; 230
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	04 c0       	rjmp	.+8      	; 0x40e <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
			Address = (void*)&MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}
	
	*DescriptorAddress = Address;		
     40e:	fa 01       	movw	r30, r20
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	80 83       	st	Z, r24
	return Size;
}
     414:	82 2f       	mov	r24, r18
     416:	93 2f       	mov	r25, r19
     418:	08 95       	ret

0000041a <HID_Device_ConfigureEndpoints>:
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     41a:	9c 01       	movw	r18, r24
     41c:	27 5f       	subi	r18, 0xF7	; 247
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	e2 2f       	mov	r30, r18
     422:	f3 2f       	mov	r31, r19
     424:	27 e0       	ldi	r18, 0x07	; 7
     426:	df 01       	movw	r26, r30
     428:	1d 92       	st	X+, r1
     42a:	2a 95       	dec	r18
     42c:	e9 f7       	brne	.-6      	; 0x428 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	fc 01       	movw	r30, r24
     432:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     434:	24 ef       	ldi	r18, 0xF4	; 244
     436:	31 e0       	ldi	r19, 0x01	; 1
     438:	35 87       	std	Z+13, r19	; 0x0d
     43a:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     43c:	23 e0       	ldi	r18, 0x03	; 3
     43e:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	01 96       	adiw	r24, 0x01	; 1
	  return false;

	return true;
}
     444:	80 c2       	rjmp	.+1280   	; 0x946 <Endpoint_ConfigureEndpointTable>

00000446 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     446:	4f 92       	push	r4
     448:	5f 92       	push	r5
     44a:	6f 92       	push	r6
     44c:	7f 92       	push	r7
     44e:	8f 92       	push	r8
     450:	9f 92       	push	r9
     452:	af 92       	push	r10
     454:	bf 92       	push	r11
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	00 d0       	rcall	.+0      	; 0x468 <HID_Device_USBTask+0x22>
     468:	1f 92       	push	r1
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     470:	cd b6       	in	r12, 0x3d	; 61
     472:	de b6       	in	r13, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     474:	80 91 9f 01 	lds	r24, 0x019F
     478:	84 30       	cpi	r24, 0x04	; 4
     47a:	09 f0       	breq	.+2      	; 0x47e <HID_Device_USBTask+0x38>
     47c:	9a c0       	rjmp	.+308    	; 0x5b2 <HID_Device_USBTask+0x16c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     47e:	80 91 e4 00 	lds	r24, 0x00E4
     482:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     486:	f7 01       	movw	r30, r14
     488:	22 85       	ldd	r18, Z+10	; 0x0a
     48a:	33 85       	ldd	r19, Z+11	; 0x0b
     48c:	28 17       	cp	r18, r24
     48e:	39 07       	cpc	r19, r25
     490:	09 f4       	brne	.+2      	; 0x494 <HID_Device_USBTask+0x4e>
     492:	8f c0       	rjmp	.+286    	; 0x5b2 <HID_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     494:	81 81       	ldd	r24, Z+1	; 0x01
     496:	8f 70       	andi	r24, 0x0F	; 15
     498:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     49c:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     4a0:	85 ff       	sbrs	r24, 5
     4a2:	87 c0       	rjmp	.+270    	; 0x5b2 <HID_Device_USBTask+0x16c>
     4a4:	6d b6       	in	r6, 0x3d	; 61
     4a6:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     4a8:	40 85       	ldd	r20, Z+8	; 0x08
     4aa:	8d b7       	in	r24, 0x3d	; 61
     4ac:	9e b7       	in	r25, 0x3e	; 62
     4ae:	84 1b       	sub	r24, r20
     4b0:	91 09       	sbc	r25, r1
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	9e bf       	out	0x3e, r25	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	8d bf       	out	0x3d, r24	; 61
     4bc:	ad b6       	in	r10, 0x3d	; 61
     4be:	be b6       	in	r11, 0x3e	; 62
     4c0:	e1 e0       	ldi	r30, 0x01	; 1
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	ae 0e       	add	r10, r30
     4c6:	bf 1e       	adc	r11, r31
		uint8_t  ReportID     = 0;
     4c8:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     4ca:	1a 82       	std	Y+2, r1	; 0x02
     4cc:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     4ce:	8a 2c       	mov	r8, r10
     4d0:	9b 2c       	mov	r9, r11
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	8a 2d       	mov	r24, r10
     4da:	9b 2d       	mov	r25, r11
     4dc:	cf d5       	rcall	.+2974   	; 0x107c <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     4de:	8e 01       	movw	r16, r28
     4e0:	0f 5f       	subi	r16, 0xFF	; 255
     4e2:	1f 4f       	sbci	r17, 0xFF	; 255
     4e4:	2a 2d       	mov	r18, r10
     4e6:	3b 2d       	mov	r19, r11
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	be 01       	movw	r22, r28
     4ec:	6d 5f       	subi	r22, 0xFD	; 253
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	c7 01       	movw	r24, r14
     4f2:	ef de       	rcall	.-546    	; 0x2d2 <CALLBACK_HID_Device_CreateHIDReport>
     4f4:	48 2e       	mov	r4, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     4f6:	f7 01       	movw	r30, r14
     4f8:	84 85       	ldd	r24, Z+12	; 0x0c
     4fa:	95 85       	ldd	r25, Z+13	; 0x0d
     4fc:	89 2b       	or	r24, r25
     4fe:	49 f0       	breq	.+18     	; 0x512 <HID_Device_USBTask+0xcc>
     500:	01 e0       	ldi	r16, 0x01	; 1
     502:	10 e0       	ldi	r17, 0x00	; 0
     504:	86 85       	ldd	r24, Z+14	; 0x0e
     506:	97 85       	ldd	r25, Z+15	; 0x0f
     508:	89 2b       	or	r24, r25
     50a:	29 f0       	breq	.+10     	; 0x516 <HID_Device_USBTask+0xd0>
     50c:	00 e0       	ldi	r16, 0x00	; 0
     50e:	10 e0       	ldi	r17, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <HID_Device_USBTask+0xd0>
     512:	00 e0       	ldi	r16, 0x00	; 0
     514:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     516:	f7 01       	movw	r30, r14
     518:	a6 80       	ldd	r10, Z+6	; 0x06
     51a:	b7 80       	ldd	r11, Z+7	; 0x07
     51c:	a1 14       	cp	r10, r1
     51e:	b1 04       	cpc	r11, r1
     520:	b1 f0       	breq	.+44     	; 0x54e <HID_Device_USBTask+0x108>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     522:	49 81       	ldd	r20, Y+1	; 0x01
     524:	5a 81       	ldd	r21, Y+2	; 0x02
     526:	b5 01       	movw	r22, r10
     528:	88 2d       	mov	r24, r8
     52a:	99 2d       	mov	r25, r9
     52c:	91 d5       	rcall	.+2850   	; 0x1050 <memcmp>
     52e:	28 2f       	mov	r18, r24
     530:	39 2f       	mov	r19, r25
     532:	55 24       	eor	r5, r5
     534:	53 94       	inc	r5
     536:	23 2b       	or	r18, r19
     538:	09 f4       	brne	.+2      	; 0x53c <HID_Device_USBTask+0xf6>
     53a:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     53c:	f7 01       	movw	r30, r14
     53e:	40 85       	ldd	r20, Z+8	; 0x08
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	68 2d       	mov	r22, r8
     544:	79 2d       	mov	r23, r9
     546:	8a 2d       	mov	r24, r10
     548:	9b 2d       	mov	r25, r11
     54a:	8f d5       	rcall	.+2846   	; 0x106a <memcpy>
     54c:	01 c0       	rjmp	.+2      	; 0x550 <HID_Device_USBTask+0x10a>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     54e:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	9a 81       	ldd	r25, Y+2	; 0x02
     554:	89 2b       	or	r24, r25
     556:	f9 f0       	breq	.+62     	; 0x596 <HID_Device_USBTask+0x150>
     558:	41 10       	cpse	r4, r1
     55a:	04 c0       	rjmp	.+8      	; 0x564 <HID_Device_USBTask+0x11e>
     55c:	51 10       	cpse	r5, r1
     55e:	02 c0       	rjmp	.+4      	; 0x564 <HID_Device_USBTask+0x11e>
     560:	00 ff       	sbrs	r16, 0
     562:	19 c0       	rjmp	.+50     	; 0x596 <HID_Device_USBTask+0x150>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     564:	f7 01       	movw	r30, r14
     566:	84 85       	ldd	r24, Z+12	; 0x0c
     568:	95 85       	ldd	r25, Z+13	; 0x0d
     56a:	97 87       	std	Z+15, r25	; 0x0f
     56c:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     56e:	81 81       	ldd	r24, Z+1	; 0x01
     570:	8f 70       	andi	r24, 0x0F	; 15
     572:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     57a:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     57e:	69 81       	ldd	r22, Y+1	; 0x01
     580:	7a 81       	ldd	r23, Y+2	; 0x02
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	88 2d       	mov	r24, r8
     588:	99 2d       	mov	r25, r9
     58a:	2c d0       	rcall	.+88     	; 0x5e4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     58c:	e8 ee       	ldi	r30, 0xE8	; 232
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	8e 77       	andi	r24, 0x7E	; 126
     594:	80 83       	st	Z, r24
     596:	80 91 e4 00 	lds	r24, 0x00E4
     59a:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     59e:	f7 01       	movw	r30, r14
     5a0:	93 87       	std	Z+11, r25	; 0x0b
     5a2:	82 87       	std	Z+10, r24	; 0x0a
     5a4:	86 2d       	mov	r24, r6
     5a6:	97 2d       	mov	r25, r7
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	9e bf       	out	0x3e, r25	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	8d bf       	out	0x3d, r24	; 61
	}
}
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de be       	out	0x3e, r13	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd be       	out	0x3d, r12	; 61
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	bf 90       	pop	r11
     5d4:	af 90       	pop	r10
     5d6:	9f 90       	pop	r9
     5d8:	8f 90       	pop	r8
     5da:	7f 90       	pop	r7
     5dc:	6f 90       	pop	r6
     5de:	5f 90       	pop	r5
     5e0:	4f 90       	pop	r4
     5e2:	08 95       	ret

000005e4 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5e4:	7f 92       	push	r7
     5e6:	8f 92       	push	r8
     5e8:	9f 92       	push	r9
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	7c 01       	movw	r14, r24
     600:	eb 01       	movw	r28, r22
     602:	5a 01       	movw	r10, r20
     604:	2c d2       	rcall	.+1112   	; 0xa5e <Endpoint_WaitUntilReady>
     606:	78 2e       	mov	r7, r24
     608:	81 11       	cpse	r24, r1
     60a:	3f c0       	rjmp	.+126    	; 0x68a <Endpoint_Write_Stream_LE+0xa6>
     60c:	a1 14       	cp	r10, r1
     60e:	b1 04       	cpc	r11, r1
     610:	39 f0       	breq	.+14     	; 0x620 <Endpoint_Write_Stream_LE+0x3c>
     612:	f5 01       	movw	r30, r10
     614:	20 81       	ld	r18, Z
     616:	31 81       	ldd	r19, Z+1	; 0x01
     618:	c2 1b       	sub	r28, r18
     61a:	d3 0b       	sbc	r29, r19
     61c:	e2 0e       	add	r14, r18
     61e:	f3 1e       	adc	r15, r19
     620:	20 97       	sbiw	r28, 0x00	; 0
     622:	99 f1       	breq	.+102    	; 0x68a <Endpoint_Write_Stream_LE+0xa6>
     624:	00 e0       	ldi	r16, 0x00	; 0
     626:	10 e0       	ldi	r17, 0x00	; 0
     628:	0f 2e       	mov	r0, r31
     62a:	f8 ee       	ldi	r31, 0xE8	; 232
     62c:	8f 2e       	mov	r8, r31
     62e:	91 2c       	mov	r9, r1
     630:	f0 2d       	mov	r31, r0
     632:	0f 2e       	mov	r0, r31
     634:	f1 ef       	ldi	r31, 0xF1	; 241
     636:	cf 2e       	mov	r12, r31
     638:	d1 2c       	mov	r13, r1
     63a:	f0 2d       	mov	r31, r0
     63c:	f4 01       	movw	r30, r8
     63e:	90 81       	ld	r25, Z
     640:	95 fd       	sbrc	r25, 5
     642:	17 c0       	rjmp	.+46     	; 0x672 <Endpoint_Write_Stream_LE+0x8e>
     644:	80 81       	ld	r24, Z
     646:	8e 77       	andi	r24, 0x7E	; 126
     648:	80 83       	st	Z, r24
     64a:	e7 d4       	rcall	.+2510   	; 0x101a <USB_USBTask>
     64c:	a1 14       	cp	r10, r1
     64e:	b1 04       	cpc	r11, r1
     650:	61 f0       	breq	.+24     	; 0x66a <Endpoint_Write_Stream_LE+0x86>
     652:	f5 01       	movw	r30, r10
     654:	80 81       	ld	r24, Z
     656:	91 81       	ldd	r25, Z+1	; 0x01
     658:	08 0f       	add	r16, r24
     65a:	19 1f       	adc	r17, r25
     65c:	11 83       	std	Z+1, r17	; 0x01
     65e:	00 83       	st	Z, r16
     660:	0f 2e       	mov	r0, r31
     662:	f5 e0       	ldi	r31, 0x05	; 5
     664:	7f 2e       	mov	r7, r31
     666:	f0 2d       	mov	r31, r0
     668:	10 c0       	rjmp	.+32     	; 0x68a <Endpoint_Write_Stream_LE+0xa6>
     66a:	f9 d1       	rcall	.+1010   	; 0xa5e <Endpoint_WaitUntilReady>
     66c:	88 23       	and	r24, r24
     66e:	49 f0       	breq	.+18     	; 0x682 <Endpoint_Write_Stream_LE+0x9e>
     670:	0b c0       	rjmp	.+22     	; 0x688 <Endpoint_Write_Stream_LE+0xa4>
     672:	f7 01       	movw	r30, r14
     674:	81 91       	ld	r24, Z+
     676:	7f 01       	movw	r14, r30
     678:	f6 01       	movw	r30, r12
     67a:	80 83       	st	Z, r24
     67c:	21 97       	sbiw	r28, 0x01	; 1
     67e:	0f 5f       	subi	r16, 0xFF	; 255
     680:	1f 4f       	sbci	r17, 0xFF	; 255
     682:	20 97       	sbiw	r28, 0x00	; 0
     684:	d9 f6       	brne	.-74     	; 0x63c <Endpoint_Write_Stream_LE+0x58>
     686:	01 c0       	rjmp	.+2      	; 0x68a <Endpoint_Write_Stream_LE+0xa6>
     688:	78 2e       	mov	r7, r24
     68a:	87 2d       	mov	r24, r7
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	9f 90       	pop	r9
     6a2:	8f 90       	pop	r8
     6a4:	7f 90       	pop	r7
     6a6:	08 95       	ret

000006a8 <Endpoint_Write_Control_Stream_LE>:
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	20 91 a6 01 	lds	r18, 0x01A6
     6b4:	30 91 a7 01 	lds	r19, 0x01A7
     6b8:	26 17       	cp	r18, r22
     6ba:	37 07       	cpc	r19, r23
     6bc:	58 f0       	brcs	.+22     	; 0x6d4 <Endpoint_Write_Control_Stream_LE+0x2c>
     6be:	61 15       	cp	r22, r1
     6c0:	71 05       	cpc	r23, r1
     6c2:	39 f4       	brne	.+14     	; 0x6d2 <Endpoint_Write_Control_Stream_LE+0x2a>
     6c4:	e8 ee       	ldi	r30, 0xE8	; 232
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	20 81       	ld	r18, Z
     6ca:	2e 77       	andi	r18, 0x7E	; 126
     6cc:	20 83       	st	Z, r18
     6ce:	9b 01       	movw	r18, r22
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <Endpoint_Write_Control_Stream_LE+0x2c>
     6d2:	9b 01       	movw	r18, r22
     6d4:	e0 e0       	ldi	r30, 0x00	; 0
     6d6:	a8 ee       	ldi	r26, 0xE8	; 232
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	62 ef       	ldi	r22, 0xF2	; 242
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	11 e0       	ldi	r17, 0x01	; 1
     6e0:	00 e0       	ldi	r16, 0x00	; 0
     6e2:	c1 ef       	ldi	r28, 0xF1	; 241
     6e4:	d0 e0       	ldi	r29, 0x00	; 0
     6e6:	32 c0       	rjmp	.+100    	; 0x74c <Endpoint_Write_Control_Stream_LE+0xa4>
     6e8:	40 91 9f 01 	lds	r20, 0x019F
     6ec:	44 23       	and	r20, r20
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <Endpoint_Write_Control_Stream_LE+0x4a>
     6f0:	41 c0       	rjmp	.+130    	; 0x774 <Endpoint_Write_Control_Stream_LE+0xcc>
     6f2:	45 30       	cpi	r20, 0x05	; 5
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <Endpoint_Write_Control_Stream_LE+0x50>
     6f6:	40 c0       	rjmp	.+128    	; 0x778 <Endpoint_Write_Control_Stream_LE+0xd0>
     6f8:	4c 91       	ld	r20, X
     6fa:	43 fd       	sbrc	r20, 3
     6fc:	3f c0       	rjmp	.+126    	; 0x77c <Endpoint_Write_Control_Stream_LE+0xd4>
     6fe:	4c 91       	ld	r20, X
     700:	42 fd       	sbrc	r20, 2
     702:	31 c0       	rjmp	.+98     	; 0x766 <Endpoint_Write_Control_Stream_LE+0xbe>
     704:	4c 91       	ld	r20, X
     706:	40 ff       	sbrs	r20, 0
     708:	21 c0       	rjmp	.+66     	; 0x74c <Endpoint_Write_Control_Stream_LE+0xa4>
     70a:	fb 01       	movw	r30, r22
     70c:	40 81       	ld	r20, Z
     70e:	51 81       	ldd	r21, Z+1	; 0x01
     710:	21 15       	cp	r18, r1
     712:	31 05       	cpc	r19, r1
     714:	99 f0       	breq	.+38     	; 0x73c <Endpoint_Write_Control_Stream_LE+0x94>
     716:	48 30       	cpi	r20, 0x08	; 8
     718:	51 05       	cpc	r21, r1
     71a:	80 f4       	brcc	.+32     	; 0x73c <Endpoint_Write_Control_Stream_LE+0x94>
     71c:	e8 2f       	mov	r30, r24
     71e:	f9 2f       	mov	r31, r25
     720:	81 91       	ld	r24, Z+
     722:	88 83       	st	Y, r24
     724:	8e 2f       	mov	r24, r30
     726:	9f 2f       	mov	r25, r31
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	31 09       	sbc	r19, r1
     72c:	4f 5f       	subi	r20, 0xFF	; 255
     72e:	5f 4f       	sbci	r21, 0xFF	; 255
     730:	21 15       	cp	r18, r1
     732:	31 05       	cpc	r19, r1
     734:	19 f0       	breq	.+6      	; 0x73c <Endpoint_Write_Control_Stream_LE+0x94>
     736:	48 30       	cpi	r20, 0x08	; 8
     738:	51 05       	cpc	r21, r1
     73a:	91 f7       	brne	.-28     	; 0x720 <Endpoint_Write_Control_Stream_LE+0x78>
     73c:	e1 2f       	mov	r30, r17
     73e:	48 30       	cpi	r20, 0x08	; 8
     740:	51 05       	cpc	r21, r1
     742:	09 f0       	breq	.+2      	; 0x746 <Endpoint_Write_Control_Stream_LE+0x9e>
     744:	e0 2f       	mov	r30, r16
     746:	4c 91       	ld	r20, X
     748:	4e 77       	andi	r20, 0x7E	; 126
     74a:	4c 93       	st	X, r20
     74c:	21 15       	cp	r18, r1
     74e:	31 05       	cpc	r19, r1
     750:	59 f6       	brne	.-106    	; 0x6e8 <Endpoint_Write_Control_Stream_LE+0x40>
     752:	e1 11       	cpse	r30, r1
     754:	c9 cf       	rjmp	.-110    	; 0x6e8 <Endpoint_Write_Control_Stream_LE+0x40>
     756:	07 c0       	rjmp	.+14     	; 0x766 <Endpoint_Write_Control_Stream_LE+0xbe>
     758:	80 91 9f 01 	lds	r24, 0x019F
     75c:	88 23       	and	r24, r24
     75e:	81 f0       	breq	.+32     	; 0x780 <Endpoint_Write_Control_Stream_LE+0xd8>
     760:	85 30       	cpi	r24, 0x05	; 5
     762:	19 f4       	brne	.+6      	; 0x76a <Endpoint_Write_Control_Stream_LE+0xc2>
     764:	0f c0       	rjmp	.+30     	; 0x784 <Endpoint_Write_Control_Stream_LE+0xdc>
     766:	e8 ee       	ldi	r30, 0xE8	; 232
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	82 ff       	sbrs	r24, 2
     76e:	f4 cf       	rjmp	.-24     	; 0x758 <Endpoint_Write_Control_Stream_LE+0xb0>
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	09 c0       	rjmp	.+18     	; 0x786 <Endpoint_Write_Control_Stream_LE+0xde>
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	07 c0       	rjmp	.+14     	; 0x786 <Endpoint_Write_Control_Stream_LE+0xde>
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	05 c0       	rjmp	.+10     	; 0x786 <Endpoint_Write_Control_Stream_LE+0xde>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	03 c0       	rjmp	.+6      	; 0x786 <Endpoint_Write_Control_Stream_LE+0xde>
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	01 c0       	rjmp	.+2      	; 0x786 <Endpoint_Write_Control_Stream_LE+0xde>
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	08 95       	ret

00000790 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     79a:	20 91 a6 01 	lds	r18, 0x01A6
     79e:	30 91 a7 01 	lds	r19, 0x01A7
     7a2:	26 17       	cp	r18, r22
     7a4:	37 07       	cpc	r19, r23
     7a6:	58 f0       	brcs	.+22     	; 0x7be <Endpoint_Write_Control_PStream_LE+0x2e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7a8:	61 15       	cp	r22, r1
     7aa:	71 05       	cpc	r23, r1
     7ac:	39 f4       	brne	.+14     	; 0x7bc <Endpoint_Write_Control_PStream_LE+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7ae:	e8 ee       	ldi	r30, 0xE8	; 232
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	20 81       	ld	r18, Z
     7b4:	2e 77       	andi	r18, 0x7E	; 126
     7b6:	20 83       	st	Z, r18
     7b8:	9b 01       	movw	r18, r22
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <Endpoint_Write_Control_PStream_LE+0x2e>
     7bc:	9b 01       	movw	r18, r22
     7be:	e8 2f       	mov	r30, r24
     7c0:	f9 2f       	mov	r31, r25
     7c2:	60 e0       	ldi	r22, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7c4:	a8 ee       	ldi	r26, 0xE8	; 232
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     7c8:	42 ef       	ldi	r20, 0xF2	; 242
     7ca:	50 e0       	ldi	r21, 0x00	; 0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7cc:	71 e0       	ldi	r23, 0x01	; 1
     7ce:	10 e0       	ldi	r17, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7d0:	0f 2e       	mov	r0, r31
     7d2:	f1 ef       	ldi	r31, 0xF1	; 241
     7d4:	ef 2e       	mov	r14, r31
     7d6:	f1 2c       	mov	r15, r1
     7d8:	f0 2d       	mov	r31, r0
     7da:	2e c0       	rjmp	.+92     	; 0x838 <Endpoint_Write_Control_PStream_LE+0xa8>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7dc:	80 91 9f 01 	lds	r24, 0x019F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7e0:	88 23       	and	r24, r24
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0x56>
     7e4:	3d c0       	rjmp	.+122    	; 0x860 <Endpoint_Write_Control_PStream_LE+0xd0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7e6:	85 30       	cpi	r24, 0x05	; 5
     7e8:	09 f4       	brne	.+2      	; 0x7ec <Endpoint_Write_Control_PStream_LE+0x5c>
     7ea:	3c c0       	rjmp	.+120    	; 0x864 <Endpoint_Write_Control_PStream_LE+0xd4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7ec:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7ee:	83 fd       	sbrc	r24, 3
     7f0:	3b c0       	rjmp	.+118    	; 0x868 <Endpoint_Write_Control_PStream_LE+0xd8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7f2:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7f4:	82 fd       	sbrc	r24, 2
     7f6:	2d c0       	rjmp	.+90     	; 0x852 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7f8:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     7fa:	80 ff       	sbrs	r24, 0
     7fc:	1d c0       	rjmp	.+58     	; 0x838 <Endpoint_Write_Control_PStream_LE+0xa8>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     7fe:	ea 01       	movw	r28, r20
     800:	88 81       	ld	r24, Y
     802:	99 81       	ldd	r25, Y+1	; 0x01
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     804:	21 15       	cp	r18, r1
     806:	31 05       	cpc	r19, r1
     808:	81 f0       	breq	.+32     	; 0x82a <Endpoint_Write_Control_PStream_LE+0x9a>
     80a:	88 30       	cpi	r24, 0x08	; 8
     80c:	91 05       	cpc	r25, r1
     80e:	68 f4       	brcc	.+26     	; 0x82a <Endpoint_Write_Control_PStream_LE+0x9a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     810:	64 91       	lpm	r22, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     812:	e7 01       	movw	r28, r14
     814:	68 83       	st	Y, r22
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     816:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     818:	21 50       	subi	r18, 0x01	; 1
     81a:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     81c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     81e:	21 15       	cp	r18, r1
     820:	31 05       	cpc	r19, r1
     822:	19 f0       	breq	.+6      	; 0x82a <Endpoint_Write_Control_PStream_LE+0x9a>
     824:	88 30       	cpi	r24, 0x08	; 8
     826:	91 05       	cpc	r25, r1
     828:	99 f7       	brne	.-26     	; 0x810 <Endpoint_Write_Control_PStream_LE+0x80>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     82a:	67 2f       	mov	r22, r23
     82c:	08 97       	sbiw	r24, 0x08	; 8
     82e:	09 f0       	breq	.+2      	; 0x832 <Endpoint_Write_Control_PStream_LE+0xa2>
     830:	61 2f       	mov	r22, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     832:	8c 91       	ld	r24, X
     834:	8e 77       	andi	r24, 0x7E	; 126
     836:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     838:	21 15       	cp	r18, r1
     83a:	31 05       	cpc	r19, r1
     83c:	79 f6       	brne	.-98     	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x4c>
     83e:	61 11       	cpse	r22, r1
     840:	cd cf       	rjmp	.-102    	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x4c>
     842:	07 c0       	rjmp	.+14     	; 0x852 <Endpoint_Write_Control_PStream_LE+0xc2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     844:	80 91 9f 01 	lds	r24, 0x019F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     848:	88 23       	and	r24, r24
     84a:	81 f0       	breq	.+32     	; 0x86c <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     84c:	85 30       	cpi	r24, 0x05	; 5
     84e:	19 f4       	brne	.+6      	; 0x856 <Endpoint_Write_Control_PStream_LE+0xc6>
     850:	0f c0       	rjmp	.+30     	; 0x870 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     852:	e8 ee       	ldi	r30, 0xE8	; 232
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     858:	82 ff       	sbrs	r24, 2
     85a:	f4 cf       	rjmp	.-24     	; 0x844 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	09 c0       	rjmp	.+18     	; 0x872 <Endpoint_Write_Control_PStream_LE+0xe2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	07 c0       	rjmp	.+14     	; 0x872 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	05 c0       	rjmp	.+10     	; 0x872 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	03 c0       	rjmp	.+6      	; 0x872 <Endpoint_Write_Control_PStream_LE+0xe2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	01 c0       	rjmp	.+2      	; 0x872 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     870:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	08 95       	ret

0000087e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     87e:	8f 92       	push	r8
     880:	9f 92       	push	r9
     882:	bf 92       	push	r11
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	87 30       	cpi	r24, 0x07	; 7
     896:	70 f1       	brcs	.+92     	; 0x8f4 <Endpoint_ConfigureEndpoint_Prv+0x76>
     898:	26 c0       	rjmp	.+76     	; 0x8e6 <Endpoint_ConfigureEndpoint_Prv+0x68>
     89a:	59 2f       	mov	r21, r25
     89c:	5f 70       	andi	r21, 0x0F	; 15
     89e:	e8 01       	movw	r28, r16
     8a0:	58 83       	st	Y, r21
     8a2:	89 17       	cp	r24, r25
     8a4:	31 f0       	breq	.+12     	; 0x8b2 <Endpoint_ConfigureEndpoint_Prv+0x34>
     8a6:	e9 01       	movw	r28, r18
     8a8:	d8 80       	ld	r13, Y
     8aa:	50 81       	ld	r21, Z
     8ac:	e4 01       	movw	r28, r8
     8ae:	78 81       	ld	r23, Y
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     8b2:	5b 2d       	mov	r21, r11
     8b4:	d6 2e       	mov	r13, r22
     8b6:	7c 2d       	mov	r23, r12
     8b8:	51 ff       	sbrs	r21, 1
     8ba:	12 c0       	rjmp	.+36     	; 0x8e0 <Endpoint_ConfigureEndpoint_Prv+0x62>
     8bc:	4c 91       	ld	r20, X
     8be:	4e 7f       	andi	r20, 0xFE	; 254
     8c0:	4c 93       	st	X, r20
     8c2:	40 81       	ld	r20, Z
     8c4:	4d 7f       	andi	r20, 0xFD	; 253
     8c6:	40 83       	st	Z, r20
     8c8:	4c 91       	ld	r20, X
     8ca:	41 60       	ori	r20, 0x01	; 1
     8cc:	4c 93       	st	X, r20
     8ce:	e9 01       	movw	r28, r18
     8d0:	d8 82       	st	Y, r13
     8d2:	50 83       	st	Z, r21
     8d4:	e4 01       	movw	r28, r8
     8d6:	78 83       	st	Y, r23
     8d8:	e7 01       	movw	r28, r14
     8da:	58 81       	ld	r21, Y
     8dc:	55 23       	and	r21, r21
     8de:	44 f4       	brge	.+16     	; 0x8f0 <Endpoint_ConfigureEndpoint_Prv+0x72>
     8e0:	9f 5f       	subi	r25, 0xFF	; 255
     8e2:	97 30       	cpi	r25, 0x07	; 7
     8e4:	d1 f6       	brne	.-76     	; 0x89a <Endpoint_ConfigureEndpoint_Prv+0x1c>
     8e6:	8f 70       	andi	r24, 0x0F	; 15
     8e8:	80 93 e9 00 	sts	0x00E9, r24
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	1f c0       	rjmp	.+62     	; 0x92e <Endpoint_ConfigureEndpoint_Prv+0xb0>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	1d c0       	rjmp	.+58     	; 0x92e <Endpoint_ConfigureEndpoint_Prv+0xb0>
     8f4:	98 2f       	mov	r25, r24
     8f6:	9f 70       	andi	r25, 0x0F	; 15
     8f8:	90 93 e9 00 	sts	0x00E9, r25
     8fc:	98 2f       	mov	r25, r24
     8fe:	54 2f       	mov	r21, r20
     900:	d6 2e       	mov	r13, r22
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	ab ee       	ldi	r26, 0xEB	; 235
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	ed ee       	ldi	r30, 0xED	; 237
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	2c ee       	ldi	r18, 0xEC	; 236
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	0f 2e       	mov	r0, r31
     912:	f0 ef       	ldi	r31, 0xF0	; 240
     914:	8f 2e       	mov	r8, r31
     916:	91 2c       	mov	r9, r1
     918:	f0 2d       	mov	r31, r0
     91a:	0f 2e       	mov	r0, r31
     91c:	fe ee       	ldi	r31, 0xEE	; 238
     91e:	ef 2e       	mov	r14, r31
     920:	f1 2c       	mov	r15, r1
     922:	f0 2d       	mov	r31, r0
     924:	09 ee       	ldi	r16, 0xE9	; 233
     926:	10 e0       	ldi	r17, 0x00	; 0
     928:	b4 2e       	mov	r11, r20
     92a:	c1 2c       	mov	r12, r1
     92c:	c5 cf       	rjmp	.-118    	; 0x8b8 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	bf 90       	pop	r11
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	08 95       	ret

00000946 <Endpoint_ConfigureEndpointTable>:
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	c6 2e       	mov	r12, r22
     95e:	66 23       	and	r22, r22
     960:	09 f4       	brne	.+2      	; 0x964 <Endpoint_ConfigureEndpointTable+0x1e>
     962:	47 c0       	rjmp	.+142    	; 0x9f2 <Endpoint_ConfigureEndpointTable+0xac>
     964:	ec 01       	movw	r28, r24
     966:	8c 01       	movw	r16, r24
     968:	0c 5f       	subi	r16, 0xFC	; 252
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	d1 2c       	mov	r13, r1
     96e:	b1 2c       	mov	r11, r1
     970:	68 94       	set
     972:	ee 24       	eor	r14, r14
     974:	e3 f8       	bld	r14, 3
     976:	f1 2c       	mov	r15, r1
     978:	68 94       	set
     97a:	99 24       	eor	r9, r9
     97c:	91 f8       	bld	r9, 1
     97e:	0f 2e       	mov	r0, r31
     980:	f6 e0       	ldi	r31, 0x06	; 6
     982:	af 2e       	mov	r10, r31
     984:	f0 2d       	mov	r31, r0
     986:	68 81       	ld	r22, Y
     988:	66 23       	and	r22, r22
     98a:	59 f1       	breq	.+86     	; 0x9e2 <Endpoint_ConfigureEndpointTable+0x9c>
     98c:	f8 01       	movw	r30, r16
     98e:	90 81       	ld	r25, Z
     990:	e9 81       	ldd	r30, Y+1	; 0x01
     992:	fa 81       	ldd	r31, Y+2	; 0x02
     994:	d8 01       	movw	r26, r16
     996:	11 97       	sbiw	r26, 0x01	; 1
     998:	5c 91       	ld	r21, X
     99a:	86 2f       	mov	r24, r22
     99c:	8f 70       	andi	r24, 0x0F	; 15
     99e:	87 30       	cpi	r24, 0x07	; 7
     9a0:	50 f5       	brcc	.+84     	; 0x9f6 <Endpoint_ConfigureEndpointTable+0xb0>
     9a2:	92 30       	cpi	r25, 0x02	; 2
     9a4:	10 f0       	brcs	.+4      	; 0x9aa <Endpoint_ConfigureEndpointTable+0x64>
     9a6:	4a 2d       	mov	r20, r10
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <Endpoint_ConfigureEndpointTable+0x66>
     9aa:	49 2d       	mov	r20, r9
     9ac:	e9 30       	cpi	r30, 0x09	; 9
     9ae:	f1 05       	cpc	r31, r1
     9b0:	48 f0       	brcs	.+18     	; 0x9c4 <Endpoint_ConfigureEndpointTable+0x7e>
     9b2:	97 01       	movw	r18, r14
     9b4:	9b 2d       	mov	r25, r11
     9b6:	9f 5f       	subi	r25, 0xFF	; 255
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	2e 17       	cp	r18, r30
     9be:	3f 07       	cpc	r19, r31
     9c0:	d0 f3       	brcs	.-12     	; 0x9b6 <Endpoint_ConfigureEndpointTable+0x70>
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <Endpoint_ConfigureEndpointTable+0x80>
     9c4:	9b 2d       	mov	r25, r11
     9c6:	92 95       	swap	r25
     9c8:	90 7f       	andi	r25, 0xF0	; 240
     9ca:	49 2b       	or	r20, r25
     9cc:	f0 e4       	ldi	r31, 0x40	; 64
     9ce:	5f 9f       	mul	r21, r31
     9d0:	90 01       	movw	r18, r0
     9d2:	11 24       	eor	r1, r1
     9d4:	66 1f       	adc	r22, r22
     9d6:	66 27       	eor	r22, r22
     9d8:	66 1f       	adc	r22, r22
     9da:	62 2b       	or	r22, r18
     9dc:	50 df       	rcall	.-352    	; 0x87e <Endpoint_ConfigureEndpoint_Prv>
     9de:	88 23       	and	r24, r24
     9e0:	61 f0       	breq	.+24     	; 0x9fa <Endpoint_ConfigureEndpointTable+0xb4>
     9e2:	d3 94       	inc	r13
     9e4:	25 96       	adiw	r28, 0x05	; 5
     9e6:	0b 5f       	subi	r16, 0xFB	; 251
     9e8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ea:	dc 10       	cpse	r13, r12
     9ec:	cc cf       	rjmp	.-104    	; 0x986 <Endpoint_ConfigureEndpointTable+0x40>
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <Endpoint_ConfigureEndpointTable+0xb6>
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <Endpoint_ConfigureEndpointTable+0xb6>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <Endpoint_ConfigureEndpointTable+0xb6>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	08 95       	ret

00000a14 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     a14:	80 91 a0 01 	lds	r24, 0x01A0
     a18:	88 23       	and	r24, r24
     a1a:	b4 f4       	brge	.+44     	; 0xa48 <Endpoint_ClearStatusStage+0x34>
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <Endpoint_ClearStatusStage+0x14>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a1e:	80 91 9f 01 	lds	r24, 0x019F
     a22:	81 11       	cpse	r24, r1
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <Endpoint_ClearStatusStage+0x18>
     a26:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a28:	e8 ee       	ldi	r30, 0xE8	; 232
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     a2e:	82 ff       	sbrs	r24, 2
     a30:	f6 cf       	rjmp	.-20     	; 0xa1e <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a32:	e8 ee       	ldi	r30, 0xE8	; 232
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	8b 77       	andi	r24, 0x7B	; 123
     a3a:	80 83       	st	Z, r24
     a3c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a3e:	80 91 9f 01 	lds	r24, 0x019F
     a42:	81 11       	cpse	r24, r1
     a44:	03 c0       	rjmp	.+6      	; 0xa4c <Endpoint_ClearStatusStage+0x38>
     a46:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a48:	e8 ee       	ldi	r30, 0xE8	; 232
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     a4e:	80 ff       	sbrs	r24, 0
     a50:	f6 cf       	rjmp	.-20     	; 0xa3e <Endpoint_ClearStatusStage+0x2a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a52:	e8 ee       	ldi	r30, 0xE8	; 232
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	8e 77       	andi	r24, 0x7E	; 126
     a5a:	80 83       	st	Z, r24
     a5c:	08 95       	ret

00000a5e <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     a66:	20 91 e4 00 	lds	r18, 0x00E4
     a6a:	30 91 e5 00 	lds	r19, 0x00E5
     a6e:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a70:	ac ee       	ldi	r26, 0xEC	; 236
     a72:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a74:	e8 ee       	ldi	r30, 0xE8	; 232
     a76:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a78:	0b ee       	ldi	r16, 0xEB	; 235
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	44 ee       	ldi	r20, 0xE4	; 228
     a7e:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a80:	8c 91       	ld	r24, X
     a82:	80 fd       	sbrc	r24, 0
     a84:	20 c0       	rjmp	.+64     	; 0xac6 <Endpoint_WaitUntilReady+0x68>
     a86:	23 c0       	rjmp	.+70     	; 0xace <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a88:	80 91 9f 01 	lds	r24, 0x019F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a8c:	88 23       	and	r24, r24
     a8e:	89 f0       	breq	.+34     	; 0xab2 <Endpoint_WaitUntilReady+0x54>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a90:	85 30       	cpi	r24, 0x05	; 5
     a92:	89 f0       	breq	.+34     	; 0xab6 <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a94:	e8 01       	movw	r28, r16
     a96:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     a98:	85 fd       	sbrc	r24, 5
     a9a:	0f c0       	rjmp	.+30     	; 0xaba <Endpoint_WaitUntilReady+0x5c>
     a9c:	ea 01       	movw	r28, r20
     a9e:	88 81       	ld	r24, Y
     aa0:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     aa2:	28 17       	cp	r18, r24
     aa4:	39 07       	cpc	r19, r25
     aa6:	61 f3       	breq	.-40     	; 0xa80 <Endpoint_WaitUntilReady+0x22>
     aa8:	61 50       	subi	r22, 0x01	; 1
     aaa:	9c 01       	movw	r18, r24
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     aac:	49 f7       	brne	.-46     	; 0xa80 <Endpoint_WaitUntilReady+0x22>
			  return ENDPOINT_READYWAIT_Timeout;
     aae:	84 e0       	ldi	r24, 0x04	; 4
     ab0:	12 c0       	rjmp	.+36     	; 0xad6 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	10 c0       	rjmp	.+32     	; 0xad6 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	0e c0       	rjmp	.+28     	; 0xad6 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	0c c0       	rjmp	.+24     	; 0xad6 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0a c0       	rjmp	.+20     	; 0xad6 <Endpoint_WaitUntilReady+0x78>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	08 c0       	rjmp	.+16     	; 0xad6 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ac6:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     ac8:	80 ff       	sbrs	r24, 0
     aca:	de cf       	rjmp	.-68     	; 0xa88 <Endpoint_WaitUntilReady+0x2a>
     acc:	f8 cf       	rjmp	.-16     	; 0xabe <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ace:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     ad0:	82 ff       	sbrs	r24, 2
     ad2:	da cf       	rjmp	.-76     	; 0xa88 <Endpoint_WaitUntilReady+0x2a>
     ad4:	f6 cf       	rjmp	.-20     	; 0xac2 <Endpoint_WaitUntilReady+0x64>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	08 95       	ret

00000ae0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     ae8:	4e d0       	rcall	.+156    	; 0xb86 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     aea:	55 d0       	rcall	.+170    	; 0xb96 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     aec:	c8 ed       	ldi	r28, 0xD8	; 216
     aee:	d0 e0       	ldi	r29, 0x00	; 0
     af0:	88 81       	ld	r24, Y
     af2:	8f 77       	andi	r24, 0x7F	; 127
     af4:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     af6:	88 81       	ld	r24, Y
     af8:	80 68       	ori	r24, 0x80	; 128
     afa:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     afc:	88 81       	ld	r24, Y
     afe:	8f 7d       	andi	r24, 0xDF	; 223
     b00:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     b02:	e7 ed       	ldi	r30, 0xD7	; 215
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	80 68       	ori	r24, 0x80	; 128
     b0a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b0c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     b0e:	10 92 9f 01 	sts	0x019F, r1
	USB_Device_ConfigurationNumber  = 0;
     b12:	10 92 9b 01 	sts	0x019B, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     b16:	10 92 9d 01 	sts	0x019D, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     b1a:	10 92 9c 01 	sts	0x019C, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     b1e:	00 ee       	ldi	r16, 0xE0	; 224
     b20:	10 e0       	ldi	r17, 0x00	; 0
     b22:	f8 01       	movw	r30, r16
     b24:	80 81       	ld	r24, Z
     b26:	8b 7f       	andi	r24, 0xFB	; 251
     b28:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     b2a:	88 81       	ld	r24, Y
     b2c:	81 60       	ori	r24, 0x01	; 1
     b2e:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b30:	42 e0       	ldi	r20, 0x02	; 2
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	a3 de       	rcall	.-698    	; 0x87e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b38:	e1 ee       	ldi	r30, 0xE1	; 225
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	8e 7f       	andi	r24, 0xFE	; 254
     b40:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b42:	e2 ee       	ldi	r30, 0xE2	; 226
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	81 60       	ori	r24, 0x01	; 1
     b4a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     b4c:	80 81       	ld	r24, Z
     b4e:	88 60       	ori	r24, 0x08	; 8
     b50:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b52:	f8 01       	movw	r30, r16
     b54:	80 81       	ld	r24, Z
     b56:	8e 7f       	andi	r24, 0xFE	; 254
     b58:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b5a:	88 81       	ld	r24, Y
     b5c:	80 61       	ori	r24, 0x10	; 16
     b5e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	08 95       	ret

00000b6a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b6a:	e8 ed       	ldi	r30, 0xD8	; 216
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	8f 7e       	andi	r24, 0xEF	; 239
     b72:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b74:	e7 ed       	ldi	r30, 0xD7	; 215
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	81 60       	ori	r24, 0x01	; 1
     b7c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 9e 01 	sts	0x019E, r24

	USB_ResetInterface();
     b84:	ad cf       	rjmp	.-166    	; 0xae0 <USB_ResetInterface>

00000b86 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b86:	e8 ed       	ldi	r30, 0xD8	; 216
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	8c 7f       	andi	r24, 0xFC	; 252
     b8e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     b90:	10 92 e2 00 	sts	0x00E2, r1
     b94:	08 95       	ret

00000b96 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b96:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     b9a:	10 92 e1 00 	sts	0x00E1, r1
     b9e:	08 95       	ret

00000ba0 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	0b b6       	in	r0, 0x3b	; 59
     bac:	0f 92       	push	r0
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     bc6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     bca:	82 ff       	sbrs	r24, 2
     bcc:	0a c0       	rjmp	.+20     	; 0xbe2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     bce:	80 91 e2 00 	lds	r24, 0x00E2
     bd2:	82 ff       	sbrs	r24, 2
     bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     bd6:	e1 ee       	ldi	r30, 0xE1	; 225
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	8b 7f       	andi	r24, 0xFB	; 251
     bde:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     be0:	6c db       	rcall	.-2344   	; 0x2ba <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     be2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     be6:	80 ff       	sbrs	r24, 0
     be8:	1d c0       	rjmp	.+58     	; 0xc24 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     bea:	80 91 d8 00 	lds	r24, 0x00D8
     bee:	80 ff       	sbrs	r24, 0
     bf0:	19 c0       	rjmp	.+50     	; 0xc24 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     bf2:	ea ed       	ldi	r30, 0xDA	; 218
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	8e 7f       	andi	r24, 0xFE	; 254
     bfa:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     bfc:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     c00:	80 ff       	sbrs	r24, 0
     c02:	0c c0       	rjmp	.+24     	; 0xc1c <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c04:	84 e1       	ldi	r24, 0x14	; 20
     c06:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c08:	86 e1       	ldi	r24, 0x16	; 22
     c0a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     c0c:	09 b4       	in	r0, 0x29	; 41
     c0e:	00 fe       	sbrs	r0, 0
     c10:	fd cf       	rjmp	.-6      	; 0xc0c <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 9f 01 	sts	0x019F, r24
			EVENT_USB_Device_Connect();
     c18:	45 db       	rcall	.-2422   	; 0x2a4 <EVENT_USB_Device_Connect>
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c1c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     c1e:	10 92 9f 01 	sts	0x019F, r1
			EVENT_USB_Device_Disconnect();
     c22:	41 db       	rcall	.-2430   	; 0x2a6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     c24:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     c28:	80 ff       	sbrs	r24, 0
     c2a:	16 c0       	rjmp	.+44     	; 0xc58 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     c2c:	80 91 e2 00 	lds	r24, 0x00E2
     c30:	80 ff       	sbrs	r24, 0
     c32:	12 c0       	rjmp	.+36     	; 0xc58 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c34:	e2 ee       	ldi	r30, 0xE2	; 226
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8e 7f       	andi	r24, 0xFE	; 254
     c3c:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c3e:	80 81       	ld	r24, Z
     c40:	80 61       	ori	r24, 0x10	; 16
     c42:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     c44:	e8 ed       	ldi	r30, 0xD8	; 216
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	80 62       	ori	r24, 0x20	; 32
     c4c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c4e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     c50:	85 e0       	ldi	r24, 0x05	; 5
     c52:	80 93 9f 01 	sts	0x019F, r24
		EVENT_USB_Device_Suspend();
     c56:	e0 d1       	rcall	.+960    	; 0x1018 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     c58:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     c5c:	84 ff       	sbrs	r24, 4
     c5e:	2f c0       	rjmp	.+94     	; 0xcbe <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     c60:	80 91 e2 00 	lds	r24, 0x00E2
     c64:	84 ff       	sbrs	r24, 4
     c66:	2b c0       	rjmp	.+86     	; 0xcbe <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c68:	84 e1       	ldi	r24, 0x14	; 20
     c6a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c6c:	86 e1       	ldi	r24, 0x16	; 22
     c6e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c70:	09 b4       	in	r0, 0x29	; 41
     c72:	00 fe       	sbrs	r0, 0
     c74:	fd cf       	rjmp	.-6      	; 0xc70 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c76:	e8 ed       	ldi	r30, 0xD8	; 216
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8f 7d       	andi	r24, 0xDF	; 223
     c7e:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     c80:	e1 ee       	ldi	r30, 0xE1	; 225
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8f 7e       	andi	r24, 0xEF	; 239
     c88:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     c8a:	e2 ee       	ldi	r30, 0xE2	; 226
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	8f 7e       	andi	r24, 0xEF	; 239
     c92:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     c94:	80 81       	ld	r24, Z
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     c9a:	80 91 9b 01 	lds	r24, 0x019B
     c9e:	88 23       	and	r24, r24
     ca0:	21 f0       	breq	.+8      	; 0xcaa <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	80 93 9f 01 	sts	0x019F, r24
     ca8:	09 c0       	rjmp	.+18     	; 0xcbc <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     caa:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     cae:	88 23       	and	r24, r24
     cb0:	14 f4       	brge	.+4      	; 0xcb6 <__vector_10+0x116>
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <__vector_10+0x118>
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	80 93 9f 01 	sts	0x019F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     cbc:	ad d1       	rcall	.+858    	; 0x1018 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     cbe:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     cc2:	83 ff       	sbrs	r24, 3
     cc4:	1e c0       	rjmp	.+60     	; 0xd02 <__vector_10+0x162>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     cc6:	80 91 e2 00 	lds	r24, 0x00E2
     cca:	83 ff       	sbrs	r24, 3
     ccc:	1a c0       	rjmp	.+52     	; 0xd02 <__vector_10+0x162>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     cce:	e1 ee       	ldi	r30, 0xE1	; 225
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	87 7f       	andi	r24, 0xF7	; 247
     cd6:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	80 93 9f 01 	sts	0x019F, r24
		USB_Device_ConfigurationNumber = 0;
     cde:	10 92 9b 01 	sts	0x019B, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     ce2:	80 81       	ld	r24, Z
     ce4:	8e 7f       	andi	r24, 0xFE	; 254
     ce6:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ce8:	e2 ee       	ldi	r30, 0xE2	; 226
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	8e 7f       	andi	r24, 0xFE	; 254
     cf0:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     cf2:	80 81       	ld	r24, Z
     cf4:	80 61       	ori	r24, 0x10	; 16
     cf6:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     cf8:	42 e0       	ldi	r20, 0x02	; 2
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	bf dd       	rcall	.-1154   	; 0x87e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     d00:	8b d1       	rcall	.+790    	; 0x1018 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0b be       	out	0x3b, r0	; 59
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	ac 97       	sbiw	r28, 0x2c	; 44
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     d40:	e0 ea       	ldi	r30, 0xA0	; 160
     d42:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d44:	a1 ef       	ldi	r26, 0xF1	; 241
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	8c 91       	ld	r24, X

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     d4a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     d4c:	21 e0       	ldi	r18, 0x01	; 1
     d4e:	e8 3a       	cpi	r30, 0xA8	; 168
     d50:	f2 07       	cpc	r31, r18
     d52:	d1 f7       	brne	.-12     	; 0xd48 <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     d54:	61 d1       	rcall	.+706    	; 0x1018 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d56:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     d5a:	83 ff       	sbrs	r24, 3
     d5c:	38 c1       	rjmp	.+624    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     d5e:	90 91 a0 01 	lds	r25, 0x01A0

		switch (USB_ControlRequest.bRequest)
     d62:	80 91 a1 01 	lds	r24, 0x01A1
     d66:	85 30       	cpi	r24, 0x05	; 5
     d68:	09 f4       	brne	.+2      	; 0xd6c <USB_Device_ProcessControlRequest+0x44>
     d6a:	81 c0       	rjmp	.+258    	; 0xe6e <USB_Device_ProcessControlRequest+0x146>
     d6c:	38 f4       	brcc	.+14     	; 0xd7c <USB_Device_ProcessControlRequest+0x54>
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	d1 f1       	breq	.+116    	; 0xde6 <USB_Device_ProcessControlRequest+0xbe>
     d72:	70 f0       	brcs	.+28     	; 0xd90 <USB_Device_ProcessControlRequest+0x68>
     d74:	83 30       	cpi	r24, 0x03	; 3
     d76:	09 f0       	breq	.+2      	; 0xd7a <USB_Device_ProcessControlRequest+0x52>
     d78:	2a c1       	rjmp	.+596    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
     d7a:	35 c0       	rjmp	.+106    	; 0xde6 <USB_Device_ProcessControlRequest+0xbe>
     d7c:	88 30       	cpi	r24, 0x08	; 8
     d7e:	09 f4       	brne	.+2      	; 0xd82 <USB_Device_ProcessControlRequest+0x5a>
     d80:	f4 c0       	rjmp	.+488    	; 0xf6a <USB_Device_ProcessControlRequest+0x242>
     d82:	89 30       	cpi	r24, 0x09	; 9
     d84:	09 f4       	brne	.+2      	; 0xd88 <USB_Device_ProcessControlRequest+0x60>
     d86:	01 c1       	rjmp	.+514    	; 0xf8a <USB_Device_ProcessControlRequest+0x262>
     d88:	86 30       	cpi	r24, 0x06	; 6
     d8a:	09 f0       	breq	.+2      	; 0xd8e <USB_Device_ProcessControlRequest+0x66>
     d8c:	20 c1       	rjmp	.+576    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
     d8e:	96 c0       	rjmp	.+300    	; 0xebc <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d90:	90 38       	cpi	r25, 0x80	; 128
     d92:	21 f0       	breq	.+8      	; 0xd9c <USB_Device_ProcessControlRequest+0x74>
     d94:	92 38       	cpi	r25, 0x82	; 130
     d96:	09 f0       	breq	.+2      	; 0xd9a <USB_Device_ProcessControlRequest+0x72>
     d98:	1a c1       	rjmp	.+564    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
     d9a:	08 c0       	rjmp	.+16     	; 0xdac <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     d9c:	80 91 9c 01 	lds	r24, 0x019C
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     da0:	90 91 9d 01 	lds	r25, 0x019D
     da4:	99 23       	and	r25, r25
     da6:	89 f0       	breq	.+34     	; 0xdca <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     da8:	82 60       	ori	r24, 0x02	; 2
     daa:	0f c0       	rjmp	.+30     	; 0xdca <USB_Device_ProcessControlRequest+0xa2>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     dac:	80 91 a4 01 	lds	r24, 0x01A4
     db0:	90 91 a5 01 	lds	r25, 0x01A5
     db4:	8f 70       	andi	r24, 0x0F	; 15
     db6:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     db8:	e9 ee       	ldi	r30, 0xE9	; 233
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     dbe:	80 91 eb 00 	lds	r24, 0x00EB
     dc2:	85 fb       	bst	r24, 5
     dc4:	88 27       	eor	r24, r24
     dc6:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dc8:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dca:	e8 ee       	ldi	r30, 0xE8	; 232
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	97 7f       	andi	r25, 0xF7	; 247
     dd2:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     dd4:	a1 ef       	ldi	r26, 0xF1	; 241
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
     dda:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ddc:	80 81       	ld	r24, Z
     dde:	8e 77       	andi	r24, 0x7E	; 126
     de0:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     de2:	18 de       	rcall	.-976    	; 0xa14 <Endpoint_ClearStatusStage>
     de4:	f4 c0       	rjmp	.+488    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     de6:	99 23       	and	r25, r25
     de8:	09 f4       	brne	.+2      	; 0xdec <USB_Device_ProcessControlRequest+0xc4>
     dea:	00 c1       	rjmp	.+512    	; 0xfec <USB_Device_ProcessControlRequest+0x2c4>
     dec:	92 30       	cpi	r25, 0x02	; 2
     dee:	09 f0       	breq	.+2      	; 0xdf2 <USB_Device_ProcessControlRequest+0xca>
     df0:	ee c0       	rjmp	.+476    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
     df2:	01 c1       	rjmp	.+514    	; 0xff6 <USB_Device_ProcessControlRequest+0x2ce>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	09 f0       	breq	.+2      	; 0xdfc <USB_Device_ProcessControlRequest+0xd4>
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	90 93 9d 01 	sts	0x019D, r25
     e00:	2d c0       	rjmp	.+90     	; 0xe5c <USB_Device_ProcessControlRequest+0x134>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     e02:	80 91 a4 01 	lds	r24, 0x01A4
     e06:	90 91 a5 01 	lds	r25, 0x01A5
     e0a:	8f 70       	andi	r24, 0x0F	; 15
     e0c:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     e0e:	88 23       	and	r24, r24
     e10:	09 f4       	brne	.+2      	; 0xe14 <USB_Device_ProcessControlRequest+0xec>
     e12:	dd c0       	rjmp	.+442    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e14:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e18:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     e1c:	20 ff       	sbrs	r18, 0
     e1e:	1e c0       	rjmp	.+60     	; 0xe5c <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     e20:	20 91 a1 01 	lds	r18, 0x01A1
     e24:	23 30       	cpi	r18, 0x03	; 3
     e26:	31 f4       	brne	.+12     	; 0xe34 <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e28:	eb ee       	ldi	r30, 0xEB	; 235
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 62       	ori	r24, 0x20	; 32
     e30:	80 83       	st	Z, r24
     e32:	14 c0       	rjmp	.+40     	; 0xe5c <USB_Device_ProcessControlRequest+0x134>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     e34:	eb ee       	ldi	r30, 0xEB	; 235
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	90 81       	ld	r25, Z
     e3a:	90 61       	ori	r25, 0x10	; 16
     e3c:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     e3e:	21 e0       	ldi	r18, 0x01	; 1
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	a9 01       	movw	r20, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <USB_Device_ProcessControlRequest+0x122>
     e46:	44 0f       	add	r20, r20
     e48:	55 1f       	adc	r21, r21
     e4a:	8a 95       	dec	r24
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <USB_Device_ProcessControlRequest+0x11e>
     e4e:	aa ee       	ldi	r26, 0xEA	; 234
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	4c 93       	st	X, r20
				UERST = 0;
     e54:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     e56:	80 81       	ld	r24, Z
     e58:	88 60       	ori	r24, 0x08	; 8
     e5a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e5c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e60:	e8 ee       	ldi	r30, 0xE8	; 232
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	87 7f       	andi	r24, 0xF7	; 247
     e68:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     e6a:	d4 dd       	rcall	.-1112   	; 0xa14 <Endpoint_ClearStatusStage>
     e6c:	b0 c0       	rjmp	.+352    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e6e:	91 11       	cpse	r25, r1
     e70:	ae c0       	rjmp	.+348    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     e72:	80 91 a2 01 	lds	r24, 0x01A2
     e76:	90 91 a3 01 	lds	r25, 0x01A3
     e7a:	8f 77       	andi	r24, 0x7F	; 127
     e7c:	99 27       	eor	r25, r25
     e7e:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     e80:	e3 ee       	ldi	r30, 0xE3	; 227
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	90 81       	ld	r25, Z
     e86:	90 78       	andi	r25, 0x80	; 128
     e88:	89 2b       	or	r24, r25
     e8a:	80 83       	st	Z, r24
     e8c:	e8 ee       	ldi	r30, 0xE8	; 232
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	87 7f       	andi	r24, 0xF7	; 247
     e94:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     e96:	be dd       	rcall	.-1156   	; 0xa14 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e98:	e8 ee       	ldi	r30, 0xE8	; 232
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
     e9e:	80 ff       	sbrs	r24, 0
     ea0:	fd cf       	rjmp	.-6      	; 0xe9c <USB_Device_ProcessControlRequest+0x174>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     ea2:	e3 ee       	ldi	r30, 0xE3	; 227
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     eac:	11 23       	and	r17, r17
     eae:	11 f0       	breq	.+4      	; 0xeb4 <USB_Device_ProcessControlRequest+0x18c>
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <USB_Device_ProcessControlRequest+0x18e>
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	80 93 9f 01 	sts	0x019F, r24
     eba:	89 c0       	rjmp	.+274    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ebc:	90 58       	subi	r25, 0x80	; 128
     ebe:	92 30       	cpi	r25, 0x02	; 2
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <USB_Device_ProcessControlRequest+0x19c>
     ec2:	85 c0       	rjmp	.+266    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ec4:	80 91 a2 01 	lds	r24, 0x01A2
     ec8:	90 91 a3 01 	lds	r25, 0x01A3
     ecc:	8c 3d       	cpi	r24, 0xDC	; 220
     ece:	53 e0       	ldi	r21, 0x03	; 3
     ed0:	95 07       	cpc	r25, r21
     ed2:	99 f5       	brne	.+102    	; 0xf3a <USB_Device_ProcessControlRequest+0x212>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     ed8:	8a e2       	ldi	r24, 0x2A	; 42
     eda:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     edc:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ede:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     ee0:	de 01       	movw	r26, r28
     ee2:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ee4:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     ee6:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     ee8:	41 e2       	ldi	r20, 0x21	; 33
     eea:	e3 2f       	mov	r30, r19
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	40 93 57 00 	sts	0x0057, r20
     ef2:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
     ef4:	20 ff       	sbrs	r18, 0
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <USB_Device_ProcessControlRequest+0x1d6>
					{
						SerialByte >>= 4;
     ef8:	82 95       	swap	r24
     efa:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     efc:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     efe:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     f00:	8a 30       	cpi	r24, 0x0A	; 10
     f02:	18 f0       	brcs	.+6      	; 0xf0a <USB_Device_ProcessControlRequest+0x1e2>
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	c7 96       	adiw	r24, 0x37	; 55
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <USB_Device_ProcessControlRequest+0x1e6>
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	c0 96       	adiw	r24, 0x30	; 48
     f0e:	8d 93       	st	X+, r24
     f10:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f12:	2f 5f       	subi	r18, 0xFF	; 255
     f14:	24 31       	cpi	r18, 0x14	; 20
     f16:	49 f7       	brne	.-46     	; 0xeea <USB_Device_ProcessControlRequest+0x1c2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f18:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f1a:	08 ee       	ldi	r16, 0xE8	; 232
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	f8 01       	movw	r30, r16
     f20:	80 81       	ld	r24, Z
     f22:	87 7f       	andi	r24, 0xF7	; 247
     f24:	80 83       	st	Z, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     f26:	6a e2       	ldi	r22, 0x2A	; 42
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	bc db       	rcall	.-2184   	; 0x6a8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f30:	f8 01       	movw	r30, r16
     f32:	80 81       	ld	r24, Z
     f34:	8b 77       	andi	r24, 0x7B	; 123
     f36:	80 83       	st	Z, r24
     f38:	4a c0       	rjmp	.+148    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     f3a:	ae 01       	movw	r20, r28
     f3c:	45 5d       	subi	r20, 0xD5	; 213
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	60 91 a4 01 	lds	r22, 0x01A4
     f44:	18 da       	rcall	.-3024   	; 0x376 <CALLBACK_USB_GetDescriptor>
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	09 f4       	brne	.+2      	; 0xf4c <USB_Device_ProcessControlRequest+0x224>
     f4a:	41 c0       	rjmp	.+130    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f4c:	08 ee       	ldi	r16, 0xE8	; 232
     f4e:	10 e0       	ldi	r17, 0x00	; 0
     f50:	f8 01       	movw	r30, r16
     f52:	20 81       	ld	r18, Z
     f54:	27 7f       	andi	r18, 0xF7	; 247
     f56:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     f58:	bc 01       	movw	r22, r24
     f5a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f5c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f5e:	18 dc       	rcall	.-2000   	; 0x790 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f60:	f8 01       	movw	r30, r16
     f62:	80 81       	ld	r24, Z
     f64:	8b 77       	andi	r24, 0x7B	; 123
     f66:	80 83       	st	Z, r24
     f68:	32 c0       	rjmp	.+100    	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     f6a:	90 38       	cpi	r25, 0x80	; 128
     f6c:	81 f5       	brne	.+96     	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f6e:	e8 ee       	ldi	r30, 0xE8	; 232
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	87 7f       	andi	r24, 0xF7	; 247
     f76:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     f78:	80 91 9b 01 	lds	r24, 0x019B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f7c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f80:	80 81       	ld	r24, Z
     f82:	8e 77       	andi	r24, 0x7E	; 126
     f84:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     f86:	46 dd       	rcall	.-1396   	; 0xa14 <Endpoint_ClearStatusStage>
     f88:	22 c0       	rjmp	.+68     	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     f8a:	91 11       	cpse	r25, r1
     f8c:	20 c0       	rjmp	.+64     	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     f8e:	80 91 a2 01 	lds	r24, 0x01A2
     f92:	82 30       	cpi	r24, 0x02	; 2
     f94:	e0 f4       	brcc	.+56     	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f96:	e8 ee       	ldi	r30, 0xE8	; 232
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	87 7f       	andi	r24, 0xF7	; 247
     f9e:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     fa0:	80 91 a2 01 	lds	r24, 0x01A2
     fa4:	80 93 9b 01 	sts	0x019B, r24

	Endpoint_ClearStatusStage();
     fa8:	35 dd       	rcall	.-1430   	; 0xa14 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     faa:	80 91 9b 01 	lds	r24, 0x019B
     fae:	88 23       	and	r24, r24
     fb0:	21 f0       	breq	.+8      	; 0xfba <USB_Device_ProcessControlRequest+0x292>
	  USB_DeviceState = DEVICE_STATE_Configured;
     fb2:	84 e0       	ldi	r24, 0x04	; 4
     fb4:	80 93 9f 01 	sts	0x019F, r24
     fb8:	09 c0       	rjmp	.+18     	; 0xfcc <USB_Device_ProcessControlRequest+0x2a4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     fba:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     fbe:	88 23       	and	r24, r24
     fc0:	14 f4       	brge	.+4      	; 0xfc6 <USB_Device_ProcessControlRequest+0x29e>
     fc2:	84 e0       	ldi	r24, 0x04	; 4
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <USB_Device_ProcessControlRequest+0x2a0>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 9f 01 	sts	0x019F, r24

	EVENT_USB_Device_ConfigurationChanged();
     fcc:	6d d9       	rcall	.-3366   	; 0x2a8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fce:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     fd2:	83 ff       	sbrs	r24, 3
     fd4:	16 c0       	rjmp	.+44     	; 0x1002 <USB_Device_ProcessControlRequest+0x2da>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fd6:	e8 ee       	ldi	r30, 0xE8	; 232
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	87 7f       	andi	r24, 0xF7	; 247
     fde:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     fe0:	eb ee       	ldi	r30, 0xEB	; 235
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 62       	ori	r24, 0x20	; 32
     fe8:	80 83       	st	Z, r24
     fea:	0b c0       	rjmp	.+22     	; 0x1002 <USB_Device_ProcessControlRequest+0x2da>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     fec:	90 91 a2 01 	lds	r25, 0x01A2
     ff0:	91 30       	cpi	r25, 0x01	; 1
     ff2:	69 f7       	brne	.-38     	; 0xfce <USB_Device_ProcessControlRequest+0x2a6>
     ff4:	ff ce       	rjmp	.-514    	; 0xdf4 <USB_Device_ProcessControlRequest+0xcc>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ff6:	80 91 a2 01 	lds	r24, 0x01A2
     ffa:	88 23       	and	r24, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <USB_Device_ProcessControlRequest+0x2d8>
     ffe:	01 cf       	rjmp	.-510    	; 0xe02 <USB_Device_ProcessControlRequest+0xda>
    1000:	2d cf       	rjmp	.-422    	; 0xe5c <USB_Device_ProcessControlRequest+0x134>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1002:	ac 96       	adiw	r28, 0x2c	; 44
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	08 95       	ret

00001018 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1018:	08 95       	ret

0000101a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    101a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    101c:	80 91 9f 01 	lds	r24, 0x019F
    1020:	88 23       	and	r24, r24
    1022:	a1 f0       	breq	.+40     	; 0x104c <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1024:	c0 91 e9 00 	lds	r28, 0x00E9
    1028:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    102a:	80 91 ec 00 	lds	r24, 0x00EC
    102e:	80 ff       	sbrs	r24, 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <USB_USBTask+0x1c>
    1032:	80 e8       	ldi	r24, 0x80	; 128
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <USB_USBTask+0x1e>
    1036:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1038:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    103a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    103e:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1042:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1044:	71 de       	rcall	.-798    	; 0xd28 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1046:	cf 70       	andi	r28, 0x0F	; 15
    1048:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <memcmp>:
    1050:	fb 01       	movw	r30, r22
    1052:	dc 01       	movw	r26, r24
    1054:	04 c0       	rjmp	.+8      	; 0x105e <memcmp+0xe>
    1056:	8d 91       	ld	r24, X+
    1058:	01 90       	ld	r0, Z+
    105a:	80 19       	sub	r24, r0
    105c:	21 f4       	brne	.+8      	; 0x1066 <memcmp+0x16>
    105e:	41 50       	subi	r20, 0x01	; 1
    1060:	50 40       	sbci	r21, 0x00	; 0
    1062:	c8 f7       	brcc	.-14     	; 0x1056 <memcmp+0x6>
    1064:	88 1b       	sub	r24, r24
    1066:	99 0b       	sbc	r25, r25
    1068:	08 95       	ret

0000106a <memcpy>:
    106a:	fb 01       	movw	r30, r22
    106c:	dc 01       	movw	r26, r24
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <memcpy+0xa>
    1070:	01 90       	ld	r0, Z+
    1072:	0d 92       	st	X+, r0
    1074:	41 50       	subi	r20, 0x01	; 1
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	d8 f7       	brcc	.-10     	; 0x1070 <memcpy+0x6>
    107a:	08 95       	ret

0000107c <memset>:
    107c:	dc 01       	movw	r26, r24
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <memset+0x6>
    1080:	6d 93       	st	X+, r22
    1082:	41 50       	subi	r20, 0x01	; 1
    1084:	50 40       	sbci	r21, 0x00	; 0
    1086:	e0 f7       	brcc	.-8      	; 0x1080 <memset+0x4>
    1088:	08 95       	ret

0000108a <_exit>:
    108a:	f8 94       	cli

0000108c <__stop_program>:
    108c:	ff cf       	rjmp	.-2      	; 0x108c <__stop_program>
