/*
||
|| @file FSM.cpp
|| @version 1.7
|| @author Alexander Brevig
|| @contact alexanderbrevig@gmail.com
||
|| @description
|| | Provide an easy way of making finite state machines
|| #
||
|| @license
|| | This library is free software; you can redistribute it and/or
|| | modify it under the terms of the GNU Lesser General Public
|| | License as published by the Free Software Foundation; version
|| | 2.1 of the License.
|| |
|| | This library is distributed in the hope that it will be useful,
|| | but WITHOUT ANY WARRANTY; without even the implied warranty of
|| | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
|| | Lesser General Public License for more details.
|| |
|| | You should have received a copy of the GNU Lesser General Public
|| | License along with this library; if not, write to the Free Software
|| | Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
|| #
||
*/

#include "FSM.h"

//FINITE STATE
STATE_MACHINE::STATE_MACHINE( void (*updateFunction)() ){
	user_enter = 0;
	user_update = updateFunction;
	user_exit = 0;
}

STATE_MACHINE::STATE_MACHINE( void (*enterFunction)(), void (*updateFunction)(), void (*exitFunction)() ){
	user_enter = enterFunction;
	user_update = updateFunction;
	user_exit = exitFunction;
}

//what to do when entering this state
void STATE_MACHINE::enter(){
	if (user_enter){
		user_enter();
	}
}

//what to do when this state updates
void STATE_MACHINE::update(){
	if (user_update){
		user_update();
	}
}

//what to do when exiting this state
void STATE_MACHINE::exit(){
	if (user_exit){
		user_exit();
	}
}
//END FINITE STATE


//FINITE STATE MACHINE
FSM::FSM(STATE_MACHINE& current){
	NEED_TO_TRIGGER_ENTER = true;
	CURRENT_STATE = NEXT_STATE = &current;
	stateChangeTime = 0;
}

FSM& FSM::update() {
	//simulate a transition to the first state
	//this only happens the first time update is called
	if (NEED_TO_TRIGGER_ENTER) { 
		CURRENT_STATE->enter();
		NEED_TO_TRIGGER_ENTER = false;
	} else {
		if (CURRENT_STATE != NEXT_STATE){
			immidiate_transition_to(*NEXT_STATE);
		}
		CURRENT_STATE->update();
	}
	return *this;
}

FSM& FSM::transition_to(STATE_MACHINE& state){
	NEXT_STATE = &state;
	stateChangeTime = millis();
	return *this;
}

FSM& FSM::immidiate_transition_to(STATE_MACHINE& state){
	CURRENT_STATE->exit();
	CURRENT_STATE = NEXT_STATE = &state;
	CURRENT_STATE->enter();
	stateChangeTime = millis();
	return *this;
}

//return the current state
STATE_MACHINE& FSM::get_current_state() {
	return *CURRENT_STATE;
}

//check if state is equal to the currentState
bool FSM::is_in_state( STATE_MACHINE &state ){
	if (&state == CURRENT_STATE) {
		return true;
	} else {
		return false;
	}
}

unsigned long FSM::timeInCurrentState() {
	return millis() - state_change_time;
}
//END FINITE STATE MACHINE
