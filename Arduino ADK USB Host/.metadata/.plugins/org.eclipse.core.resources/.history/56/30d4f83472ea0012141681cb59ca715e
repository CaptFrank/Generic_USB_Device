/**
 * State_Machine_Implementation.h
 *
 *  Created on: Jul 10, 2013
 *      Author: francispapineau
 */

#ifndef STATE_MACHINE_IMPLEMENTATION_H_
#define STATE_MACHINE_IMPLEMENTATION_H_

#include "Main_Defines.h"

/**
 *
 */
 class EMULATION_DEVICE {

	private:

	 	 /// The CURRENT_STATE of the machine;
	 	 static byte CURRENT_STATE;

	 	/**
	 	 * This enumeration is the definition for the
	 	 * USB Emulation physical device. It is chosen
	 	 * by reading a button or switch on the Arduino
	 	 * Mega.
	 	 */
	 	struct STATE_MACHINE {

	 		/// Generic states
	 		byte PWR_ON_STATE 					= 0x00;
	 		byte INITIALIZATION_STATE 			= 0x01;
	 		byte SETUP_STATE 					= 0x02;
	 		byte USB_SETUP_STATE 				= 0x03;
	 		byte START_STATE 					= 0x04;
	 		byte ASSEMBLE_REPORT_STATE 			= 0x05;
	 		byte ASSEMBLE_USB_FRAME_STATE 		= 0x06;
	 		byte SEND_USB_FRAME_STATE			= 0x07;
	 		byte REBOOT_ERROR_STATE 			= 0x08;
	 		byte RUN_ERROR_STATE 				= 0x09;
	 		byte SYSTEM_HANG_STATE 				= 0x0A;
	 	};

	public:
	
	 	/**
	 	 * This is the default constructor.
		 * The PWR_ON_STATE is set to the CURRENT_STATE.
	 	 */
	 	EMULATION_DEVICE();

	 	/**
	 	 *
	 	 * @param state
	 	 */
		void set_state(byte state);

		/**
		 *
		 */
		void step_next_state();

		/**
		 *
		 */
		void go_back_one_state();

		/**
		 *
		 */
		void go_error_reboot();

		/**
		 *
		 */
		void go_error_hang();

		/**
		 *
		 * @return
		 */
		byte return_current_state();

		/**
		 *
		 * @return
		 */
		byte return_next_state();
 };

/**
 *
 */
 class USB_HOST_DEVICE {

 	 private:

	 	/**
	 	 * This enumeration is the definition for the
	 	 * USB HOST physical device. It is chosen
	 	 * by reading a button or switch on the Arduino
	 	 * Mega.
	 	 */
	 	struct STATE_MACHINE {

	 		/// Generic states
	 		byte PWR_ON_STATE 					= 0x00;
	 		byte INITIALIZATION_STATE 			= 0x01;
	 		byte SETUP_STATE 					= 0x02;
	 		byte USB_SETUP_STATE 				= 0x03;
	 		byte START_STATE 					= 0x04;
	 		byte RECEIVE_PACKET_NUMBER_STATE 	= 0x05;
	 		byte RECEIVE_PACKET_STATE 			= 0x06;
	 		byte PARSE_PACKET_STATE 			= 0x07;
	 		byte ASSEMBLE_USB_REPORT_STATE		= 0x08;
	 		byte SEND_USB_FRAME_STATE			= 0x09;
	 		byte REBOOT_ERROR_STATE 			= 0x0A;
	 		byte RUN_ERROR_STATE 				= 0x0B;
	 		byte SYSTEM_HANG_STATE 				= 0x0C;

	 	};
		
	public:

	 	/**
	 	 *
	 	 */
	 	USB_HOST_DEVICE();

	 	/**
	 	 *
	 	 * @param state
	 	 */
	 	void set_state(byte state);

	 	/**
	 	 *
	 	 */
	 	void step_next_state();

	 	/**
	 	 *
	 	 */
	 	void go_back_one_state();

	 	/**
	 	 *
	 	 */
	 	void go_error_reboot();

	 	/**
	 	 *
	 	 */
	 	void go_error_hang();

	 	/**
		 *
	 	 * @return
	 	 */
	 	byte return_current_state();

	 	/**
	 	 *
	 	 * @return
	 	 */
	 	byte return_next_state();
 };

#endif /* STATE_MACHINE_IMPLEMENTATION_H_ */
